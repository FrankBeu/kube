// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MiddlewareTCP is the CRD implementation of a Traefik TCP middleware. More info: https://doc.traefik.io/traefik/v2.8/middlewares/overview/
type MiddlewareTCP struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
	Spec MiddlewareTCPSpecOutput `pulumi:"spec"`
}

// NewMiddlewareTCP registers a new resource with the given unique name, arguments, and options.
func NewMiddlewareTCP(ctx *pulumi.Context,
	name string, args *MiddlewareTCPArgs, opts ...pulumi.ResourceOption) (*MiddlewareTCP, error) {
	if args == nil {
		args = &MiddlewareTCPArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("traefik.containo.us/v1alpha1")
	args.Kind = pulumi.StringPtr("MiddlewareTCP")
	var resource MiddlewareTCP
	err := ctx.RegisterResource("kubernetes:traefik.containo.us/v1alpha1:MiddlewareTCP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMiddlewareTCP gets an existing MiddlewareTCP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMiddlewareTCP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MiddlewareTCPState, opts ...pulumi.ResourceOption) (*MiddlewareTCP, error) {
	var resource MiddlewareTCP
	err := ctx.ReadResource("kubernetes:traefik.containo.us/v1alpha1:MiddlewareTCP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MiddlewareTCP resources.
type middlewareTCPState struct {
}

type MiddlewareTCPState struct {
}

func (MiddlewareTCPState) ElementType() reflect.Type {
	return reflect.TypeOf((*middlewareTCPState)(nil)).Elem()
}

type middlewareTCPArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
	Spec *MiddlewareTCPSpec `pulumi:"spec"`
}

// The set of arguments for constructing a MiddlewareTCP resource.
type MiddlewareTCPArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
	Spec MiddlewareTCPSpecPtrInput
}

func (MiddlewareTCPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*middlewareTCPArgs)(nil)).Elem()
}

type MiddlewareTCPInput interface {
	pulumi.Input

	ToMiddlewareTCPOutput() MiddlewareTCPOutput
	ToMiddlewareTCPOutputWithContext(ctx context.Context) MiddlewareTCPOutput
}

func (*MiddlewareTCP) ElementType() reflect.Type {
	return reflect.TypeOf((**MiddlewareTCP)(nil)).Elem()
}

func (i *MiddlewareTCP) ToMiddlewareTCPOutput() MiddlewareTCPOutput {
	return i.ToMiddlewareTCPOutputWithContext(context.Background())
}

func (i *MiddlewareTCP) ToMiddlewareTCPOutputWithContext(ctx context.Context) MiddlewareTCPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MiddlewareTCPOutput)
}

type MiddlewareTCPOutput struct{ *pulumi.OutputState }

func (MiddlewareTCPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MiddlewareTCP)(nil)).Elem()
}

func (o MiddlewareTCPOutput) ToMiddlewareTCPOutput() MiddlewareTCPOutput {
	return o
}

func (o MiddlewareTCPOutput) ToMiddlewareTCPOutputWithContext(ctx context.Context) MiddlewareTCPOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MiddlewareTCPInput)(nil)).Elem(), &MiddlewareTCP{})
	pulumi.RegisterOutputType(MiddlewareTCPOutput{})
}
