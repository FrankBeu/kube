// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TLSStore is the CRD implementation of a Traefik TLS Store. For the time being, only the TLSStore named default is supported. This means that you cannot have two stores that are named default in different Kubernetes namespaces. More info: https://doc.traefik.io/traefik/v2.8/https/tls/#certificates-stores
type TLSStore struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// TLSStoreSpec defines the desired state of a TLSStore.
	Spec TLSStoreSpecOutput `pulumi:"spec"`
}

// NewTLSStore registers a new resource with the given unique name, arguments, and options.
func NewTLSStore(ctx *pulumi.Context,
	name string, args *TLSStoreArgs, opts ...pulumi.ResourceOption) (*TLSStore, error) {
	if args == nil {
		args = &TLSStoreArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("traefik.containo.us/v1alpha1")
	args.Kind = pulumi.StringPtr("TLSStore")
	var resource TLSStore
	err := ctx.RegisterResource("kubernetes:traefik.containo.us/v1alpha1:TLSStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTLSStore gets an existing TLSStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTLSStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TLSStoreState, opts ...pulumi.ResourceOption) (*TLSStore, error) {
	var resource TLSStore
	err := ctx.ReadResource("kubernetes:traefik.containo.us/v1alpha1:TLSStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TLSStore resources.
type tlsstoreState struct {
}

type TLSStoreState struct {
}

func (TLSStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsstoreState)(nil)).Elem()
}

type tlsstoreArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TLSStoreSpec defines the desired state of a TLSStore.
	Spec *TLSStoreSpec `pulumi:"spec"`
}

// The set of arguments for constructing a TLSStore resource.
type TLSStoreArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// TLSStoreSpec defines the desired state of a TLSStore.
	Spec TLSStoreSpecPtrInput
}

func (TLSStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsstoreArgs)(nil)).Elem()
}

type TLSStoreInput interface {
	pulumi.Input

	ToTLSStoreOutput() TLSStoreOutput
	ToTLSStoreOutputWithContext(ctx context.Context) TLSStoreOutput
}

func (*TLSStore) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSStore)(nil)).Elem()
}

func (i *TLSStore) ToTLSStoreOutput() TLSStoreOutput {
	return i.ToTLSStoreOutputWithContext(context.Background())
}

func (i *TLSStore) ToTLSStoreOutputWithContext(ctx context.Context) TLSStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSStoreOutput)
}

type TLSStoreOutput struct{ *pulumi.OutputState }

func (TLSStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSStore)(nil)).Elem()
}

func (o TLSStoreOutput) ToTLSStoreOutput() TLSStoreOutput {
	return o
}

func (o TLSStoreOutput) ToTLSStoreOutputWithContext(ctx context.Context) TLSStoreOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TLSStoreInput)(nil)).Elem(), &TLSStore{})
	pulumi.RegisterOutputType(TLSStoreOutput{})
}
