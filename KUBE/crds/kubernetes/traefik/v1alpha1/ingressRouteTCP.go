// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
type IngressRouteTCP struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
	Spec IngressRouteTCPSpecOutput `pulumi:"spec"`
}

// NewIngressRouteTCP registers a new resource with the given unique name, arguments, and options.
func NewIngressRouteTCP(ctx *pulumi.Context,
	name string, args *IngressRouteTCPArgs, opts ...pulumi.ResourceOption) (*IngressRouteTCP, error) {
	if args == nil {
		args = &IngressRouteTCPArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("traefik.containo.us/v1alpha1")
	args.Kind = pulumi.StringPtr("IngressRouteTCP")
	var resource IngressRouteTCP
	err := ctx.RegisterResource("kubernetes:traefik.containo.us/v1alpha1:IngressRouteTCP", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngressRouteTCP gets an existing IngressRouteTCP resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngressRouteTCP(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngressRouteTCPState, opts ...pulumi.ResourceOption) (*IngressRouteTCP, error) {
	var resource IngressRouteTCP
	err := ctx.ReadResource("kubernetes:traefik.containo.us/v1alpha1:IngressRouteTCP", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngressRouteTCP resources.
type ingressRouteTCPState struct {
}

type IngressRouteTCPState struct {
}

func (IngressRouteTCPState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressRouteTCPState)(nil)).Elem()
}

type ingressRouteTCPArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
	Spec *IngressRouteTCPSpec `pulumi:"spec"`
}

// The set of arguments for constructing a IngressRouteTCP resource.
type IngressRouteTCPArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
	Spec IngressRouteTCPSpecPtrInput
}

func (IngressRouteTCPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressRouteTCPArgs)(nil)).Elem()
}

type IngressRouteTCPInput interface {
	pulumi.Input

	ToIngressRouteTCPOutput() IngressRouteTCPOutput
	ToIngressRouteTCPOutputWithContext(ctx context.Context) IngressRouteTCPOutput
}

func (*IngressRouteTCP) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressRouteTCP)(nil)).Elem()
}

func (i *IngressRouteTCP) ToIngressRouteTCPOutput() IngressRouteTCPOutput {
	return i.ToIngressRouteTCPOutputWithContext(context.Background())
}

func (i *IngressRouteTCP) ToIngressRouteTCPOutputWithContext(ctx context.Context) IngressRouteTCPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRouteTCPOutput)
}

type IngressRouteTCPOutput struct{ *pulumi.OutputState }

func (IngressRouteTCPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressRouteTCP)(nil)).Elem()
}

func (o IngressRouteTCPOutput) ToIngressRouteTCPOutput() IngressRouteTCPOutput {
	return o
}

func (o IngressRouteTCPOutput) ToIngressRouteTCPOutputWithContext(ctx context.Context) IngressRouteTCPOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRouteTCPInput)(nil)).Elem(), &IngressRouteTCP{})
	pulumi.RegisterOutputType(IngressRouteTCPOutput{})
}
