// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IngressRoute is the CRD implementation of a Traefik HTTP Router.
type IngressRoute struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput  `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput  `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput `pulumi:"metadata"`
	// IngressRouteSpec defines the desired state of IngressRoute.
	Spec IngressRouteSpecOutput `pulumi:"spec"`
}

// NewIngressRoute registers a new resource with the given unique name, arguments, and options.
func NewIngressRoute(ctx *pulumi.Context,
	name string, args *IngressRouteArgs, opts ...pulumi.ResourceOption) (*IngressRoute, error) {
	if args == nil {
		args = &IngressRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("traefik.containo.us/v1alpha1")
	args.Kind = pulumi.StringPtr("IngressRoute")
	var resource IngressRoute
	err := ctx.RegisterResource("kubernetes:traefik.containo.us/v1alpha1:IngressRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngressRoute gets an existing IngressRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngressRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngressRouteState, opts ...pulumi.ResourceOption) (*IngressRoute, error) {
	var resource IngressRoute
	err := ctx.ReadResource("kubernetes:traefik.containo.us/v1alpha1:IngressRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngressRoute resources.
type ingressRouteState struct {
}

type IngressRouteState struct {
}

func (IngressRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressRouteState)(nil)).Elem()
}

type ingressRouteArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IngressRouteSpec defines the desired state of IngressRoute.
	Spec *IngressRouteSpec `pulumi:"spec"`
}

// The set of arguments for constructing a IngressRoute resource.
type IngressRouteArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IngressRouteSpec defines the desired state of IngressRoute.
	Spec IngressRouteSpecPtrInput
}

func (IngressRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressRouteArgs)(nil)).Elem()
}

type IngressRouteInput interface {
	pulumi.Input

	ToIngressRouteOutput() IngressRouteOutput
	ToIngressRouteOutputWithContext(ctx context.Context) IngressRouteOutput
}

func (*IngressRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressRoute)(nil)).Elem()
}

func (i *IngressRoute) ToIngressRouteOutput() IngressRouteOutput {
	return i.ToIngressRouteOutputWithContext(context.Background())
}

func (i *IngressRoute) ToIngressRouteOutputWithContext(ctx context.Context) IngressRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressRouteOutput)
}

type IngressRouteOutput struct{ *pulumi.OutputState }

func (IngressRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressRoute)(nil)).Elem()
}

func (o IngressRouteOutput) ToIngressRouteOutput() IngressRouteOutput {
	return o
}

func (o IngressRouteOutput) ToIngressRouteOutputWithContext(ctx context.Context) IngressRouteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngressRouteInput)(nil)).Elem(), &IngressRoute{})
	pulumi.RegisterOutputType(IngressRouteOutput{})
}
