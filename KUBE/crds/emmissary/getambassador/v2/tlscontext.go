// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TLSContext is the Schema for the tlscontexts API
type TLSContext struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// TLSContextSpec defines the desired state of TLSContext
	Spec TLSContextSpecPtrOutput `pulumi:"spec"`
}

// NewTLSContext registers a new resource with the given unique name, arguments, and options.
func NewTLSContext(ctx *pulumi.Context,
	name string, args *TLSContextArgs, opts ...pulumi.ResourceOption) (*TLSContext, error) {
	if args == nil {
		args = &TLSContextArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v2")
	args.Kind = pulumi.StringPtr("TLSContext")
	var resource TLSContext
	err := ctx.RegisterResource("kubernetes:getambassador.io/v2:TLSContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTLSContext gets an existing TLSContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTLSContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TLSContextState, opts ...pulumi.ResourceOption) (*TLSContext, error) {
	var resource TLSContext
	err := ctx.ReadResource("kubernetes:getambassador.io/v2:TLSContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TLSContext resources.
type tlscontextState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TLSContextSpec defines the desired state of TLSContext
	Spec *TLSContextSpec `pulumi:"spec"`
}

type TLSContextState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// TLSContextSpec defines the desired state of TLSContext
	Spec TLSContextSpecPtrInput
}

func (TLSContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlscontextState)(nil)).Elem()
}

type tlscontextArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TLSContextSpec defines the desired state of TLSContext
	Spec *TLSContextSpec `pulumi:"spec"`
}

// The set of arguments for constructing a TLSContext resource.
type TLSContextArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// TLSContextSpec defines the desired state of TLSContext
	Spec TLSContextSpecPtrInput
}

func (TLSContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlscontextArgs)(nil)).Elem()
}

type TLSContextInput interface {
	pulumi.Input

	ToTLSContextOutput() TLSContextOutput
	ToTLSContextOutputWithContext(ctx context.Context) TLSContextOutput
}

func (*TLSContext) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContext)(nil))
}

func (i *TLSContext) ToTLSContextOutput() TLSContextOutput {
	return i.ToTLSContextOutputWithContext(context.Background())
}

func (i *TLSContext) ToTLSContextOutputWithContext(ctx context.Context) TLSContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSContextOutput)
}

type TLSContextOutput struct {
	*pulumi.OutputState
}

func (TLSContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContext)(nil))
}

func (o TLSContextOutput) ToTLSContextOutput() TLSContextOutput {
	return o
}

func (o TLSContextOutput) ToTLSContextOutputWithContext(ctx context.Context) TLSContextOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TLSContextOutput{})
}
