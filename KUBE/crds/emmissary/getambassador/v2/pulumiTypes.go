// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AuthService is the Schema for the authservices API
type AuthServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AuthServiceSpec defines the desired state of AuthService
	Spec *AuthServiceSpec `pulumi:"spec"`
}

// AuthServiceTypeInput is an input type that accepts AuthServiceTypeArgs and AuthServiceTypeOutput values.
// You can construct a concrete instance of `AuthServiceTypeInput` via:
//
//          AuthServiceTypeArgs{...}
type AuthServiceTypeInput interface {
	pulumi.Input

	ToAuthServiceTypeOutput() AuthServiceTypeOutput
	ToAuthServiceTypeOutputWithContext(context.Context) AuthServiceTypeOutput
}

// AuthService is the Schema for the authservices API
type AuthServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AuthServiceSpec defines the desired state of AuthService
	Spec AuthServiceSpecPtrInput `pulumi:"spec"`
}

func (AuthServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceType)(nil)).Elem()
}

func (i AuthServiceTypeArgs) ToAuthServiceTypeOutput() AuthServiceTypeOutput {
	return i.ToAuthServiceTypeOutputWithContext(context.Background())
}

func (i AuthServiceTypeArgs) ToAuthServiceTypeOutputWithContext(ctx context.Context) AuthServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceTypeOutput)
}

// AuthService is the Schema for the authservices API
type AuthServiceTypeOutput struct{ *pulumi.OutputState }

func (AuthServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceType)(nil)).Elem()
}

func (o AuthServiceTypeOutput) ToAuthServiceTypeOutput() AuthServiceTypeOutput {
	return o
}

func (o AuthServiceTypeOutput) ToAuthServiceTypeOutputWithContext(ctx context.Context) AuthServiceTypeOutput {
	return o
}

func (o AuthServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AuthServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AuthServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AuthServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AuthServiceSpec defines the desired state of AuthService
func (o AuthServiceTypeOutput) Spec() AuthServiceSpecPtrOutput {
	return o.ApplyT(func(v AuthServiceType) *AuthServiceSpec { return v.Spec }).(AuthServiceSpecPtrOutput)
}

type AuthServiceMetadata struct {
}

// AuthServiceMetadataInput is an input type that accepts AuthServiceMetadataArgs and AuthServiceMetadataOutput values.
// You can construct a concrete instance of `AuthServiceMetadataInput` via:
//
//          AuthServiceMetadataArgs{...}
type AuthServiceMetadataInput interface {
	pulumi.Input

	ToAuthServiceMetadataOutput() AuthServiceMetadataOutput
	ToAuthServiceMetadataOutputWithContext(context.Context) AuthServiceMetadataOutput
}

type AuthServiceMetadataArgs struct {
}

func (AuthServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceMetadata)(nil)).Elem()
}

func (i AuthServiceMetadataArgs) ToAuthServiceMetadataOutput() AuthServiceMetadataOutput {
	return i.ToAuthServiceMetadataOutputWithContext(context.Background())
}

func (i AuthServiceMetadataArgs) ToAuthServiceMetadataOutputWithContext(ctx context.Context) AuthServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceMetadataOutput)
}

type AuthServiceMetadataOutput struct{ *pulumi.OutputState }

func (AuthServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceMetadata)(nil)).Elem()
}

func (o AuthServiceMetadataOutput) ToAuthServiceMetadataOutput() AuthServiceMetadataOutput {
	return o
}

func (o AuthServiceMetadataOutput) ToAuthServiceMetadataOutputWithContext(ctx context.Context) AuthServiceMetadataOutput {
	return o
}

// AuthServiceSpec defines the desired state of AuthService
type AuthServiceSpec struct {
	Add_auth_headers              map[string]interface{} `pulumi:"add_auth_headers"`
	Add_linkerd_headers           *bool                  `pulumi:"add_linkerd_headers"`
	Allow_request_body            *bool                  `pulumi:"allow_request_body"`
	Allowed_authorization_headers []string               `pulumi:"allowed_authorization_headers"`
	Allowed_request_headers       []string               `pulumi:"allowed_request_headers"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id      interface{}                  `pulumi:"ambassador_id"`
	Auth_service       string                       `pulumi:"auth_service"`
	Failure_mode_allow *bool                        `pulumi:"failure_mode_allow"`
	Include_body       *AuthServiceSpecInclude_body `pulumi:"include_body"`
	Path_prefix        *string                      `pulumi:"path_prefix"`
	Proto              *string                      `pulumi:"proto"`
	Protocol_version   *string                      `pulumi:"protocol_version"`
	// Why isn't this just an int??
	Status_on_error *AuthServiceSpecStatus_on_error `pulumi:"status_on_error"`
	Timeout_ms      *int                            `pulumi:"timeout_ms"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls interface{} `pulumi:"tls"`
}

// AuthServiceSpecInput is an input type that accepts AuthServiceSpecArgs and AuthServiceSpecOutput values.
// You can construct a concrete instance of `AuthServiceSpecInput` via:
//
//          AuthServiceSpecArgs{...}
type AuthServiceSpecInput interface {
	pulumi.Input

	ToAuthServiceSpecOutput() AuthServiceSpecOutput
	ToAuthServiceSpecOutputWithContext(context.Context) AuthServiceSpecOutput
}

// AuthServiceSpec defines the desired state of AuthService
type AuthServiceSpecArgs struct {
	Add_auth_headers              pulumi.MapInput         `pulumi:"add_auth_headers"`
	Add_linkerd_headers           pulumi.BoolPtrInput     `pulumi:"add_linkerd_headers"`
	Allow_request_body            pulumi.BoolPtrInput     `pulumi:"allow_request_body"`
	Allowed_authorization_headers pulumi.StringArrayInput `pulumi:"allowed_authorization_headers"`
	Allowed_request_headers       pulumi.StringArrayInput `pulumi:"allowed_request_headers"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id      pulumi.Input                        `pulumi:"ambassador_id"`
	Auth_service       pulumi.StringInput                  `pulumi:"auth_service"`
	Failure_mode_allow pulumi.BoolPtrInput                 `pulumi:"failure_mode_allow"`
	Include_body       AuthServiceSpecInclude_bodyPtrInput `pulumi:"include_body"`
	Path_prefix        pulumi.StringPtrInput               `pulumi:"path_prefix"`
	Proto              pulumi.StringPtrInput               `pulumi:"proto"`
	Protocol_version   pulumi.StringPtrInput               `pulumi:"protocol_version"`
	// Why isn't this just an int??
	Status_on_error AuthServiceSpecStatus_on_errorPtrInput `pulumi:"status_on_error"`
	Timeout_ms      pulumi.IntPtrInput                     `pulumi:"timeout_ms"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls pulumi.Input `pulumi:"tls"`
}

func (AuthServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpec)(nil)).Elem()
}

func (i AuthServiceSpecArgs) ToAuthServiceSpecOutput() AuthServiceSpecOutput {
	return i.ToAuthServiceSpecOutputWithContext(context.Background())
}

func (i AuthServiceSpecArgs) ToAuthServiceSpecOutputWithContext(ctx context.Context) AuthServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecOutput)
}

func (i AuthServiceSpecArgs) ToAuthServiceSpecPtrOutput() AuthServiceSpecPtrOutput {
	return i.ToAuthServiceSpecPtrOutputWithContext(context.Background())
}

func (i AuthServiceSpecArgs) ToAuthServiceSpecPtrOutputWithContext(ctx context.Context) AuthServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecOutput).ToAuthServiceSpecPtrOutputWithContext(ctx)
}

// AuthServiceSpecPtrInput is an input type that accepts AuthServiceSpecArgs, AuthServiceSpecPtr and AuthServiceSpecPtrOutput values.
// You can construct a concrete instance of `AuthServiceSpecPtrInput` via:
//
//          AuthServiceSpecArgs{...}
//
//  or:
//
//          nil
type AuthServiceSpecPtrInput interface {
	pulumi.Input

	ToAuthServiceSpecPtrOutput() AuthServiceSpecPtrOutput
	ToAuthServiceSpecPtrOutputWithContext(context.Context) AuthServiceSpecPtrOutput
}

type authServiceSpecPtrType AuthServiceSpecArgs

func AuthServiceSpecPtr(v *AuthServiceSpecArgs) AuthServiceSpecPtrInput {
	return (*authServiceSpecPtrType)(v)
}

func (*authServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServiceSpec)(nil)).Elem()
}

func (i *authServiceSpecPtrType) ToAuthServiceSpecPtrOutput() AuthServiceSpecPtrOutput {
	return i.ToAuthServiceSpecPtrOutputWithContext(context.Background())
}

func (i *authServiceSpecPtrType) ToAuthServiceSpecPtrOutputWithContext(ctx context.Context) AuthServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecPtrOutput)
}

// AuthServiceSpec defines the desired state of AuthService
type AuthServiceSpecOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpec)(nil)).Elem()
}

func (o AuthServiceSpecOutput) ToAuthServiceSpecOutput() AuthServiceSpecOutput {
	return o
}

func (o AuthServiceSpecOutput) ToAuthServiceSpecOutputWithContext(ctx context.Context) AuthServiceSpecOutput {
	return o
}

func (o AuthServiceSpecOutput) ToAuthServiceSpecPtrOutput() AuthServiceSpecPtrOutput {
	return o.ToAuthServiceSpecPtrOutputWithContext(context.Background())
}

func (o AuthServiceSpecOutput) ToAuthServiceSpecPtrOutputWithContext(ctx context.Context) AuthServiceSpecPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *AuthServiceSpec {
		return &v
	}).(AuthServiceSpecPtrOutput)
}
func (o AuthServiceSpecOutput) Add_auth_headers() pulumi.MapOutput {
	return o.ApplyT(func(v AuthServiceSpec) map[string]interface{} { return v.Add_auth_headers }).(pulumi.MapOutput)
}

func (o AuthServiceSpecOutput) Add_linkerd_headers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *bool { return v.Add_linkerd_headers }).(pulumi.BoolPtrOutput)
}

func (o AuthServiceSpecOutput) Allow_request_body() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *bool { return v.Allow_request_body }).(pulumi.BoolPtrOutput)
}

func (o AuthServiceSpecOutput) Allowed_authorization_headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthServiceSpec) []string { return v.Allowed_authorization_headers }).(pulumi.StringArrayOutput)
}

func (o AuthServiceSpecOutput) Allowed_request_headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthServiceSpec) []string { return v.Allowed_request_headers }).(pulumi.StringArrayOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o AuthServiceSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v AuthServiceSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o AuthServiceSpecOutput) Auth_service() pulumi.StringOutput {
	return o.ApplyT(func(v AuthServiceSpec) string { return v.Auth_service }).(pulumi.StringOutput)
}

func (o AuthServiceSpecOutput) Failure_mode_allow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *bool { return v.Failure_mode_allow }).(pulumi.BoolPtrOutput)
}

func (o AuthServiceSpecOutput) Include_body() AuthServiceSpecInclude_bodyPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *AuthServiceSpecInclude_body { return v.Include_body }).(AuthServiceSpecInclude_bodyPtrOutput)
}

func (o AuthServiceSpecOutput) Path_prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *string { return v.Path_prefix }).(pulumi.StringPtrOutput)
}

func (o AuthServiceSpecOutput) Proto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *string { return v.Proto }).(pulumi.StringPtrOutput)
}

func (o AuthServiceSpecOutput) Protocol_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *string { return v.Protocol_version }).(pulumi.StringPtrOutput)
}

// Why isn't this just an int??
func (o AuthServiceSpecOutput) Status_on_error() AuthServiceSpecStatus_on_errorPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *AuthServiceSpecStatus_on_error { return v.Status_on_error }).(AuthServiceSpecStatus_on_errorPtrOutput)
}

func (o AuthServiceSpecOutput) Timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AuthServiceSpec) *int { return v.Timeout_ms }).(pulumi.IntPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o AuthServiceSpecOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v AuthServiceSpec) interface{} { return v.Tls }).(pulumi.AnyOutput)
}

type AuthServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServiceSpec)(nil)).Elem()
}

func (o AuthServiceSpecPtrOutput) ToAuthServiceSpecPtrOutput() AuthServiceSpecPtrOutput {
	return o
}

func (o AuthServiceSpecPtrOutput) ToAuthServiceSpecPtrOutputWithContext(ctx context.Context) AuthServiceSpecPtrOutput {
	return o
}

func (o AuthServiceSpecPtrOutput) Elem() AuthServiceSpecOutput {
	return o.ApplyT(func(v *AuthServiceSpec) AuthServiceSpec { return *v }).(AuthServiceSpecOutput)
}

func (o AuthServiceSpecPtrOutput) Add_auth_headers() pulumi.MapOutput {
	return o.ApplyT(func(v *AuthServiceSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Add_auth_headers
	}).(pulumi.MapOutput)
}

func (o AuthServiceSpecPtrOutput) Add_linkerd_headers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Add_linkerd_headers
	}).(pulumi.BoolPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Allow_request_body() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Allow_request_body
	}).(pulumi.BoolPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Allowed_authorization_headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Allowed_authorization_headers
	}).(pulumi.StringArrayOutput)
}

func (o AuthServiceSpecPtrOutput) Allowed_request_headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Allowed_request_headers
	}).(pulumi.StringArrayOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o AuthServiceSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *AuthServiceSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o AuthServiceSpecPtrOutput) Auth_service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Auth_service
	}).(pulumi.StringPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Failure_mode_allow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Failure_mode_allow
	}).(pulumi.BoolPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Include_body() AuthServiceSpecInclude_bodyPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *AuthServiceSpecInclude_body {
		if v == nil {
			return nil
		}
		return v.Include_body
	}).(AuthServiceSpecInclude_bodyPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Path_prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Path_prefix
	}).(pulumi.StringPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Proto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Proto
	}).(pulumi.StringPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Protocol_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Protocol_version
	}).(pulumi.StringPtrOutput)
}

// Why isn't this just an int??
func (o AuthServiceSpecPtrOutput) Status_on_error() AuthServiceSpecStatus_on_errorPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *AuthServiceSpecStatus_on_error {
		if v == nil {
			return nil
		}
		return v.Status_on_error
	}).(AuthServiceSpecStatus_on_errorPtrOutput)
}

func (o AuthServiceSpecPtrOutput) Timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.Timeout_ms
	}).(pulumi.IntPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o AuthServiceSpecPtrOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v *AuthServiceSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.AnyOutput)
}

type AuthServiceSpecAdd_auth_headers struct {
}

// AuthServiceSpecAdd_auth_headersInput is an input type that accepts AuthServiceSpecAdd_auth_headersArgs and AuthServiceSpecAdd_auth_headersOutput values.
// You can construct a concrete instance of `AuthServiceSpecAdd_auth_headersInput` via:
//
//          AuthServiceSpecAdd_auth_headersArgs{...}
type AuthServiceSpecAdd_auth_headersInput interface {
	pulumi.Input

	ToAuthServiceSpecAdd_auth_headersOutput() AuthServiceSpecAdd_auth_headersOutput
	ToAuthServiceSpecAdd_auth_headersOutputWithContext(context.Context) AuthServiceSpecAdd_auth_headersOutput
}

type AuthServiceSpecAdd_auth_headersArgs struct {
}

func (AuthServiceSpecAdd_auth_headersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpecAdd_auth_headers)(nil)).Elem()
}

func (i AuthServiceSpecAdd_auth_headersArgs) ToAuthServiceSpecAdd_auth_headersOutput() AuthServiceSpecAdd_auth_headersOutput {
	return i.ToAuthServiceSpecAdd_auth_headersOutputWithContext(context.Background())
}

func (i AuthServiceSpecAdd_auth_headersArgs) ToAuthServiceSpecAdd_auth_headersOutputWithContext(ctx context.Context) AuthServiceSpecAdd_auth_headersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecAdd_auth_headersOutput)
}

type AuthServiceSpecAdd_auth_headersOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecAdd_auth_headersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpecAdd_auth_headers)(nil)).Elem()
}

func (o AuthServiceSpecAdd_auth_headersOutput) ToAuthServiceSpecAdd_auth_headersOutput() AuthServiceSpecAdd_auth_headersOutput {
	return o
}

func (o AuthServiceSpecAdd_auth_headersOutput) ToAuthServiceSpecAdd_auth_headersOutputWithContext(ctx context.Context) AuthServiceSpecAdd_auth_headersOutput {
	return o
}

type AuthServiceSpecInclude_body struct {
	Allow_partial bool `pulumi:"allow_partial"`
	// These aren't pointer types because they are required.
	Max_bytes int `pulumi:"max_bytes"`
}

// AuthServiceSpecInclude_bodyInput is an input type that accepts AuthServiceSpecInclude_bodyArgs and AuthServiceSpecInclude_bodyOutput values.
// You can construct a concrete instance of `AuthServiceSpecInclude_bodyInput` via:
//
//          AuthServiceSpecInclude_bodyArgs{...}
type AuthServiceSpecInclude_bodyInput interface {
	pulumi.Input

	ToAuthServiceSpecInclude_bodyOutput() AuthServiceSpecInclude_bodyOutput
	ToAuthServiceSpecInclude_bodyOutputWithContext(context.Context) AuthServiceSpecInclude_bodyOutput
}

type AuthServiceSpecInclude_bodyArgs struct {
	Allow_partial pulumi.BoolInput `pulumi:"allow_partial"`
	// These aren't pointer types because they are required.
	Max_bytes pulumi.IntInput `pulumi:"max_bytes"`
}

func (AuthServiceSpecInclude_bodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpecInclude_body)(nil)).Elem()
}

func (i AuthServiceSpecInclude_bodyArgs) ToAuthServiceSpecInclude_bodyOutput() AuthServiceSpecInclude_bodyOutput {
	return i.ToAuthServiceSpecInclude_bodyOutputWithContext(context.Background())
}

func (i AuthServiceSpecInclude_bodyArgs) ToAuthServiceSpecInclude_bodyOutputWithContext(ctx context.Context) AuthServiceSpecInclude_bodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecInclude_bodyOutput)
}

func (i AuthServiceSpecInclude_bodyArgs) ToAuthServiceSpecInclude_bodyPtrOutput() AuthServiceSpecInclude_bodyPtrOutput {
	return i.ToAuthServiceSpecInclude_bodyPtrOutputWithContext(context.Background())
}

func (i AuthServiceSpecInclude_bodyArgs) ToAuthServiceSpecInclude_bodyPtrOutputWithContext(ctx context.Context) AuthServiceSpecInclude_bodyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecInclude_bodyOutput).ToAuthServiceSpecInclude_bodyPtrOutputWithContext(ctx)
}

// AuthServiceSpecInclude_bodyPtrInput is an input type that accepts AuthServiceSpecInclude_bodyArgs, AuthServiceSpecInclude_bodyPtr and AuthServiceSpecInclude_bodyPtrOutput values.
// You can construct a concrete instance of `AuthServiceSpecInclude_bodyPtrInput` via:
//
//          AuthServiceSpecInclude_bodyArgs{...}
//
//  or:
//
//          nil
type AuthServiceSpecInclude_bodyPtrInput interface {
	pulumi.Input

	ToAuthServiceSpecInclude_bodyPtrOutput() AuthServiceSpecInclude_bodyPtrOutput
	ToAuthServiceSpecInclude_bodyPtrOutputWithContext(context.Context) AuthServiceSpecInclude_bodyPtrOutput
}

type authServiceSpecInclude_bodyPtrType AuthServiceSpecInclude_bodyArgs

func AuthServiceSpecInclude_bodyPtr(v *AuthServiceSpecInclude_bodyArgs) AuthServiceSpecInclude_bodyPtrInput {
	return (*authServiceSpecInclude_bodyPtrType)(v)
}

func (*authServiceSpecInclude_bodyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServiceSpecInclude_body)(nil)).Elem()
}

func (i *authServiceSpecInclude_bodyPtrType) ToAuthServiceSpecInclude_bodyPtrOutput() AuthServiceSpecInclude_bodyPtrOutput {
	return i.ToAuthServiceSpecInclude_bodyPtrOutputWithContext(context.Background())
}

func (i *authServiceSpecInclude_bodyPtrType) ToAuthServiceSpecInclude_bodyPtrOutputWithContext(ctx context.Context) AuthServiceSpecInclude_bodyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecInclude_bodyPtrOutput)
}

type AuthServiceSpecInclude_bodyOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecInclude_bodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpecInclude_body)(nil)).Elem()
}

func (o AuthServiceSpecInclude_bodyOutput) ToAuthServiceSpecInclude_bodyOutput() AuthServiceSpecInclude_bodyOutput {
	return o
}

func (o AuthServiceSpecInclude_bodyOutput) ToAuthServiceSpecInclude_bodyOutputWithContext(ctx context.Context) AuthServiceSpecInclude_bodyOutput {
	return o
}

func (o AuthServiceSpecInclude_bodyOutput) ToAuthServiceSpecInclude_bodyPtrOutput() AuthServiceSpecInclude_bodyPtrOutput {
	return o.ToAuthServiceSpecInclude_bodyPtrOutputWithContext(context.Background())
}

func (o AuthServiceSpecInclude_bodyOutput) ToAuthServiceSpecInclude_bodyPtrOutputWithContext(ctx context.Context) AuthServiceSpecInclude_bodyPtrOutput {
	return o.ApplyT(func(v AuthServiceSpecInclude_body) *AuthServiceSpecInclude_body {
		return &v
	}).(AuthServiceSpecInclude_bodyPtrOutput)
}
func (o AuthServiceSpecInclude_bodyOutput) Allow_partial() pulumi.BoolOutput {
	return o.ApplyT(func(v AuthServiceSpecInclude_body) bool { return v.Allow_partial }).(pulumi.BoolOutput)
}

// These aren't pointer types because they are required.
func (o AuthServiceSpecInclude_bodyOutput) Max_bytes() pulumi.IntOutput {
	return o.ApplyT(func(v AuthServiceSpecInclude_body) int { return v.Max_bytes }).(pulumi.IntOutput)
}

type AuthServiceSpecInclude_bodyPtrOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecInclude_bodyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServiceSpecInclude_body)(nil)).Elem()
}

func (o AuthServiceSpecInclude_bodyPtrOutput) ToAuthServiceSpecInclude_bodyPtrOutput() AuthServiceSpecInclude_bodyPtrOutput {
	return o
}

func (o AuthServiceSpecInclude_bodyPtrOutput) ToAuthServiceSpecInclude_bodyPtrOutputWithContext(ctx context.Context) AuthServiceSpecInclude_bodyPtrOutput {
	return o
}

func (o AuthServiceSpecInclude_bodyPtrOutput) Elem() AuthServiceSpecInclude_bodyOutput {
	return o.ApplyT(func(v *AuthServiceSpecInclude_body) AuthServiceSpecInclude_body { return *v }).(AuthServiceSpecInclude_bodyOutput)
}

func (o AuthServiceSpecInclude_bodyPtrOutput) Allow_partial() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpecInclude_body) *bool {
		if v == nil {
			return nil
		}
		return &v.Allow_partial
	}).(pulumi.BoolPtrOutput)
}

// These aren't pointer types because they are required.
func (o AuthServiceSpecInclude_bodyPtrOutput) Max_bytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpecInclude_body) *int {
		if v == nil {
			return nil
		}
		return &v.Max_bytes
	}).(pulumi.IntPtrOutput)
}

// Why isn't this just an int??
type AuthServiceSpecStatus_on_error struct {
	Code *int `pulumi:"code"`
}

// AuthServiceSpecStatus_on_errorInput is an input type that accepts AuthServiceSpecStatus_on_errorArgs and AuthServiceSpecStatus_on_errorOutput values.
// You can construct a concrete instance of `AuthServiceSpecStatus_on_errorInput` via:
//
//          AuthServiceSpecStatus_on_errorArgs{...}
type AuthServiceSpecStatus_on_errorInput interface {
	pulumi.Input

	ToAuthServiceSpecStatus_on_errorOutput() AuthServiceSpecStatus_on_errorOutput
	ToAuthServiceSpecStatus_on_errorOutputWithContext(context.Context) AuthServiceSpecStatus_on_errorOutput
}

// Why isn't this just an int??
type AuthServiceSpecStatus_on_errorArgs struct {
	Code pulumi.IntPtrInput `pulumi:"code"`
}

func (AuthServiceSpecStatus_on_errorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpecStatus_on_error)(nil)).Elem()
}

func (i AuthServiceSpecStatus_on_errorArgs) ToAuthServiceSpecStatus_on_errorOutput() AuthServiceSpecStatus_on_errorOutput {
	return i.ToAuthServiceSpecStatus_on_errorOutputWithContext(context.Background())
}

func (i AuthServiceSpecStatus_on_errorArgs) ToAuthServiceSpecStatus_on_errorOutputWithContext(ctx context.Context) AuthServiceSpecStatus_on_errorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecStatus_on_errorOutput)
}

func (i AuthServiceSpecStatus_on_errorArgs) ToAuthServiceSpecStatus_on_errorPtrOutput() AuthServiceSpecStatus_on_errorPtrOutput {
	return i.ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(context.Background())
}

func (i AuthServiceSpecStatus_on_errorArgs) ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(ctx context.Context) AuthServiceSpecStatus_on_errorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecStatus_on_errorOutput).ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(ctx)
}

// AuthServiceSpecStatus_on_errorPtrInput is an input type that accepts AuthServiceSpecStatus_on_errorArgs, AuthServiceSpecStatus_on_errorPtr and AuthServiceSpecStatus_on_errorPtrOutput values.
// You can construct a concrete instance of `AuthServiceSpecStatus_on_errorPtrInput` via:
//
//          AuthServiceSpecStatus_on_errorArgs{...}
//
//  or:
//
//          nil
type AuthServiceSpecStatus_on_errorPtrInput interface {
	pulumi.Input

	ToAuthServiceSpecStatus_on_errorPtrOutput() AuthServiceSpecStatus_on_errorPtrOutput
	ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(context.Context) AuthServiceSpecStatus_on_errorPtrOutput
}

type authServiceSpecStatus_on_errorPtrType AuthServiceSpecStatus_on_errorArgs

func AuthServiceSpecStatus_on_errorPtr(v *AuthServiceSpecStatus_on_errorArgs) AuthServiceSpecStatus_on_errorPtrInput {
	return (*authServiceSpecStatus_on_errorPtrType)(v)
}

func (*authServiceSpecStatus_on_errorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServiceSpecStatus_on_error)(nil)).Elem()
}

func (i *authServiceSpecStatus_on_errorPtrType) ToAuthServiceSpecStatus_on_errorPtrOutput() AuthServiceSpecStatus_on_errorPtrOutput {
	return i.ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(context.Background())
}

func (i *authServiceSpecStatus_on_errorPtrType) ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(ctx context.Context) AuthServiceSpecStatus_on_errorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthServiceSpecStatus_on_errorPtrOutput)
}

// Why isn't this just an int??
type AuthServiceSpecStatus_on_errorOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecStatus_on_errorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthServiceSpecStatus_on_error)(nil)).Elem()
}

func (o AuthServiceSpecStatus_on_errorOutput) ToAuthServiceSpecStatus_on_errorOutput() AuthServiceSpecStatus_on_errorOutput {
	return o
}

func (o AuthServiceSpecStatus_on_errorOutput) ToAuthServiceSpecStatus_on_errorOutputWithContext(ctx context.Context) AuthServiceSpecStatus_on_errorOutput {
	return o
}

func (o AuthServiceSpecStatus_on_errorOutput) ToAuthServiceSpecStatus_on_errorPtrOutput() AuthServiceSpecStatus_on_errorPtrOutput {
	return o.ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(context.Background())
}

func (o AuthServiceSpecStatus_on_errorOutput) ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(ctx context.Context) AuthServiceSpecStatus_on_errorPtrOutput {
	return o.ApplyT(func(v AuthServiceSpecStatus_on_error) *AuthServiceSpecStatus_on_error {
		return &v
	}).(AuthServiceSpecStatus_on_errorPtrOutput)
}
func (o AuthServiceSpecStatus_on_errorOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AuthServiceSpecStatus_on_error) *int { return v.Code }).(pulumi.IntPtrOutput)
}

type AuthServiceSpecStatus_on_errorPtrOutput struct{ *pulumi.OutputState }

func (AuthServiceSpecStatus_on_errorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthServiceSpecStatus_on_error)(nil)).Elem()
}

func (o AuthServiceSpecStatus_on_errorPtrOutput) ToAuthServiceSpecStatus_on_errorPtrOutput() AuthServiceSpecStatus_on_errorPtrOutput {
	return o
}

func (o AuthServiceSpecStatus_on_errorPtrOutput) ToAuthServiceSpecStatus_on_errorPtrOutputWithContext(ctx context.Context) AuthServiceSpecStatus_on_errorPtrOutput {
	return o
}

func (o AuthServiceSpecStatus_on_errorPtrOutput) Elem() AuthServiceSpecStatus_on_errorOutput {
	return o.ApplyT(func(v *AuthServiceSpecStatus_on_error) AuthServiceSpecStatus_on_error { return *v }).(AuthServiceSpecStatus_on_errorOutput)
}

func (o AuthServiceSpecStatus_on_errorPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthServiceSpecStatus_on_error) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// ConsulResolver is the Schema for the ConsulResolver API
type ConsulResolverType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec *ConsulResolverSpec `pulumi:"spec"`
}

// ConsulResolverTypeInput is an input type that accepts ConsulResolverTypeArgs and ConsulResolverTypeOutput values.
// You can construct a concrete instance of `ConsulResolverTypeInput` via:
//
//          ConsulResolverTypeArgs{...}
type ConsulResolverTypeInput interface {
	pulumi.Input

	ToConsulResolverTypeOutput() ConsulResolverTypeOutput
	ToConsulResolverTypeOutputWithContext(context.Context) ConsulResolverTypeOutput
}

// ConsulResolver is the Schema for the ConsulResolver API
type ConsulResolverTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec ConsulResolverSpecPtrInput `pulumi:"spec"`
}

func (ConsulResolverTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolverType)(nil)).Elem()
}

func (i ConsulResolverTypeArgs) ToConsulResolverTypeOutput() ConsulResolverTypeOutput {
	return i.ToConsulResolverTypeOutputWithContext(context.Background())
}

func (i ConsulResolverTypeArgs) ToConsulResolverTypeOutputWithContext(ctx context.Context) ConsulResolverTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulResolverTypeOutput)
}

// ConsulResolver is the Schema for the ConsulResolver API
type ConsulResolverTypeOutput struct{ *pulumi.OutputState }

func (ConsulResolverTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolverType)(nil)).Elem()
}

func (o ConsulResolverTypeOutput) ToConsulResolverTypeOutput() ConsulResolverTypeOutput {
	return o
}

func (o ConsulResolverTypeOutput) ToConsulResolverTypeOutputWithContext(ctx context.Context) ConsulResolverTypeOutput {
	return o
}

func (o ConsulResolverTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsulResolverType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ConsulResolverTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsulResolverType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ConsulResolverTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ConsulResolverType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
func (o ConsulResolverTypeOutput) Spec() ConsulResolverSpecPtrOutput {
	return o.ApplyT(func(v ConsulResolverType) *ConsulResolverSpec { return v.Spec }).(ConsulResolverSpecPtrOutput)
}

type ConsulResolverMetadata struct {
}

// ConsulResolverMetadataInput is an input type that accepts ConsulResolverMetadataArgs and ConsulResolverMetadataOutput values.
// You can construct a concrete instance of `ConsulResolverMetadataInput` via:
//
//          ConsulResolverMetadataArgs{...}
type ConsulResolverMetadataInput interface {
	pulumi.Input

	ToConsulResolverMetadataOutput() ConsulResolverMetadataOutput
	ToConsulResolverMetadataOutputWithContext(context.Context) ConsulResolverMetadataOutput
}

type ConsulResolverMetadataArgs struct {
}

func (ConsulResolverMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolverMetadata)(nil)).Elem()
}

func (i ConsulResolverMetadataArgs) ToConsulResolverMetadataOutput() ConsulResolverMetadataOutput {
	return i.ToConsulResolverMetadataOutputWithContext(context.Background())
}

func (i ConsulResolverMetadataArgs) ToConsulResolverMetadataOutputWithContext(ctx context.Context) ConsulResolverMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulResolverMetadataOutput)
}

type ConsulResolverMetadataOutput struct{ *pulumi.OutputState }

func (ConsulResolverMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolverMetadata)(nil)).Elem()
}

func (o ConsulResolverMetadataOutput) ToConsulResolverMetadataOutput() ConsulResolverMetadataOutput {
	return o
}

func (o ConsulResolverMetadataOutput) ToConsulResolverMetadataOutputWithContext(ctx context.Context) ConsulResolverMetadataOutput {
	return o
}

// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
type ConsulResolverSpec struct {
	Address *string `pulumi:"address"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id interface{} `pulumi:"ambassador_id"`
	Datacenter    *string     `pulumi:"datacenter"`
}

// ConsulResolverSpecInput is an input type that accepts ConsulResolverSpecArgs and ConsulResolverSpecOutput values.
// You can construct a concrete instance of `ConsulResolverSpecInput` via:
//
//          ConsulResolverSpecArgs{...}
type ConsulResolverSpecInput interface {
	pulumi.Input

	ToConsulResolverSpecOutput() ConsulResolverSpecOutput
	ToConsulResolverSpecOutputWithContext(context.Context) ConsulResolverSpecOutput
}

// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
type ConsulResolverSpecArgs struct {
	Address pulumi.StringPtrInput `pulumi:"address"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id pulumi.Input          `pulumi:"ambassador_id"`
	Datacenter    pulumi.StringPtrInput `pulumi:"datacenter"`
}

func (ConsulResolverSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolverSpec)(nil)).Elem()
}

func (i ConsulResolverSpecArgs) ToConsulResolverSpecOutput() ConsulResolverSpecOutput {
	return i.ToConsulResolverSpecOutputWithContext(context.Background())
}

func (i ConsulResolverSpecArgs) ToConsulResolverSpecOutputWithContext(ctx context.Context) ConsulResolverSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulResolverSpecOutput)
}

func (i ConsulResolverSpecArgs) ToConsulResolverSpecPtrOutput() ConsulResolverSpecPtrOutput {
	return i.ToConsulResolverSpecPtrOutputWithContext(context.Background())
}

func (i ConsulResolverSpecArgs) ToConsulResolverSpecPtrOutputWithContext(ctx context.Context) ConsulResolverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulResolverSpecOutput).ToConsulResolverSpecPtrOutputWithContext(ctx)
}

// ConsulResolverSpecPtrInput is an input type that accepts ConsulResolverSpecArgs, ConsulResolverSpecPtr and ConsulResolverSpecPtrOutput values.
// You can construct a concrete instance of `ConsulResolverSpecPtrInput` via:
//
//          ConsulResolverSpecArgs{...}
//
//  or:
//
//          nil
type ConsulResolverSpecPtrInput interface {
	pulumi.Input

	ToConsulResolverSpecPtrOutput() ConsulResolverSpecPtrOutput
	ToConsulResolverSpecPtrOutputWithContext(context.Context) ConsulResolverSpecPtrOutput
}

type consulResolverSpecPtrType ConsulResolverSpecArgs

func ConsulResolverSpecPtr(v *ConsulResolverSpecArgs) ConsulResolverSpecPtrInput {
	return (*consulResolverSpecPtrType)(v)
}

func (*consulResolverSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsulResolverSpec)(nil)).Elem()
}

func (i *consulResolverSpecPtrType) ToConsulResolverSpecPtrOutput() ConsulResolverSpecPtrOutput {
	return i.ToConsulResolverSpecPtrOutputWithContext(context.Background())
}

func (i *consulResolverSpecPtrType) ToConsulResolverSpecPtrOutputWithContext(ctx context.Context) ConsulResolverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulResolverSpecPtrOutput)
}

// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
type ConsulResolverSpecOutput struct{ *pulumi.OutputState }

func (ConsulResolverSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolverSpec)(nil)).Elem()
}

func (o ConsulResolverSpecOutput) ToConsulResolverSpecOutput() ConsulResolverSpecOutput {
	return o
}

func (o ConsulResolverSpecOutput) ToConsulResolverSpecOutputWithContext(ctx context.Context) ConsulResolverSpecOutput {
	return o
}

func (o ConsulResolverSpecOutput) ToConsulResolverSpecPtrOutput() ConsulResolverSpecPtrOutput {
	return o.ToConsulResolverSpecPtrOutputWithContext(context.Background())
}

func (o ConsulResolverSpecOutput) ToConsulResolverSpecPtrOutputWithContext(ctx context.Context) ConsulResolverSpecPtrOutput {
	return o.ApplyT(func(v ConsulResolverSpec) *ConsulResolverSpec {
		return &v
	}).(ConsulResolverSpecPtrOutput)
}
func (o ConsulResolverSpecOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsulResolverSpec) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o ConsulResolverSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v ConsulResolverSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o ConsulResolverSpecOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsulResolverSpec) *string { return v.Datacenter }).(pulumi.StringPtrOutput)
}

type ConsulResolverSpecPtrOutput struct{ *pulumi.OutputState }

func (ConsulResolverSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsulResolverSpec)(nil)).Elem()
}

func (o ConsulResolverSpecPtrOutput) ToConsulResolverSpecPtrOutput() ConsulResolverSpecPtrOutput {
	return o
}

func (o ConsulResolverSpecPtrOutput) ToConsulResolverSpecPtrOutputWithContext(ctx context.Context) ConsulResolverSpecPtrOutput {
	return o
}

func (o ConsulResolverSpecPtrOutput) Elem() ConsulResolverSpecOutput {
	return o.ApplyT(func(v *ConsulResolverSpec) ConsulResolverSpec { return *v }).(ConsulResolverSpecOutput)
}

func (o ConsulResolverSpecPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsulResolverSpec) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o ConsulResolverSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *ConsulResolverSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o ConsulResolverSpecPtrOutput) Datacenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsulResolverSpec) *string {
		if v == nil {
			return nil
		}
		return v.Datacenter
	}).(pulumi.StringPtrOutput)
}

// DevPortal is the Schema for the DevPortals API
//  DevPortal resources specify the `what` and `how` is shown in a DevPortal:
//  * `what` is in a DevPortal can be controlled with   - a `selector`, that can be used for filtering `Mappings`.   - a `docs` listing of (services, url) * `how` is a pointer to some `contents` (a checkout of a Git repository   with go-templates/markdown/css).
//     Multiple `DevPortal`s can exist in the cluster, and the Dev Portal server will show them at different endpoints. A `DevPortal` resource with a special name, `ambassador`, will be used for configuring the default Dev Portal (served at `/docs/` by default).
type DevPortalType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DevPortalSpec defines the desired state of DevPortal
	Spec *DevPortalSpec `pulumi:"spec"`
}

// DevPortalTypeInput is an input type that accepts DevPortalTypeArgs and DevPortalTypeOutput values.
// You can construct a concrete instance of `DevPortalTypeInput` via:
//
//          DevPortalTypeArgs{...}
type DevPortalTypeInput interface {
	pulumi.Input

	ToDevPortalTypeOutput() DevPortalTypeOutput
	ToDevPortalTypeOutputWithContext(context.Context) DevPortalTypeOutput
}

// DevPortal is the Schema for the DevPortals API
//  DevPortal resources specify the `what` and `how` is shown in a DevPortal:
//  * `what` is in a DevPortal can be controlled with   - a `selector`, that can be used for filtering `Mappings`.   - a `docs` listing of (services, url) * `how` is a pointer to some `contents` (a checkout of a Git repository   with go-templates/markdown/css).
//     Multiple `DevPortal`s can exist in the cluster, and the Dev Portal server will show them at different endpoints. A `DevPortal` resource with a special name, `ambassador`, will be used for configuring the default Dev Portal (served at `/docs/` by default).
type DevPortalTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// DevPortalSpec defines the desired state of DevPortal
	Spec DevPortalSpecPtrInput `pulumi:"spec"`
}

func (DevPortalTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalType)(nil)).Elem()
}

func (i DevPortalTypeArgs) ToDevPortalTypeOutput() DevPortalTypeOutput {
	return i.ToDevPortalTypeOutputWithContext(context.Background())
}

func (i DevPortalTypeArgs) ToDevPortalTypeOutputWithContext(ctx context.Context) DevPortalTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalTypeOutput)
}

// DevPortal is the Schema for the DevPortals API
//  DevPortal resources specify the `what` and `how` is shown in a DevPortal:
//  * `what` is in a DevPortal can be controlled with   - a `selector`, that can be used for filtering `Mappings`.   - a `docs` listing of (services, url) * `how` is a pointer to some `contents` (a checkout of a Git repository   with go-templates/markdown/css).
//     Multiple `DevPortal`s can exist in the cluster, and the Dev Portal server will show them at different endpoints. A `DevPortal` resource with a special name, `ambassador`, will be used for configuring the default Dev Portal (served at `/docs/` by default).
type DevPortalTypeOutput struct{ *pulumi.OutputState }

func (DevPortalTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalType)(nil)).Elem()
}

func (o DevPortalTypeOutput) ToDevPortalTypeOutput() DevPortalTypeOutput {
	return o
}

func (o DevPortalTypeOutput) ToDevPortalTypeOutputWithContext(ctx context.Context) DevPortalTypeOutput {
	return o
}

func (o DevPortalTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o DevPortalTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o DevPortalTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DevPortalType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// DevPortalSpec defines the desired state of DevPortal
func (o DevPortalTypeOutput) Spec() DevPortalSpecPtrOutput {
	return o.ApplyT(func(v DevPortalType) *DevPortalSpec { return v.Spec }).(DevPortalSpecPtrOutput)
}

type DevPortalMetadata struct {
}

// DevPortalMetadataInput is an input type that accepts DevPortalMetadataArgs and DevPortalMetadataOutput values.
// You can construct a concrete instance of `DevPortalMetadataInput` via:
//
//          DevPortalMetadataArgs{...}
type DevPortalMetadataInput interface {
	pulumi.Input

	ToDevPortalMetadataOutput() DevPortalMetadataOutput
	ToDevPortalMetadataOutputWithContext(context.Context) DevPortalMetadataOutput
}

type DevPortalMetadataArgs struct {
}

func (DevPortalMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalMetadata)(nil)).Elem()
}

func (i DevPortalMetadataArgs) ToDevPortalMetadataOutput() DevPortalMetadataOutput {
	return i.ToDevPortalMetadataOutputWithContext(context.Background())
}

func (i DevPortalMetadataArgs) ToDevPortalMetadataOutputWithContext(ctx context.Context) DevPortalMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalMetadataOutput)
}

type DevPortalMetadataOutput struct{ *pulumi.OutputState }

func (DevPortalMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalMetadata)(nil)).Elem()
}

func (o DevPortalMetadataOutput) ToDevPortalMetadataOutput() DevPortalMetadataOutput {
	return o
}

func (o DevPortalMetadataOutput) ToDevPortalMetadataOutputWithContext(ctx context.Context) DevPortalMetadataOutput {
	return o
}

// DevPortalSpec defines the desired state of DevPortal
type DevPortalSpec struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id interface{} `pulumi:"ambassador_id"`
	// Content specifies where the content shown in the DevPortal come from
	Content *DevPortalSpecContent `pulumi:"content"`
	// Default must be true when this is the default DevPortal
	Default *bool `pulumi:"default"`
	// Docs is a static docs definition
	Docs []DevPortalSpecDocs `pulumi:"docs"`
	// Describes how to display "services" in the DevPortal. Default namespace.name
	Naming_scheme *string `pulumi:"naming_scheme"`
	// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
	Search *DevPortalSpecSearch `pulumi:"search"`
	// Selector is used for choosing what is shown in the DevPortal
	Selector *DevPortalSpecSelector `pulumi:"selector"`
}

// DevPortalSpecInput is an input type that accepts DevPortalSpecArgs and DevPortalSpecOutput values.
// You can construct a concrete instance of `DevPortalSpecInput` via:
//
//          DevPortalSpecArgs{...}
type DevPortalSpecInput interface {
	pulumi.Input

	ToDevPortalSpecOutput() DevPortalSpecOutput
	ToDevPortalSpecOutputWithContext(context.Context) DevPortalSpecOutput
}

// DevPortalSpec defines the desired state of DevPortal
type DevPortalSpecArgs struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id pulumi.Input `pulumi:"ambassador_id"`
	// Content specifies where the content shown in the DevPortal come from
	Content DevPortalSpecContentPtrInput `pulumi:"content"`
	// Default must be true when this is the default DevPortal
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Docs is a static docs definition
	Docs DevPortalSpecDocsArrayInput `pulumi:"docs"`
	// Describes how to display "services" in the DevPortal. Default namespace.name
	Naming_scheme pulumi.StringPtrInput `pulumi:"naming_scheme"`
	// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
	Search DevPortalSpecSearchPtrInput `pulumi:"search"`
	// Selector is used for choosing what is shown in the DevPortal
	Selector DevPortalSpecSelectorPtrInput `pulumi:"selector"`
}

func (DevPortalSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpec)(nil)).Elem()
}

func (i DevPortalSpecArgs) ToDevPortalSpecOutput() DevPortalSpecOutput {
	return i.ToDevPortalSpecOutputWithContext(context.Background())
}

func (i DevPortalSpecArgs) ToDevPortalSpecOutputWithContext(ctx context.Context) DevPortalSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecOutput)
}

func (i DevPortalSpecArgs) ToDevPortalSpecPtrOutput() DevPortalSpecPtrOutput {
	return i.ToDevPortalSpecPtrOutputWithContext(context.Background())
}

func (i DevPortalSpecArgs) ToDevPortalSpecPtrOutputWithContext(ctx context.Context) DevPortalSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecOutput).ToDevPortalSpecPtrOutputWithContext(ctx)
}

// DevPortalSpecPtrInput is an input type that accepts DevPortalSpecArgs, DevPortalSpecPtr and DevPortalSpecPtrOutput values.
// You can construct a concrete instance of `DevPortalSpecPtrInput` via:
//
//          DevPortalSpecArgs{...}
//
//  or:
//
//          nil
type DevPortalSpecPtrInput interface {
	pulumi.Input

	ToDevPortalSpecPtrOutput() DevPortalSpecPtrOutput
	ToDevPortalSpecPtrOutputWithContext(context.Context) DevPortalSpecPtrOutput
}

type devPortalSpecPtrType DevPortalSpecArgs

func DevPortalSpecPtr(v *DevPortalSpecArgs) DevPortalSpecPtrInput {
	return (*devPortalSpecPtrType)(v)
}

func (*devPortalSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpec)(nil)).Elem()
}

func (i *devPortalSpecPtrType) ToDevPortalSpecPtrOutput() DevPortalSpecPtrOutput {
	return i.ToDevPortalSpecPtrOutputWithContext(context.Background())
}

func (i *devPortalSpecPtrType) ToDevPortalSpecPtrOutputWithContext(ctx context.Context) DevPortalSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecPtrOutput)
}

// DevPortalSpec defines the desired state of DevPortal
type DevPortalSpecOutput struct{ *pulumi.OutputState }

func (DevPortalSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpec)(nil)).Elem()
}

func (o DevPortalSpecOutput) ToDevPortalSpecOutput() DevPortalSpecOutput {
	return o
}

func (o DevPortalSpecOutput) ToDevPortalSpecOutputWithContext(ctx context.Context) DevPortalSpecOutput {
	return o
}

func (o DevPortalSpecOutput) ToDevPortalSpecPtrOutput() DevPortalSpecPtrOutput {
	return o.ToDevPortalSpecPtrOutputWithContext(context.Background())
}

func (o DevPortalSpecOutput) ToDevPortalSpecPtrOutputWithContext(ctx context.Context) DevPortalSpecPtrOutput {
	return o.ApplyT(func(v DevPortalSpec) *DevPortalSpec {
		return &v
	}).(DevPortalSpecPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o DevPortalSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v DevPortalSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

// Content specifies where the content shown in the DevPortal come from
func (o DevPortalSpecOutput) Content() DevPortalSpecContentPtrOutput {
	return o.ApplyT(func(v DevPortalSpec) *DevPortalSpecContent { return v.Content }).(DevPortalSpecContentPtrOutput)
}

// Default must be true when this is the default DevPortal
func (o DevPortalSpecOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DevPortalSpec) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Docs is a static docs definition
func (o DevPortalSpecOutput) Docs() DevPortalSpecDocsArrayOutput {
	return o.ApplyT(func(v DevPortalSpec) []DevPortalSpecDocs { return v.Docs }).(DevPortalSpecDocsArrayOutput)
}

// Describes how to display "services" in the DevPortal. Default namespace.name
func (o DevPortalSpecOutput) Naming_scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpec) *string { return v.Naming_scheme }).(pulumi.StringPtrOutput)
}

// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
func (o DevPortalSpecOutput) Search() DevPortalSpecSearchPtrOutput {
	return o.ApplyT(func(v DevPortalSpec) *DevPortalSpecSearch { return v.Search }).(DevPortalSpecSearchPtrOutput)
}

// Selector is used for choosing what is shown in the DevPortal
func (o DevPortalSpecOutput) Selector() DevPortalSpecSelectorPtrOutput {
	return o.ApplyT(func(v DevPortalSpec) *DevPortalSpecSelector { return v.Selector }).(DevPortalSpecSelectorPtrOutput)
}

type DevPortalSpecPtrOutput struct{ *pulumi.OutputState }

func (DevPortalSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpec)(nil)).Elem()
}

func (o DevPortalSpecPtrOutput) ToDevPortalSpecPtrOutput() DevPortalSpecPtrOutput {
	return o
}

func (o DevPortalSpecPtrOutput) ToDevPortalSpecPtrOutputWithContext(ctx context.Context) DevPortalSpecPtrOutput {
	return o
}

func (o DevPortalSpecPtrOutput) Elem() DevPortalSpecOutput {
	return o.ApplyT(func(v *DevPortalSpec) DevPortalSpec { return *v }).(DevPortalSpecOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o DevPortalSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *DevPortalSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

// Content specifies where the content shown in the DevPortal come from
func (o DevPortalSpecPtrOutput) Content() DevPortalSpecContentPtrOutput {
	return o.ApplyT(func(v *DevPortalSpec) *DevPortalSpecContent {
		if v == nil {
			return nil
		}
		return v.Content
	}).(DevPortalSpecContentPtrOutput)
}

// Default must be true when this is the default DevPortal
func (o DevPortalSpecPtrOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DevPortalSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Default
	}).(pulumi.BoolPtrOutput)
}

// Docs is a static docs definition
func (o DevPortalSpecPtrOutput) Docs() DevPortalSpecDocsArrayOutput {
	return o.ApplyT(func(v *DevPortalSpec) []DevPortalSpecDocs {
		if v == nil {
			return nil
		}
		return v.Docs
	}).(DevPortalSpecDocsArrayOutput)
}

// Describes how to display "services" in the DevPortal. Default namespace.name
func (o DevPortalSpecPtrOutput) Naming_scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevPortalSpec) *string {
		if v == nil {
			return nil
		}
		return v.Naming_scheme
	}).(pulumi.StringPtrOutput)
}

// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
func (o DevPortalSpecPtrOutput) Search() DevPortalSpecSearchPtrOutput {
	return o.ApplyT(func(v *DevPortalSpec) *DevPortalSpecSearch {
		if v == nil {
			return nil
		}
		return v.Search
	}).(DevPortalSpecSearchPtrOutput)
}

// Selector is used for choosing what is shown in the DevPortal
func (o DevPortalSpecPtrOutput) Selector() DevPortalSpecSelectorPtrOutput {
	return o.ApplyT(func(v *DevPortalSpec) *DevPortalSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(DevPortalSpecSelectorPtrOutput)
}

// Content specifies where the content shown in the DevPortal come from
type DevPortalSpecContent struct {
	Branch *string `pulumi:"branch"`
	Dir    *string `pulumi:"dir"`
	Url    *string `pulumi:"url"`
}

// DevPortalSpecContentInput is an input type that accepts DevPortalSpecContentArgs and DevPortalSpecContentOutput values.
// You can construct a concrete instance of `DevPortalSpecContentInput` via:
//
//          DevPortalSpecContentArgs{...}
type DevPortalSpecContentInput interface {
	pulumi.Input

	ToDevPortalSpecContentOutput() DevPortalSpecContentOutput
	ToDevPortalSpecContentOutputWithContext(context.Context) DevPortalSpecContentOutput
}

// Content specifies where the content shown in the DevPortal come from
type DevPortalSpecContentArgs struct {
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	Dir    pulumi.StringPtrInput `pulumi:"dir"`
	Url    pulumi.StringPtrInput `pulumi:"url"`
}

func (DevPortalSpecContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecContent)(nil)).Elem()
}

func (i DevPortalSpecContentArgs) ToDevPortalSpecContentOutput() DevPortalSpecContentOutput {
	return i.ToDevPortalSpecContentOutputWithContext(context.Background())
}

func (i DevPortalSpecContentArgs) ToDevPortalSpecContentOutputWithContext(ctx context.Context) DevPortalSpecContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecContentOutput)
}

func (i DevPortalSpecContentArgs) ToDevPortalSpecContentPtrOutput() DevPortalSpecContentPtrOutput {
	return i.ToDevPortalSpecContentPtrOutputWithContext(context.Background())
}

func (i DevPortalSpecContentArgs) ToDevPortalSpecContentPtrOutputWithContext(ctx context.Context) DevPortalSpecContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecContentOutput).ToDevPortalSpecContentPtrOutputWithContext(ctx)
}

// DevPortalSpecContentPtrInput is an input type that accepts DevPortalSpecContentArgs, DevPortalSpecContentPtr and DevPortalSpecContentPtrOutput values.
// You can construct a concrete instance of `DevPortalSpecContentPtrInput` via:
//
//          DevPortalSpecContentArgs{...}
//
//  or:
//
//          nil
type DevPortalSpecContentPtrInput interface {
	pulumi.Input

	ToDevPortalSpecContentPtrOutput() DevPortalSpecContentPtrOutput
	ToDevPortalSpecContentPtrOutputWithContext(context.Context) DevPortalSpecContentPtrOutput
}

type devPortalSpecContentPtrType DevPortalSpecContentArgs

func DevPortalSpecContentPtr(v *DevPortalSpecContentArgs) DevPortalSpecContentPtrInput {
	return (*devPortalSpecContentPtrType)(v)
}

func (*devPortalSpecContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpecContent)(nil)).Elem()
}

func (i *devPortalSpecContentPtrType) ToDevPortalSpecContentPtrOutput() DevPortalSpecContentPtrOutput {
	return i.ToDevPortalSpecContentPtrOutputWithContext(context.Background())
}

func (i *devPortalSpecContentPtrType) ToDevPortalSpecContentPtrOutputWithContext(ctx context.Context) DevPortalSpecContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecContentPtrOutput)
}

// Content specifies where the content shown in the DevPortal come from
type DevPortalSpecContentOutput struct{ *pulumi.OutputState }

func (DevPortalSpecContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecContent)(nil)).Elem()
}

func (o DevPortalSpecContentOutput) ToDevPortalSpecContentOutput() DevPortalSpecContentOutput {
	return o
}

func (o DevPortalSpecContentOutput) ToDevPortalSpecContentOutputWithContext(ctx context.Context) DevPortalSpecContentOutput {
	return o
}

func (o DevPortalSpecContentOutput) ToDevPortalSpecContentPtrOutput() DevPortalSpecContentPtrOutput {
	return o.ToDevPortalSpecContentPtrOutputWithContext(context.Background())
}

func (o DevPortalSpecContentOutput) ToDevPortalSpecContentPtrOutputWithContext(ctx context.Context) DevPortalSpecContentPtrOutput {
	return o.ApplyT(func(v DevPortalSpecContent) *DevPortalSpecContent {
		return &v
	}).(DevPortalSpecContentPtrOutput)
}
func (o DevPortalSpecContentOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpecContent) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o DevPortalSpecContentOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpecContent) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

func (o DevPortalSpecContentOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpecContent) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DevPortalSpecContentPtrOutput struct{ *pulumi.OutputState }

func (DevPortalSpecContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpecContent)(nil)).Elem()
}

func (o DevPortalSpecContentPtrOutput) ToDevPortalSpecContentPtrOutput() DevPortalSpecContentPtrOutput {
	return o
}

func (o DevPortalSpecContentPtrOutput) ToDevPortalSpecContentPtrOutputWithContext(ctx context.Context) DevPortalSpecContentPtrOutput {
	return o
}

func (o DevPortalSpecContentPtrOutput) Elem() DevPortalSpecContentOutput {
	return o.ApplyT(func(v *DevPortalSpecContent) DevPortalSpecContent { return *v }).(DevPortalSpecContentOutput)
}

func (o DevPortalSpecContentPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevPortalSpecContent) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

func (o DevPortalSpecContentPtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevPortalSpecContent) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

func (o DevPortalSpecContentPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevPortalSpecContent) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// DevPortalDocsSpec is a static documentation definition: instead of using a Selector for finding documentation for services, users can provide a static list of <service>:<URL> tuples. These services will be shown in the Dev Portal with the documentation obtained from this URL.
type DevPortalSpecDocs struct {
	// Service is the service being documented
	Service *string `pulumi:"service"`
	// URL is the URL used for obtaining docs
	Url *string `pulumi:"url"`
}

// DevPortalSpecDocsInput is an input type that accepts DevPortalSpecDocsArgs and DevPortalSpecDocsOutput values.
// You can construct a concrete instance of `DevPortalSpecDocsInput` via:
//
//          DevPortalSpecDocsArgs{...}
type DevPortalSpecDocsInput interface {
	pulumi.Input

	ToDevPortalSpecDocsOutput() DevPortalSpecDocsOutput
	ToDevPortalSpecDocsOutputWithContext(context.Context) DevPortalSpecDocsOutput
}

// DevPortalDocsSpec is a static documentation definition: instead of using a Selector for finding documentation for services, users can provide a static list of <service>:<URL> tuples. These services will be shown in the Dev Portal with the documentation obtained from this URL.
type DevPortalSpecDocsArgs struct {
	// Service is the service being documented
	Service pulumi.StringPtrInput `pulumi:"service"`
	// URL is the URL used for obtaining docs
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DevPortalSpecDocsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecDocs)(nil)).Elem()
}

func (i DevPortalSpecDocsArgs) ToDevPortalSpecDocsOutput() DevPortalSpecDocsOutput {
	return i.ToDevPortalSpecDocsOutputWithContext(context.Background())
}

func (i DevPortalSpecDocsArgs) ToDevPortalSpecDocsOutputWithContext(ctx context.Context) DevPortalSpecDocsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecDocsOutput)
}

// DevPortalSpecDocsArrayInput is an input type that accepts DevPortalSpecDocsArray and DevPortalSpecDocsArrayOutput values.
// You can construct a concrete instance of `DevPortalSpecDocsArrayInput` via:
//
//          DevPortalSpecDocsArray{ DevPortalSpecDocsArgs{...} }
type DevPortalSpecDocsArrayInput interface {
	pulumi.Input

	ToDevPortalSpecDocsArrayOutput() DevPortalSpecDocsArrayOutput
	ToDevPortalSpecDocsArrayOutputWithContext(context.Context) DevPortalSpecDocsArrayOutput
}

type DevPortalSpecDocsArray []DevPortalSpecDocsInput

func (DevPortalSpecDocsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevPortalSpecDocs)(nil)).Elem()
}

func (i DevPortalSpecDocsArray) ToDevPortalSpecDocsArrayOutput() DevPortalSpecDocsArrayOutput {
	return i.ToDevPortalSpecDocsArrayOutputWithContext(context.Background())
}

func (i DevPortalSpecDocsArray) ToDevPortalSpecDocsArrayOutputWithContext(ctx context.Context) DevPortalSpecDocsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecDocsArrayOutput)
}

// DevPortalDocsSpec is a static documentation definition: instead of using a Selector for finding documentation for services, users can provide a static list of <service>:<URL> tuples. These services will be shown in the Dev Portal with the documentation obtained from this URL.
type DevPortalSpecDocsOutput struct{ *pulumi.OutputState }

func (DevPortalSpecDocsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecDocs)(nil)).Elem()
}

func (o DevPortalSpecDocsOutput) ToDevPortalSpecDocsOutput() DevPortalSpecDocsOutput {
	return o
}

func (o DevPortalSpecDocsOutput) ToDevPortalSpecDocsOutputWithContext(ctx context.Context) DevPortalSpecDocsOutput {
	return o
}

// Service is the service being documented
func (o DevPortalSpecDocsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpecDocs) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// URL is the URL used for obtaining docs
func (o DevPortalSpecDocsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpecDocs) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DevPortalSpecDocsArrayOutput struct{ *pulumi.OutputState }

func (DevPortalSpecDocsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DevPortalSpecDocs)(nil)).Elem()
}

func (o DevPortalSpecDocsArrayOutput) ToDevPortalSpecDocsArrayOutput() DevPortalSpecDocsArrayOutput {
	return o
}

func (o DevPortalSpecDocsArrayOutput) ToDevPortalSpecDocsArrayOutputWithContext(ctx context.Context) DevPortalSpecDocsArrayOutput {
	return o
}

func (o DevPortalSpecDocsArrayOutput) Index(i pulumi.IntInput) DevPortalSpecDocsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DevPortalSpecDocs {
		return vs[0].([]DevPortalSpecDocs)[vs[1].(int)]
	}).(DevPortalSpecDocsOutput)
}

// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
type DevPortalSpecSearch struct {
	Enabled *bool `pulumi:"enabled"`
	// Type of search. "title-only" does a fuzzy search over openapi and page titles "all-content" will fuzzy search over all openapi and page content. "title-only" is the default. warning:  using all-content may incur a larger memory footprint
	Type *string `pulumi:"type"`
}

// DevPortalSpecSearchInput is an input type that accepts DevPortalSpecSearchArgs and DevPortalSpecSearchOutput values.
// You can construct a concrete instance of `DevPortalSpecSearchInput` via:
//
//          DevPortalSpecSearchArgs{...}
type DevPortalSpecSearchInput interface {
	pulumi.Input

	ToDevPortalSpecSearchOutput() DevPortalSpecSearchOutput
	ToDevPortalSpecSearchOutputWithContext(context.Context) DevPortalSpecSearchOutput
}

// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
type DevPortalSpecSearchArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Type of search. "title-only" does a fuzzy search over openapi and page titles "all-content" will fuzzy search over all openapi and page content. "title-only" is the default. warning:  using all-content may incur a larger memory footprint
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DevPortalSpecSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecSearch)(nil)).Elem()
}

func (i DevPortalSpecSearchArgs) ToDevPortalSpecSearchOutput() DevPortalSpecSearchOutput {
	return i.ToDevPortalSpecSearchOutputWithContext(context.Background())
}

func (i DevPortalSpecSearchArgs) ToDevPortalSpecSearchOutputWithContext(ctx context.Context) DevPortalSpecSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSearchOutput)
}

func (i DevPortalSpecSearchArgs) ToDevPortalSpecSearchPtrOutput() DevPortalSpecSearchPtrOutput {
	return i.ToDevPortalSpecSearchPtrOutputWithContext(context.Background())
}

func (i DevPortalSpecSearchArgs) ToDevPortalSpecSearchPtrOutputWithContext(ctx context.Context) DevPortalSpecSearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSearchOutput).ToDevPortalSpecSearchPtrOutputWithContext(ctx)
}

// DevPortalSpecSearchPtrInput is an input type that accepts DevPortalSpecSearchArgs, DevPortalSpecSearchPtr and DevPortalSpecSearchPtrOutput values.
// You can construct a concrete instance of `DevPortalSpecSearchPtrInput` via:
//
//          DevPortalSpecSearchArgs{...}
//
//  or:
//
//          nil
type DevPortalSpecSearchPtrInput interface {
	pulumi.Input

	ToDevPortalSpecSearchPtrOutput() DevPortalSpecSearchPtrOutput
	ToDevPortalSpecSearchPtrOutputWithContext(context.Context) DevPortalSpecSearchPtrOutput
}

type devPortalSpecSearchPtrType DevPortalSpecSearchArgs

func DevPortalSpecSearchPtr(v *DevPortalSpecSearchArgs) DevPortalSpecSearchPtrInput {
	return (*devPortalSpecSearchPtrType)(v)
}

func (*devPortalSpecSearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpecSearch)(nil)).Elem()
}

func (i *devPortalSpecSearchPtrType) ToDevPortalSpecSearchPtrOutput() DevPortalSpecSearchPtrOutput {
	return i.ToDevPortalSpecSearchPtrOutputWithContext(context.Background())
}

func (i *devPortalSpecSearchPtrType) ToDevPortalSpecSearchPtrOutputWithContext(ctx context.Context) DevPortalSpecSearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSearchPtrOutput)
}

// DevPortalSearchSpec allows configuration over search functionality for the DevPortal
type DevPortalSpecSearchOutput struct{ *pulumi.OutputState }

func (DevPortalSpecSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecSearch)(nil)).Elem()
}

func (o DevPortalSpecSearchOutput) ToDevPortalSpecSearchOutput() DevPortalSpecSearchOutput {
	return o
}

func (o DevPortalSpecSearchOutput) ToDevPortalSpecSearchOutputWithContext(ctx context.Context) DevPortalSpecSearchOutput {
	return o
}

func (o DevPortalSpecSearchOutput) ToDevPortalSpecSearchPtrOutput() DevPortalSpecSearchPtrOutput {
	return o.ToDevPortalSpecSearchPtrOutputWithContext(context.Background())
}

func (o DevPortalSpecSearchOutput) ToDevPortalSpecSearchPtrOutputWithContext(ctx context.Context) DevPortalSpecSearchPtrOutput {
	return o.ApplyT(func(v DevPortalSpecSearch) *DevPortalSpecSearch {
		return &v
	}).(DevPortalSpecSearchPtrOutput)
}
func (o DevPortalSpecSearchOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DevPortalSpecSearch) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Type of search. "title-only" does a fuzzy search over openapi and page titles "all-content" will fuzzy search over all openapi and page content. "title-only" is the default. warning:  using all-content may incur a larger memory footprint
func (o DevPortalSpecSearchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DevPortalSpecSearch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DevPortalSpecSearchPtrOutput struct{ *pulumi.OutputState }

func (DevPortalSpecSearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpecSearch)(nil)).Elem()
}

func (o DevPortalSpecSearchPtrOutput) ToDevPortalSpecSearchPtrOutput() DevPortalSpecSearchPtrOutput {
	return o
}

func (o DevPortalSpecSearchPtrOutput) ToDevPortalSpecSearchPtrOutputWithContext(ctx context.Context) DevPortalSpecSearchPtrOutput {
	return o
}

func (o DevPortalSpecSearchPtrOutput) Elem() DevPortalSpecSearchOutput {
	return o.ApplyT(func(v *DevPortalSpecSearch) DevPortalSpecSearch { return *v }).(DevPortalSpecSearchOutput)
}

func (o DevPortalSpecSearchPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DevPortalSpecSearch) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Type of search. "title-only" does a fuzzy search over openapi and page titles "all-content" will fuzzy search over all openapi and page content. "title-only" is the default. warning:  using all-content may incur a larger memory footprint
func (o DevPortalSpecSearchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevPortalSpecSearch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Selector is used for choosing what is shown in the DevPortal
type DevPortalSpecSelector struct {
	// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// MatchNamespaces is a list of namespaces that will be included in this DevPortal.
	MatchNamespaces []string `pulumi:"matchNamespaces"`
}

// DevPortalSpecSelectorInput is an input type that accepts DevPortalSpecSelectorArgs and DevPortalSpecSelectorOutput values.
// You can construct a concrete instance of `DevPortalSpecSelectorInput` via:
//
//          DevPortalSpecSelectorArgs{...}
type DevPortalSpecSelectorInput interface {
	pulumi.Input

	ToDevPortalSpecSelectorOutput() DevPortalSpecSelectorOutput
	ToDevPortalSpecSelectorOutputWithContext(context.Context) DevPortalSpecSelectorOutput
}

// Selector is used for choosing what is shown in the DevPortal
type DevPortalSpecSelectorArgs struct {
	// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
	// MatchNamespaces is a list of namespaces that will be included in this DevPortal.
	MatchNamespaces pulumi.StringArrayInput `pulumi:"matchNamespaces"`
}

func (DevPortalSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecSelector)(nil)).Elem()
}

func (i DevPortalSpecSelectorArgs) ToDevPortalSpecSelectorOutput() DevPortalSpecSelectorOutput {
	return i.ToDevPortalSpecSelectorOutputWithContext(context.Background())
}

func (i DevPortalSpecSelectorArgs) ToDevPortalSpecSelectorOutputWithContext(ctx context.Context) DevPortalSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSelectorOutput)
}

func (i DevPortalSpecSelectorArgs) ToDevPortalSpecSelectorPtrOutput() DevPortalSpecSelectorPtrOutput {
	return i.ToDevPortalSpecSelectorPtrOutputWithContext(context.Background())
}

func (i DevPortalSpecSelectorArgs) ToDevPortalSpecSelectorPtrOutputWithContext(ctx context.Context) DevPortalSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSelectorOutput).ToDevPortalSpecSelectorPtrOutputWithContext(ctx)
}

// DevPortalSpecSelectorPtrInput is an input type that accepts DevPortalSpecSelectorArgs, DevPortalSpecSelectorPtr and DevPortalSpecSelectorPtrOutput values.
// You can construct a concrete instance of `DevPortalSpecSelectorPtrInput` via:
//
//          DevPortalSpecSelectorArgs{...}
//
//  or:
//
//          nil
type DevPortalSpecSelectorPtrInput interface {
	pulumi.Input

	ToDevPortalSpecSelectorPtrOutput() DevPortalSpecSelectorPtrOutput
	ToDevPortalSpecSelectorPtrOutputWithContext(context.Context) DevPortalSpecSelectorPtrOutput
}

type devPortalSpecSelectorPtrType DevPortalSpecSelectorArgs

func DevPortalSpecSelectorPtr(v *DevPortalSpecSelectorArgs) DevPortalSpecSelectorPtrInput {
	return (*devPortalSpecSelectorPtrType)(v)
}

func (*devPortalSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpecSelector)(nil)).Elem()
}

func (i *devPortalSpecSelectorPtrType) ToDevPortalSpecSelectorPtrOutput() DevPortalSpecSelectorPtrOutput {
	return i.ToDevPortalSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *devPortalSpecSelectorPtrType) ToDevPortalSpecSelectorPtrOutputWithContext(ctx context.Context) DevPortalSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSelectorPtrOutput)
}

// Selector is used for choosing what is shown in the DevPortal
type DevPortalSpecSelectorOutput struct{ *pulumi.OutputState }

func (DevPortalSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecSelector)(nil)).Elem()
}

func (o DevPortalSpecSelectorOutput) ToDevPortalSpecSelectorOutput() DevPortalSpecSelectorOutput {
	return o
}

func (o DevPortalSpecSelectorOutput) ToDevPortalSpecSelectorOutputWithContext(ctx context.Context) DevPortalSpecSelectorOutput {
	return o
}

func (o DevPortalSpecSelectorOutput) ToDevPortalSpecSelectorPtrOutput() DevPortalSpecSelectorPtrOutput {
	return o.ToDevPortalSpecSelectorPtrOutputWithContext(context.Background())
}

func (o DevPortalSpecSelectorOutput) ToDevPortalSpecSelectorPtrOutputWithContext(ctx context.Context) DevPortalSpecSelectorPtrOutput {
	return o.ApplyT(func(v DevPortalSpecSelector) *DevPortalSpecSelector {
		return &v
	}).(DevPortalSpecSelectorPtrOutput)
}

// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
func (o DevPortalSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DevPortalSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// MatchNamespaces is a list of namespaces that will be included in this DevPortal.
func (o DevPortalSpecSelectorOutput) MatchNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DevPortalSpecSelector) []string { return v.MatchNamespaces }).(pulumi.StringArrayOutput)
}

type DevPortalSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (DevPortalSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevPortalSpecSelector)(nil)).Elem()
}

func (o DevPortalSpecSelectorPtrOutput) ToDevPortalSpecSelectorPtrOutput() DevPortalSpecSelectorPtrOutput {
	return o
}

func (o DevPortalSpecSelectorPtrOutput) ToDevPortalSpecSelectorPtrOutputWithContext(ctx context.Context) DevPortalSpecSelectorPtrOutput {
	return o
}

func (o DevPortalSpecSelectorPtrOutput) Elem() DevPortalSpecSelectorOutput {
	return o.ApplyT(func(v *DevPortalSpecSelector) DevPortalSpecSelector { return *v }).(DevPortalSpecSelectorOutput)
}

// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
func (o DevPortalSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DevPortalSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// MatchNamespaces is a list of namespaces that will be included in this DevPortal.
func (o DevPortalSpecSelectorPtrOutput) MatchNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DevPortalSpecSelector) []string {
		if v == nil {
			return nil
		}
		return v.MatchNamespaces
	}).(pulumi.StringArrayOutput)
}

// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
type DevPortalSpecSelectorMatchLabels struct {
}

// DevPortalSpecSelectorMatchLabelsInput is an input type that accepts DevPortalSpecSelectorMatchLabelsArgs and DevPortalSpecSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `DevPortalSpecSelectorMatchLabelsInput` via:
//
//          DevPortalSpecSelectorMatchLabelsArgs{...}
type DevPortalSpecSelectorMatchLabelsInput interface {
	pulumi.Input

	ToDevPortalSpecSelectorMatchLabelsOutput() DevPortalSpecSelectorMatchLabelsOutput
	ToDevPortalSpecSelectorMatchLabelsOutputWithContext(context.Context) DevPortalSpecSelectorMatchLabelsOutput
}

// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
type DevPortalSpecSelectorMatchLabelsArgs struct {
}

func (DevPortalSpecSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecSelectorMatchLabels)(nil)).Elem()
}

func (i DevPortalSpecSelectorMatchLabelsArgs) ToDevPortalSpecSelectorMatchLabelsOutput() DevPortalSpecSelectorMatchLabelsOutput {
	return i.ToDevPortalSpecSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i DevPortalSpecSelectorMatchLabelsArgs) ToDevPortalSpecSelectorMatchLabelsOutputWithContext(ctx context.Context) DevPortalSpecSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalSpecSelectorMatchLabelsOutput)
}

// MatchLabels specifies the list of labels that must be present in Mappings for being present in this DevPortal.
type DevPortalSpecSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (DevPortalSpecSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortalSpecSelectorMatchLabels)(nil)).Elem()
}

func (o DevPortalSpecSelectorMatchLabelsOutput) ToDevPortalSpecSelectorMatchLabelsOutput() DevPortalSpecSelectorMatchLabelsOutput {
	return o
}

func (o DevPortalSpecSelectorMatchLabelsOutput) ToDevPortalSpecSelectorMatchLabelsOutputWithContext(ctx context.Context) DevPortalSpecSelectorMatchLabelsOutput {
	return o
}

// Host is the Schema for the hosts API
type HostType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HostSpec defines the desired state of Host
	Spec *HostSpec `pulumi:"spec"`
	// HostStatus defines the observed state of Host
	Status *HostStatus `pulumi:"status"`
}

// HostTypeInput is an input type that accepts HostTypeArgs and HostTypeOutput values.
// You can construct a concrete instance of `HostTypeInput` via:
//
//          HostTypeArgs{...}
type HostTypeInput interface {
	pulumi.Input

	ToHostTypeOutput() HostTypeOutput
	ToHostTypeOutputWithContext(context.Context) HostTypeOutput
}

// Host is the Schema for the hosts API
type HostTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// HostSpec defines the desired state of Host
	Spec HostSpecPtrInput `pulumi:"spec"`
	// HostStatus defines the observed state of Host
	Status HostStatusPtrInput `pulumi:"status"`
}

func (HostTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostType)(nil)).Elem()
}

func (i HostTypeArgs) ToHostTypeOutput() HostTypeOutput {
	return i.ToHostTypeOutputWithContext(context.Background())
}

func (i HostTypeArgs) ToHostTypeOutputWithContext(ctx context.Context) HostTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostTypeOutput)
}

// Host is the Schema for the hosts API
type HostTypeOutput struct{ *pulumi.OutputState }

func (HostTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostType)(nil)).Elem()
}

func (o HostTypeOutput) ToHostTypeOutput() HostTypeOutput {
	return o
}

func (o HostTypeOutput) ToHostTypeOutputWithContext(ctx context.Context) HostTypeOutput {
	return o
}

func (o HostTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HostTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HostTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HostType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// HostSpec defines the desired state of Host
func (o HostTypeOutput) Spec() HostSpecPtrOutput {
	return o.ApplyT(func(v HostType) *HostSpec { return v.Spec }).(HostSpecPtrOutput)
}

// HostStatus defines the observed state of Host
func (o HostTypeOutput) Status() HostStatusPtrOutput {
	return o.ApplyT(func(v HostType) *HostStatus { return v.Status }).(HostStatusPtrOutput)
}

type HostMetadata struct {
}

// HostMetadataInput is an input type that accepts HostMetadataArgs and HostMetadataOutput values.
// You can construct a concrete instance of `HostMetadataInput` via:
//
//          HostMetadataArgs{...}
type HostMetadataInput interface {
	pulumi.Input

	ToHostMetadataOutput() HostMetadataOutput
	ToHostMetadataOutputWithContext(context.Context) HostMetadataOutput
}

type HostMetadataArgs struct {
}

func (HostMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostMetadata)(nil)).Elem()
}

func (i HostMetadataArgs) ToHostMetadataOutput() HostMetadataOutput {
	return i.ToHostMetadataOutputWithContext(context.Background())
}

func (i HostMetadataArgs) ToHostMetadataOutputWithContext(ctx context.Context) HostMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMetadataOutput)
}

type HostMetadataOutput struct{ *pulumi.OutputState }

func (HostMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostMetadata)(nil)).Elem()
}

func (o HostMetadataOutput) ToHostMetadataOutput() HostMetadataOutput {
	return o
}

func (o HostMetadataOutput) ToHostMetadataOutputWithContext(ctx context.Context) HostMetadataOutput {
	return o
}

// HostSpec defines the desired state of Host
type HostSpec struct {
	// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
	AcmeProvider *HostSpecAcmeProvider `pulumi:"acmeProvider"`
	// A compatibility alias for "ambassador_id"; because Host used to be specified with protobuf, and jsonpb allowed either "ambassador_id" or "ambassadorId", and even though we didn't tell people about "ambassadorId" it's what the web policy console generated because of jsonpb.  So Hosts with 'ambassadorId' exist in the wild.
	AmbassadorId interface{} `pulumi:"ambassadorId"`
	// Common to all Ambassador objects (and optional).
	Ambassador_id interface{} `pulumi:"ambassador_id"`
	// Hostname by which the Ambassador can be reached.
	Hostname *string `pulumi:"hostname"`
	// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
	PreviewUrl *HostSpecPreviewUrl `pulumi:"previewUrl"`
	// Request policy definition.
	RequestPolicy *HostSpecRequestPolicy `pulumi:"requestPolicy"`
	// Selector by which we can find further configuration. Defaults to hostname=$hostname
	Selector *HostSpecSelector `pulumi:"selector"`
	// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
	Tls *HostSpecTls `pulumi:"tls"`
	// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
	//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
	TlsContext *HostSpecTlsContext `pulumi:"tlsContext"`
	// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
	//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
	TlsSecret *HostSpecTlsSecret `pulumi:"tlsSecret"`
}

// HostSpecInput is an input type that accepts HostSpecArgs and HostSpecOutput values.
// You can construct a concrete instance of `HostSpecInput` via:
//
//          HostSpecArgs{...}
type HostSpecInput interface {
	pulumi.Input

	ToHostSpecOutput() HostSpecOutput
	ToHostSpecOutputWithContext(context.Context) HostSpecOutput
}

// HostSpec defines the desired state of Host
type HostSpecArgs struct {
	// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
	AcmeProvider HostSpecAcmeProviderPtrInput `pulumi:"acmeProvider"`
	// A compatibility alias for "ambassador_id"; because Host used to be specified with protobuf, and jsonpb allowed either "ambassador_id" or "ambassadorId", and even though we didn't tell people about "ambassadorId" it's what the web policy console generated because of jsonpb.  So Hosts with 'ambassadorId' exist in the wild.
	AmbassadorId pulumi.Input `pulumi:"ambassadorId"`
	// Common to all Ambassador objects (and optional).
	Ambassador_id pulumi.Input `pulumi:"ambassador_id"`
	// Hostname by which the Ambassador can be reached.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
	PreviewUrl HostSpecPreviewUrlPtrInput `pulumi:"previewUrl"`
	// Request policy definition.
	RequestPolicy HostSpecRequestPolicyPtrInput `pulumi:"requestPolicy"`
	// Selector by which we can find further configuration. Defaults to hostname=$hostname
	Selector HostSpecSelectorPtrInput `pulumi:"selector"`
	// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
	Tls HostSpecTlsPtrInput `pulumi:"tls"`
	// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
	//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
	TlsContext HostSpecTlsContextPtrInput `pulumi:"tlsContext"`
	// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
	//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
	TlsSecret HostSpecTlsSecretPtrInput `pulumi:"tlsSecret"`
}

func (HostSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpec)(nil)).Elem()
}

func (i HostSpecArgs) ToHostSpecOutput() HostSpecOutput {
	return i.ToHostSpecOutputWithContext(context.Background())
}

func (i HostSpecArgs) ToHostSpecOutputWithContext(ctx context.Context) HostSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecOutput)
}

func (i HostSpecArgs) ToHostSpecPtrOutput() HostSpecPtrOutput {
	return i.ToHostSpecPtrOutputWithContext(context.Background())
}

func (i HostSpecArgs) ToHostSpecPtrOutputWithContext(ctx context.Context) HostSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecOutput).ToHostSpecPtrOutputWithContext(ctx)
}

// HostSpecPtrInput is an input type that accepts HostSpecArgs, HostSpecPtr and HostSpecPtrOutput values.
// You can construct a concrete instance of `HostSpecPtrInput` via:
//
//          HostSpecArgs{...}
//
//  or:
//
//          nil
type HostSpecPtrInput interface {
	pulumi.Input

	ToHostSpecPtrOutput() HostSpecPtrOutput
	ToHostSpecPtrOutputWithContext(context.Context) HostSpecPtrOutput
}

type hostSpecPtrType HostSpecArgs

func HostSpecPtr(v *HostSpecArgs) HostSpecPtrInput {
	return (*hostSpecPtrType)(v)
}

func (*hostSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpec)(nil)).Elem()
}

func (i *hostSpecPtrType) ToHostSpecPtrOutput() HostSpecPtrOutput {
	return i.ToHostSpecPtrOutputWithContext(context.Background())
}

func (i *hostSpecPtrType) ToHostSpecPtrOutputWithContext(ctx context.Context) HostSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecPtrOutput)
}

// HostSpec defines the desired state of Host
type HostSpecOutput struct{ *pulumi.OutputState }

func (HostSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpec)(nil)).Elem()
}

func (o HostSpecOutput) ToHostSpecOutput() HostSpecOutput {
	return o
}

func (o HostSpecOutput) ToHostSpecOutputWithContext(ctx context.Context) HostSpecOutput {
	return o
}

func (o HostSpecOutput) ToHostSpecPtrOutput() HostSpecPtrOutput {
	return o.ToHostSpecPtrOutputWithContext(context.Background())
}

func (o HostSpecOutput) ToHostSpecPtrOutputWithContext(ctx context.Context) HostSpecPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpec {
		return &v
	}).(HostSpecPtrOutput)
}

// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
func (o HostSpecOutput) AcmeProvider() HostSpecAcmeProviderPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecAcmeProvider { return v.AcmeProvider }).(HostSpecAcmeProviderPtrOutput)
}

// A compatibility alias for "ambassador_id"; because Host used to be specified with protobuf, and jsonpb allowed either "ambassador_id" or "ambassadorId", and even though we didn't tell people about "ambassadorId" it's what the web policy console generated because of jsonpb.  So Hosts with 'ambassadorId' exist in the wild.
func (o HostSpecOutput) AmbassadorId() pulumi.AnyOutput {
	return o.ApplyT(func(v HostSpec) interface{} { return v.AmbassadorId }).(pulumi.AnyOutput)
}

// Common to all Ambassador objects (and optional).
func (o HostSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v HostSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

// Hostname by which the Ambassador can be reached.
func (o HostSpecOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpec) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
func (o HostSpecOutput) PreviewUrl() HostSpecPreviewUrlPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecPreviewUrl { return v.PreviewUrl }).(HostSpecPreviewUrlPtrOutput)
}

// Request policy definition.
func (o HostSpecOutput) RequestPolicy() HostSpecRequestPolicyPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecRequestPolicy { return v.RequestPolicy }).(HostSpecRequestPolicyPtrOutput)
}

// Selector by which we can find further configuration. Defaults to hostname=$hostname
func (o HostSpecOutput) Selector() HostSpecSelectorPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecSelector { return v.Selector }).(HostSpecSelectorPtrOutput)
}

// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
func (o HostSpecOutput) Tls() HostSpecTlsPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecTls { return v.Tls }).(HostSpecTlsPtrOutput)
}

// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
func (o HostSpecOutput) TlsContext() HostSpecTlsContextPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecTlsContext { return v.TlsContext }).(HostSpecTlsContextPtrOutput)
}

// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
func (o HostSpecOutput) TlsSecret() HostSpecTlsSecretPtrOutput {
	return o.ApplyT(func(v HostSpec) *HostSpecTlsSecret { return v.TlsSecret }).(HostSpecTlsSecretPtrOutput)
}

type HostSpecPtrOutput struct{ *pulumi.OutputState }

func (HostSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpec)(nil)).Elem()
}

func (o HostSpecPtrOutput) ToHostSpecPtrOutput() HostSpecPtrOutput {
	return o
}

func (o HostSpecPtrOutput) ToHostSpecPtrOutputWithContext(ctx context.Context) HostSpecPtrOutput {
	return o
}

func (o HostSpecPtrOutput) Elem() HostSpecOutput {
	return o.ApplyT(func(v *HostSpec) HostSpec { return *v }).(HostSpecOutput)
}

// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
func (o HostSpecPtrOutput) AcmeProvider() HostSpecAcmeProviderPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecAcmeProvider {
		if v == nil {
			return nil
		}
		return v.AcmeProvider
	}).(HostSpecAcmeProviderPtrOutput)
}

// A compatibility alias for "ambassador_id"; because Host used to be specified with protobuf, and jsonpb allowed either "ambassador_id" or "ambassadorId", and even though we didn't tell people about "ambassadorId" it's what the web policy console generated because of jsonpb.  So Hosts with 'ambassadorId' exist in the wild.
func (o HostSpecPtrOutput) AmbassadorId() pulumi.AnyOutput {
	return o.ApplyT(func(v *HostSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.AmbassadorId
	}).(pulumi.AnyOutput)
}

// Common to all Ambassador objects (and optional).
func (o HostSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *HostSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

// Hostname by which the Ambassador can be reached.
func (o HostSpecPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpec) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
func (o HostSpecPtrOutput) PreviewUrl() HostSpecPreviewUrlPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecPreviewUrl {
		if v == nil {
			return nil
		}
		return v.PreviewUrl
	}).(HostSpecPreviewUrlPtrOutput)
}

// Request policy definition.
func (o HostSpecPtrOutput) RequestPolicy() HostSpecRequestPolicyPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecRequestPolicy {
		if v == nil {
			return nil
		}
		return v.RequestPolicy
	}).(HostSpecRequestPolicyPtrOutput)
}

// Selector by which we can find further configuration. Defaults to hostname=$hostname
func (o HostSpecPtrOutput) Selector() HostSpecSelectorPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(HostSpecSelectorPtrOutput)
}

// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
func (o HostSpecPtrOutput) Tls() HostSpecTlsPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(HostSpecTlsPtrOutput)
}

// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
func (o HostSpecPtrOutput) TlsContext() HostSpecTlsContextPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecTlsContext {
		if v == nil {
			return nil
		}
		return v.TlsContext
	}).(HostSpecTlsContextPtrOutput)
}

// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
func (o HostSpecPtrOutput) TlsSecret() HostSpecTlsSecretPtrOutput {
	return o.ApplyT(func(v *HostSpec) *HostSpecTlsSecret {
		if v == nil {
			return nil
		}
		return v.TlsSecret
	}).(HostSpecTlsSecretPtrOutput)
}

// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
type HostSpecAcmeProvider struct {
	// Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none" (case-insensitive), do not try to do ACME for this Host.
	Authority *string `pulumi:"authority"`
	Email     *string `pulumi:"email"`
	// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
	//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
	PrivateKeySecret *HostSpecAcmeProviderPrivateKeySecret `pulumi:"privateKeySecret"`
	// This is normally set automatically
	Registration *string `pulumi:"registration"`
}

// HostSpecAcmeProviderInput is an input type that accepts HostSpecAcmeProviderArgs and HostSpecAcmeProviderOutput values.
// You can construct a concrete instance of `HostSpecAcmeProviderInput` via:
//
//          HostSpecAcmeProviderArgs{...}
type HostSpecAcmeProviderInput interface {
	pulumi.Input

	ToHostSpecAcmeProviderOutput() HostSpecAcmeProviderOutput
	ToHostSpecAcmeProviderOutputWithContext(context.Context) HostSpecAcmeProviderOutput
}

// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
type HostSpecAcmeProviderArgs struct {
	// Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none" (case-insensitive), do not try to do ACME for this Host.
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	Email     pulumi.StringPtrInput `pulumi:"email"`
	// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
	//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
	PrivateKeySecret HostSpecAcmeProviderPrivateKeySecretPtrInput `pulumi:"privateKeySecret"`
	// This is normally set automatically
	Registration pulumi.StringPtrInput `pulumi:"registration"`
}

func (HostSpecAcmeProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecAcmeProvider)(nil)).Elem()
}

func (i HostSpecAcmeProviderArgs) ToHostSpecAcmeProviderOutput() HostSpecAcmeProviderOutput {
	return i.ToHostSpecAcmeProviderOutputWithContext(context.Background())
}

func (i HostSpecAcmeProviderArgs) ToHostSpecAcmeProviderOutputWithContext(ctx context.Context) HostSpecAcmeProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecAcmeProviderOutput)
}

func (i HostSpecAcmeProviderArgs) ToHostSpecAcmeProviderPtrOutput() HostSpecAcmeProviderPtrOutput {
	return i.ToHostSpecAcmeProviderPtrOutputWithContext(context.Background())
}

func (i HostSpecAcmeProviderArgs) ToHostSpecAcmeProviderPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecAcmeProviderOutput).ToHostSpecAcmeProviderPtrOutputWithContext(ctx)
}

// HostSpecAcmeProviderPtrInput is an input type that accepts HostSpecAcmeProviderArgs, HostSpecAcmeProviderPtr and HostSpecAcmeProviderPtrOutput values.
// You can construct a concrete instance of `HostSpecAcmeProviderPtrInput` via:
//
//          HostSpecAcmeProviderArgs{...}
//
//  or:
//
//          nil
type HostSpecAcmeProviderPtrInput interface {
	pulumi.Input

	ToHostSpecAcmeProviderPtrOutput() HostSpecAcmeProviderPtrOutput
	ToHostSpecAcmeProviderPtrOutputWithContext(context.Context) HostSpecAcmeProviderPtrOutput
}

type hostSpecAcmeProviderPtrType HostSpecAcmeProviderArgs

func HostSpecAcmeProviderPtr(v *HostSpecAcmeProviderArgs) HostSpecAcmeProviderPtrInput {
	return (*hostSpecAcmeProviderPtrType)(v)
}

func (*hostSpecAcmeProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecAcmeProvider)(nil)).Elem()
}

func (i *hostSpecAcmeProviderPtrType) ToHostSpecAcmeProviderPtrOutput() HostSpecAcmeProviderPtrOutput {
	return i.ToHostSpecAcmeProviderPtrOutputWithContext(context.Background())
}

func (i *hostSpecAcmeProviderPtrType) ToHostSpecAcmeProviderPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecAcmeProviderPtrOutput)
}

// Specifies whether/who to talk ACME with to automatically manage the $tlsSecret.
type HostSpecAcmeProviderOutput struct{ *pulumi.OutputState }

func (HostSpecAcmeProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecAcmeProvider)(nil)).Elem()
}

func (o HostSpecAcmeProviderOutput) ToHostSpecAcmeProviderOutput() HostSpecAcmeProviderOutput {
	return o
}

func (o HostSpecAcmeProviderOutput) ToHostSpecAcmeProviderOutputWithContext(ctx context.Context) HostSpecAcmeProviderOutput {
	return o
}

func (o HostSpecAcmeProviderOutput) ToHostSpecAcmeProviderPtrOutput() HostSpecAcmeProviderPtrOutput {
	return o.ToHostSpecAcmeProviderPtrOutputWithContext(context.Background())
}

func (o HostSpecAcmeProviderOutput) ToHostSpecAcmeProviderPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProvider) *HostSpecAcmeProvider {
		return &v
	}).(HostSpecAcmeProviderPtrOutput)
}

// Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none" (case-insensitive), do not try to do ACME for this Host.
func (o HostSpecAcmeProviderOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProvider) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

func (o HostSpecAcmeProviderOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProvider) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
func (o HostSpecAcmeProviderOutput) PrivateKeySecret() HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProvider) *HostSpecAcmeProviderPrivateKeySecret { return v.PrivateKeySecret }).(HostSpecAcmeProviderPrivateKeySecretPtrOutput)
}

// This is normally set automatically
func (o HostSpecAcmeProviderOutput) Registration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProvider) *string { return v.Registration }).(pulumi.StringPtrOutput)
}

type HostSpecAcmeProviderPtrOutput struct{ *pulumi.OutputState }

func (HostSpecAcmeProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecAcmeProvider)(nil)).Elem()
}

func (o HostSpecAcmeProviderPtrOutput) ToHostSpecAcmeProviderPtrOutput() HostSpecAcmeProviderPtrOutput {
	return o
}

func (o HostSpecAcmeProviderPtrOutput) ToHostSpecAcmeProviderPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPtrOutput {
	return o
}

func (o HostSpecAcmeProviderPtrOutput) Elem() HostSpecAcmeProviderOutput {
	return o.ApplyT(func(v *HostSpecAcmeProvider) HostSpecAcmeProvider { return *v }).(HostSpecAcmeProviderOutput)
}

// Specifies who to talk ACME with to get certs. Defaults to Let's Encrypt; if "none" (case-insensitive), do not try to do ACME for this Host.
func (o HostSpecAcmeProviderPtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecAcmeProvider) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecAcmeProviderPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecAcmeProvider) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
func (o HostSpecAcmeProviderPtrOutput) PrivateKeySecret() HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return o.ApplyT(func(v *HostSpecAcmeProvider) *HostSpecAcmeProviderPrivateKeySecret {
		if v == nil {
			return nil
		}
		return v.PrivateKeySecret
	}).(HostSpecAcmeProviderPrivateKeySecretPtrOutput)
}

// This is normally set automatically
func (o HostSpecAcmeProviderPtrOutput) Registration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecAcmeProvider) *string {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(pulumi.StringPtrOutput)
}

// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecAcmeProviderPrivateKeySecret struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// HostSpecAcmeProviderPrivateKeySecretInput is an input type that accepts HostSpecAcmeProviderPrivateKeySecretArgs and HostSpecAcmeProviderPrivateKeySecretOutput values.
// You can construct a concrete instance of `HostSpecAcmeProviderPrivateKeySecretInput` via:
//
//          HostSpecAcmeProviderPrivateKeySecretArgs{...}
type HostSpecAcmeProviderPrivateKeySecretInput interface {
	pulumi.Input

	ToHostSpecAcmeProviderPrivateKeySecretOutput() HostSpecAcmeProviderPrivateKeySecretOutput
	ToHostSpecAcmeProviderPrivateKeySecretOutputWithContext(context.Context) HostSpecAcmeProviderPrivateKeySecretOutput
}

// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecAcmeProviderPrivateKeySecretArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HostSpecAcmeProviderPrivateKeySecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecAcmeProviderPrivateKeySecret)(nil)).Elem()
}

func (i HostSpecAcmeProviderPrivateKeySecretArgs) ToHostSpecAcmeProviderPrivateKeySecretOutput() HostSpecAcmeProviderPrivateKeySecretOutput {
	return i.ToHostSpecAcmeProviderPrivateKeySecretOutputWithContext(context.Background())
}

func (i HostSpecAcmeProviderPrivateKeySecretArgs) ToHostSpecAcmeProviderPrivateKeySecretOutputWithContext(ctx context.Context) HostSpecAcmeProviderPrivateKeySecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecAcmeProviderPrivateKeySecretOutput)
}

func (i HostSpecAcmeProviderPrivateKeySecretArgs) ToHostSpecAcmeProviderPrivateKeySecretPtrOutput() HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return i.ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(context.Background())
}

func (i HostSpecAcmeProviderPrivateKeySecretArgs) ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecAcmeProviderPrivateKeySecretOutput).ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(ctx)
}

// HostSpecAcmeProviderPrivateKeySecretPtrInput is an input type that accepts HostSpecAcmeProviderPrivateKeySecretArgs, HostSpecAcmeProviderPrivateKeySecretPtr and HostSpecAcmeProviderPrivateKeySecretPtrOutput values.
// You can construct a concrete instance of `HostSpecAcmeProviderPrivateKeySecretPtrInput` via:
//
//          HostSpecAcmeProviderPrivateKeySecretArgs{...}
//
//  or:
//
//          nil
type HostSpecAcmeProviderPrivateKeySecretPtrInput interface {
	pulumi.Input

	ToHostSpecAcmeProviderPrivateKeySecretPtrOutput() HostSpecAcmeProviderPrivateKeySecretPtrOutput
	ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(context.Context) HostSpecAcmeProviderPrivateKeySecretPtrOutput
}

type hostSpecAcmeProviderPrivateKeySecretPtrType HostSpecAcmeProviderPrivateKeySecretArgs

func HostSpecAcmeProviderPrivateKeySecretPtr(v *HostSpecAcmeProviderPrivateKeySecretArgs) HostSpecAcmeProviderPrivateKeySecretPtrInput {
	return (*hostSpecAcmeProviderPrivateKeySecretPtrType)(v)
}

func (*hostSpecAcmeProviderPrivateKeySecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecAcmeProviderPrivateKeySecret)(nil)).Elem()
}

func (i *hostSpecAcmeProviderPrivateKeySecretPtrType) ToHostSpecAcmeProviderPrivateKeySecretPtrOutput() HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return i.ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(context.Background())
}

func (i *hostSpecAcmeProviderPrivateKeySecretPtrType) ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecAcmeProviderPrivateKeySecretPtrOutput)
}

// Specifies the Kubernetes Secret to use to store the private key of the ACME account (essentially, where to store the auto-generated password for the auto-created ACME account).  You should not normally need to set this--the default value is based on a combination of the ACME authority being registered wit and the email address associated with the account.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecAcmeProviderPrivateKeySecretOutput struct{ *pulumi.OutputState }

func (HostSpecAcmeProviderPrivateKeySecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecAcmeProviderPrivateKeySecret)(nil)).Elem()
}

func (o HostSpecAcmeProviderPrivateKeySecretOutput) ToHostSpecAcmeProviderPrivateKeySecretOutput() HostSpecAcmeProviderPrivateKeySecretOutput {
	return o
}

func (o HostSpecAcmeProviderPrivateKeySecretOutput) ToHostSpecAcmeProviderPrivateKeySecretOutputWithContext(ctx context.Context) HostSpecAcmeProviderPrivateKeySecretOutput {
	return o
}

func (o HostSpecAcmeProviderPrivateKeySecretOutput) ToHostSpecAcmeProviderPrivateKeySecretPtrOutput() HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return o.ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(context.Background())
}

func (o HostSpecAcmeProviderPrivateKeySecretOutput) ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProviderPrivateKeySecret) *HostSpecAcmeProviderPrivateKeySecret {
		return &v
	}).(HostSpecAcmeProviderPrivateKeySecretPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o HostSpecAcmeProviderPrivateKeySecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecAcmeProviderPrivateKeySecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HostSpecAcmeProviderPrivateKeySecretPtrOutput struct{ *pulumi.OutputState }

func (HostSpecAcmeProviderPrivateKeySecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecAcmeProviderPrivateKeySecret)(nil)).Elem()
}

func (o HostSpecAcmeProviderPrivateKeySecretPtrOutput) ToHostSpecAcmeProviderPrivateKeySecretPtrOutput() HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return o
}

func (o HostSpecAcmeProviderPrivateKeySecretPtrOutput) ToHostSpecAcmeProviderPrivateKeySecretPtrOutputWithContext(ctx context.Context) HostSpecAcmeProviderPrivateKeySecretPtrOutput {
	return o
}

func (o HostSpecAcmeProviderPrivateKeySecretPtrOutput) Elem() HostSpecAcmeProviderPrivateKeySecretOutput {
	return o.ApplyT(func(v *HostSpecAcmeProviderPrivateKeySecret) HostSpecAcmeProviderPrivateKeySecret { return *v }).(HostSpecAcmeProviderPrivateKeySecretOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o HostSpecAcmeProviderPrivateKeySecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecAcmeProviderPrivateKeySecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
type HostSpecPreviewUrl struct {
	// Is the Preview URL feature enabled?
	Enabled *bool `pulumi:"enabled"`
	// What type of Preview URL is allowed?
	Type *string `pulumi:"type"`
}

// HostSpecPreviewUrlInput is an input type that accepts HostSpecPreviewUrlArgs and HostSpecPreviewUrlOutput values.
// You can construct a concrete instance of `HostSpecPreviewUrlInput` via:
//
//          HostSpecPreviewUrlArgs{...}
type HostSpecPreviewUrlInput interface {
	pulumi.Input

	ToHostSpecPreviewUrlOutput() HostSpecPreviewUrlOutput
	ToHostSpecPreviewUrlOutputWithContext(context.Context) HostSpecPreviewUrlOutput
}

// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
type HostSpecPreviewUrlArgs struct {
	// Is the Preview URL feature enabled?
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// What type of Preview URL is allowed?
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HostSpecPreviewUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecPreviewUrl)(nil)).Elem()
}

func (i HostSpecPreviewUrlArgs) ToHostSpecPreviewUrlOutput() HostSpecPreviewUrlOutput {
	return i.ToHostSpecPreviewUrlOutputWithContext(context.Background())
}

func (i HostSpecPreviewUrlArgs) ToHostSpecPreviewUrlOutputWithContext(ctx context.Context) HostSpecPreviewUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecPreviewUrlOutput)
}

func (i HostSpecPreviewUrlArgs) ToHostSpecPreviewUrlPtrOutput() HostSpecPreviewUrlPtrOutput {
	return i.ToHostSpecPreviewUrlPtrOutputWithContext(context.Background())
}

func (i HostSpecPreviewUrlArgs) ToHostSpecPreviewUrlPtrOutputWithContext(ctx context.Context) HostSpecPreviewUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecPreviewUrlOutput).ToHostSpecPreviewUrlPtrOutputWithContext(ctx)
}

// HostSpecPreviewUrlPtrInput is an input type that accepts HostSpecPreviewUrlArgs, HostSpecPreviewUrlPtr and HostSpecPreviewUrlPtrOutput values.
// You can construct a concrete instance of `HostSpecPreviewUrlPtrInput` via:
//
//          HostSpecPreviewUrlArgs{...}
//
//  or:
//
//          nil
type HostSpecPreviewUrlPtrInput interface {
	pulumi.Input

	ToHostSpecPreviewUrlPtrOutput() HostSpecPreviewUrlPtrOutput
	ToHostSpecPreviewUrlPtrOutputWithContext(context.Context) HostSpecPreviewUrlPtrOutput
}

type hostSpecPreviewUrlPtrType HostSpecPreviewUrlArgs

func HostSpecPreviewUrlPtr(v *HostSpecPreviewUrlArgs) HostSpecPreviewUrlPtrInput {
	return (*hostSpecPreviewUrlPtrType)(v)
}

func (*hostSpecPreviewUrlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecPreviewUrl)(nil)).Elem()
}

func (i *hostSpecPreviewUrlPtrType) ToHostSpecPreviewUrlPtrOutput() HostSpecPreviewUrlPtrOutput {
	return i.ToHostSpecPreviewUrlPtrOutputWithContext(context.Background())
}

func (i *hostSpecPreviewUrlPtrType) ToHostSpecPreviewUrlPtrOutputWithContext(ctx context.Context) HostSpecPreviewUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecPreviewUrlPtrOutput)
}

// Configuration for the Preview URL feature of Service Preview. Defaults to preview URLs not enabled.
type HostSpecPreviewUrlOutput struct{ *pulumi.OutputState }

func (HostSpecPreviewUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecPreviewUrl)(nil)).Elem()
}

func (o HostSpecPreviewUrlOutput) ToHostSpecPreviewUrlOutput() HostSpecPreviewUrlOutput {
	return o
}

func (o HostSpecPreviewUrlOutput) ToHostSpecPreviewUrlOutputWithContext(ctx context.Context) HostSpecPreviewUrlOutput {
	return o
}

func (o HostSpecPreviewUrlOutput) ToHostSpecPreviewUrlPtrOutput() HostSpecPreviewUrlPtrOutput {
	return o.ToHostSpecPreviewUrlPtrOutputWithContext(context.Background())
}

func (o HostSpecPreviewUrlOutput) ToHostSpecPreviewUrlPtrOutputWithContext(ctx context.Context) HostSpecPreviewUrlPtrOutput {
	return o.ApplyT(func(v HostSpecPreviewUrl) *HostSpecPreviewUrl {
		return &v
	}).(HostSpecPreviewUrlPtrOutput)
}

// Is the Preview URL feature enabled?
func (o HostSpecPreviewUrlOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostSpecPreviewUrl) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// What type of Preview URL is allowed?
func (o HostSpecPreviewUrlOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecPreviewUrl) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HostSpecPreviewUrlPtrOutput struct{ *pulumi.OutputState }

func (HostSpecPreviewUrlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecPreviewUrl)(nil)).Elem()
}

func (o HostSpecPreviewUrlPtrOutput) ToHostSpecPreviewUrlPtrOutput() HostSpecPreviewUrlPtrOutput {
	return o
}

func (o HostSpecPreviewUrlPtrOutput) ToHostSpecPreviewUrlPtrOutputWithContext(ctx context.Context) HostSpecPreviewUrlPtrOutput {
	return o
}

func (o HostSpecPreviewUrlPtrOutput) Elem() HostSpecPreviewUrlOutput {
	return o.ApplyT(func(v *HostSpecPreviewUrl) HostSpecPreviewUrl { return *v }).(HostSpecPreviewUrlOutput)
}

// Is the Preview URL feature enabled?
func (o HostSpecPreviewUrlPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostSpecPreviewUrl) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// What type of Preview URL is allowed?
func (o HostSpecPreviewUrlPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecPreviewUrl) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Request policy definition.
type HostSpecRequestPolicy struct {
	Insecure *HostSpecRequestPolicyInsecure `pulumi:"insecure"`
}

// HostSpecRequestPolicyInput is an input type that accepts HostSpecRequestPolicyArgs and HostSpecRequestPolicyOutput values.
// You can construct a concrete instance of `HostSpecRequestPolicyInput` via:
//
//          HostSpecRequestPolicyArgs{...}
type HostSpecRequestPolicyInput interface {
	pulumi.Input

	ToHostSpecRequestPolicyOutput() HostSpecRequestPolicyOutput
	ToHostSpecRequestPolicyOutputWithContext(context.Context) HostSpecRequestPolicyOutput
}

// Request policy definition.
type HostSpecRequestPolicyArgs struct {
	Insecure HostSpecRequestPolicyInsecurePtrInput `pulumi:"insecure"`
}

func (HostSpecRequestPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecRequestPolicy)(nil)).Elem()
}

func (i HostSpecRequestPolicyArgs) ToHostSpecRequestPolicyOutput() HostSpecRequestPolicyOutput {
	return i.ToHostSpecRequestPolicyOutputWithContext(context.Background())
}

func (i HostSpecRequestPolicyArgs) ToHostSpecRequestPolicyOutputWithContext(ctx context.Context) HostSpecRequestPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecRequestPolicyOutput)
}

func (i HostSpecRequestPolicyArgs) ToHostSpecRequestPolicyPtrOutput() HostSpecRequestPolicyPtrOutput {
	return i.ToHostSpecRequestPolicyPtrOutputWithContext(context.Background())
}

func (i HostSpecRequestPolicyArgs) ToHostSpecRequestPolicyPtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecRequestPolicyOutput).ToHostSpecRequestPolicyPtrOutputWithContext(ctx)
}

// HostSpecRequestPolicyPtrInput is an input type that accepts HostSpecRequestPolicyArgs, HostSpecRequestPolicyPtr and HostSpecRequestPolicyPtrOutput values.
// You can construct a concrete instance of `HostSpecRequestPolicyPtrInput` via:
//
//          HostSpecRequestPolicyArgs{...}
//
//  or:
//
//          nil
type HostSpecRequestPolicyPtrInput interface {
	pulumi.Input

	ToHostSpecRequestPolicyPtrOutput() HostSpecRequestPolicyPtrOutput
	ToHostSpecRequestPolicyPtrOutputWithContext(context.Context) HostSpecRequestPolicyPtrOutput
}

type hostSpecRequestPolicyPtrType HostSpecRequestPolicyArgs

func HostSpecRequestPolicyPtr(v *HostSpecRequestPolicyArgs) HostSpecRequestPolicyPtrInput {
	return (*hostSpecRequestPolicyPtrType)(v)
}

func (*hostSpecRequestPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecRequestPolicy)(nil)).Elem()
}

func (i *hostSpecRequestPolicyPtrType) ToHostSpecRequestPolicyPtrOutput() HostSpecRequestPolicyPtrOutput {
	return i.ToHostSpecRequestPolicyPtrOutputWithContext(context.Background())
}

func (i *hostSpecRequestPolicyPtrType) ToHostSpecRequestPolicyPtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecRequestPolicyPtrOutput)
}

// Request policy definition.
type HostSpecRequestPolicyOutput struct{ *pulumi.OutputState }

func (HostSpecRequestPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecRequestPolicy)(nil)).Elem()
}

func (o HostSpecRequestPolicyOutput) ToHostSpecRequestPolicyOutput() HostSpecRequestPolicyOutput {
	return o
}

func (o HostSpecRequestPolicyOutput) ToHostSpecRequestPolicyOutputWithContext(ctx context.Context) HostSpecRequestPolicyOutput {
	return o
}

func (o HostSpecRequestPolicyOutput) ToHostSpecRequestPolicyPtrOutput() HostSpecRequestPolicyPtrOutput {
	return o.ToHostSpecRequestPolicyPtrOutputWithContext(context.Background())
}

func (o HostSpecRequestPolicyOutput) ToHostSpecRequestPolicyPtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyPtrOutput {
	return o.ApplyT(func(v HostSpecRequestPolicy) *HostSpecRequestPolicy {
		return &v
	}).(HostSpecRequestPolicyPtrOutput)
}
func (o HostSpecRequestPolicyOutput) Insecure() HostSpecRequestPolicyInsecurePtrOutput {
	return o.ApplyT(func(v HostSpecRequestPolicy) *HostSpecRequestPolicyInsecure { return v.Insecure }).(HostSpecRequestPolicyInsecurePtrOutput)
}

type HostSpecRequestPolicyPtrOutput struct{ *pulumi.OutputState }

func (HostSpecRequestPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecRequestPolicy)(nil)).Elem()
}

func (o HostSpecRequestPolicyPtrOutput) ToHostSpecRequestPolicyPtrOutput() HostSpecRequestPolicyPtrOutput {
	return o
}

func (o HostSpecRequestPolicyPtrOutput) ToHostSpecRequestPolicyPtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyPtrOutput {
	return o
}

func (o HostSpecRequestPolicyPtrOutput) Elem() HostSpecRequestPolicyOutput {
	return o.ApplyT(func(v *HostSpecRequestPolicy) HostSpecRequestPolicy { return *v }).(HostSpecRequestPolicyOutput)
}

func (o HostSpecRequestPolicyPtrOutput) Insecure() HostSpecRequestPolicyInsecurePtrOutput {
	return o.ApplyT(func(v *HostSpecRequestPolicy) *HostSpecRequestPolicyInsecure {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(HostSpecRequestPolicyInsecurePtrOutput)
}

type HostSpecRequestPolicyInsecure struct {
	Action         *string `pulumi:"action"`
	AdditionalPort *int    `pulumi:"additionalPort"`
}

// HostSpecRequestPolicyInsecureInput is an input type that accepts HostSpecRequestPolicyInsecureArgs and HostSpecRequestPolicyInsecureOutput values.
// You can construct a concrete instance of `HostSpecRequestPolicyInsecureInput` via:
//
//          HostSpecRequestPolicyInsecureArgs{...}
type HostSpecRequestPolicyInsecureInput interface {
	pulumi.Input

	ToHostSpecRequestPolicyInsecureOutput() HostSpecRequestPolicyInsecureOutput
	ToHostSpecRequestPolicyInsecureOutputWithContext(context.Context) HostSpecRequestPolicyInsecureOutput
}

type HostSpecRequestPolicyInsecureArgs struct {
	Action         pulumi.StringPtrInput `pulumi:"action"`
	AdditionalPort pulumi.IntPtrInput    `pulumi:"additionalPort"`
}

func (HostSpecRequestPolicyInsecureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecRequestPolicyInsecure)(nil)).Elem()
}

func (i HostSpecRequestPolicyInsecureArgs) ToHostSpecRequestPolicyInsecureOutput() HostSpecRequestPolicyInsecureOutput {
	return i.ToHostSpecRequestPolicyInsecureOutputWithContext(context.Background())
}

func (i HostSpecRequestPolicyInsecureArgs) ToHostSpecRequestPolicyInsecureOutputWithContext(ctx context.Context) HostSpecRequestPolicyInsecureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecRequestPolicyInsecureOutput)
}

func (i HostSpecRequestPolicyInsecureArgs) ToHostSpecRequestPolicyInsecurePtrOutput() HostSpecRequestPolicyInsecurePtrOutput {
	return i.ToHostSpecRequestPolicyInsecurePtrOutputWithContext(context.Background())
}

func (i HostSpecRequestPolicyInsecureArgs) ToHostSpecRequestPolicyInsecurePtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyInsecurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecRequestPolicyInsecureOutput).ToHostSpecRequestPolicyInsecurePtrOutputWithContext(ctx)
}

// HostSpecRequestPolicyInsecurePtrInput is an input type that accepts HostSpecRequestPolicyInsecureArgs, HostSpecRequestPolicyInsecurePtr and HostSpecRequestPolicyInsecurePtrOutput values.
// You can construct a concrete instance of `HostSpecRequestPolicyInsecurePtrInput` via:
//
//          HostSpecRequestPolicyInsecureArgs{...}
//
//  or:
//
//          nil
type HostSpecRequestPolicyInsecurePtrInput interface {
	pulumi.Input

	ToHostSpecRequestPolicyInsecurePtrOutput() HostSpecRequestPolicyInsecurePtrOutput
	ToHostSpecRequestPolicyInsecurePtrOutputWithContext(context.Context) HostSpecRequestPolicyInsecurePtrOutput
}

type hostSpecRequestPolicyInsecurePtrType HostSpecRequestPolicyInsecureArgs

func HostSpecRequestPolicyInsecurePtr(v *HostSpecRequestPolicyInsecureArgs) HostSpecRequestPolicyInsecurePtrInput {
	return (*hostSpecRequestPolicyInsecurePtrType)(v)
}

func (*hostSpecRequestPolicyInsecurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecRequestPolicyInsecure)(nil)).Elem()
}

func (i *hostSpecRequestPolicyInsecurePtrType) ToHostSpecRequestPolicyInsecurePtrOutput() HostSpecRequestPolicyInsecurePtrOutput {
	return i.ToHostSpecRequestPolicyInsecurePtrOutputWithContext(context.Background())
}

func (i *hostSpecRequestPolicyInsecurePtrType) ToHostSpecRequestPolicyInsecurePtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyInsecurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecRequestPolicyInsecurePtrOutput)
}

type HostSpecRequestPolicyInsecureOutput struct{ *pulumi.OutputState }

func (HostSpecRequestPolicyInsecureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecRequestPolicyInsecure)(nil)).Elem()
}

func (o HostSpecRequestPolicyInsecureOutput) ToHostSpecRequestPolicyInsecureOutput() HostSpecRequestPolicyInsecureOutput {
	return o
}

func (o HostSpecRequestPolicyInsecureOutput) ToHostSpecRequestPolicyInsecureOutputWithContext(ctx context.Context) HostSpecRequestPolicyInsecureOutput {
	return o
}

func (o HostSpecRequestPolicyInsecureOutput) ToHostSpecRequestPolicyInsecurePtrOutput() HostSpecRequestPolicyInsecurePtrOutput {
	return o.ToHostSpecRequestPolicyInsecurePtrOutputWithContext(context.Background())
}

func (o HostSpecRequestPolicyInsecureOutput) ToHostSpecRequestPolicyInsecurePtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyInsecurePtrOutput {
	return o.ApplyT(func(v HostSpecRequestPolicyInsecure) *HostSpecRequestPolicyInsecure {
		return &v
	}).(HostSpecRequestPolicyInsecurePtrOutput)
}
func (o HostSpecRequestPolicyInsecureOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecRequestPolicyInsecure) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o HostSpecRequestPolicyInsecureOutput) AdditionalPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HostSpecRequestPolicyInsecure) *int { return v.AdditionalPort }).(pulumi.IntPtrOutput)
}

type HostSpecRequestPolicyInsecurePtrOutput struct{ *pulumi.OutputState }

func (HostSpecRequestPolicyInsecurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecRequestPolicyInsecure)(nil)).Elem()
}

func (o HostSpecRequestPolicyInsecurePtrOutput) ToHostSpecRequestPolicyInsecurePtrOutput() HostSpecRequestPolicyInsecurePtrOutput {
	return o
}

func (o HostSpecRequestPolicyInsecurePtrOutput) ToHostSpecRequestPolicyInsecurePtrOutputWithContext(ctx context.Context) HostSpecRequestPolicyInsecurePtrOutput {
	return o
}

func (o HostSpecRequestPolicyInsecurePtrOutput) Elem() HostSpecRequestPolicyInsecureOutput {
	return o.ApplyT(func(v *HostSpecRequestPolicyInsecure) HostSpecRequestPolicyInsecure { return *v }).(HostSpecRequestPolicyInsecureOutput)
}

func (o HostSpecRequestPolicyInsecurePtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecRequestPolicyInsecure) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecRequestPolicyInsecurePtrOutput) AdditionalPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostSpecRequestPolicyInsecure) *int {
		if v == nil {
			return nil
		}
		return v.AdditionalPort
	}).(pulumi.IntPtrOutput)
}

// Selector by which we can find further configuration. Defaults to hostname=$hostname
type HostSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []HostSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HostSpecSelectorInput is an input type that accepts HostSpecSelectorArgs and HostSpecSelectorOutput values.
// You can construct a concrete instance of `HostSpecSelectorInput` via:
//
//          HostSpecSelectorArgs{...}
type HostSpecSelectorInput interface {
	pulumi.Input

	ToHostSpecSelectorOutput() HostSpecSelectorOutput
	ToHostSpecSelectorOutputWithContext(context.Context) HostSpecSelectorOutput
}

// Selector by which we can find further configuration. Defaults to hostname=$hostname
type HostSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions HostSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HostSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecSelector)(nil)).Elem()
}

func (i HostSpecSelectorArgs) ToHostSpecSelectorOutput() HostSpecSelectorOutput {
	return i.ToHostSpecSelectorOutputWithContext(context.Background())
}

func (i HostSpecSelectorArgs) ToHostSpecSelectorOutputWithContext(ctx context.Context) HostSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecSelectorOutput)
}

func (i HostSpecSelectorArgs) ToHostSpecSelectorPtrOutput() HostSpecSelectorPtrOutput {
	return i.ToHostSpecSelectorPtrOutputWithContext(context.Background())
}

func (i HostSpecSelectorArgs) ToHostSpecSelectorPtrOutputWithContext(ctx context.Context) HostSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecSelectorOutput).ToHostSpecSelectorPtrOutputWithContext(ctx)
}

// HostSpecSelectorPtrInput is an input type that accepts HostSpecSelectorArgs, HostSpecSelectorPtr and HostSpecSelectorPtrOutput values.
// You can construct a concrete instance of `HostSpecSelectorPtrInput` via:
//
//          HostSpecSelectorArgs{...}
//
//  or:
//
//          nil
type HostSpecSelectorPtrInput interface {
	pulumi.Input

	ToHostSpecSelectorPtrOutput() HostSpecSelectorPtrOutput
	ToHostSpecSelectorPtrOutputWithContext(context.Context) HostSpecSelectorPtrOutput
}

type hostSpecSelectorPtrType HostSpecSelectorArgs

func HostSpecSelectorPtr(v *HostSpecSelectorArgs) HostSpecSelectorPtrInput {
	return (*hostSpecSelectorPtrType)(v)
}

func (*hostSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecSelector)(nil)).Elem()
}

func (i *hostSpecSelectorPtrType) ToHostSpecSelectorPtrOutput() HostSpecSelectorPtrOutput {
	return i.ToHostSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *hostSpecSelectorPtrType) ToHostSpecSelectorPtrOutputWithContext(ctx context.Context) HostSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecSelectorPtrOutput)
}

// Selector by which we can find further configuration. Defaults to hostname=$hostname
type HostSpecSelectorOutput struct{ *pulumi.OutputState }

func (HostSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecSelector)(nil)).Elem()
}

func (o HostSpecSelectorOutput) ToHostSpecSelectorOutput() HostSpecSelectorOutput {
	return o
}

func (o HostSpecSelectorOutput) ToHostSpecSelectorOutputWithContext(ctx context.Context) HostSpecSelectorOutput {
	return o
}

func (o HostSpecSelectorOutput) ToHostSpecSelectorPtrOutput() HostSpecSelectorPtrOutput {
	return o.ToHostSpecSelectorPtrOutputWithContext(context.Background())
}

func (o HostSpecSelectorOutput) ToHostSpecSelectorPtrOutputWithContext(ctx context.Context) HostSpecSelectorPtrOutput {
	return o.ApplyT(func(v HostSpecSelector) *HostSpecSelector {
		return &v
	}).(HostSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o HostSpecSelectorOutput) MatchExpressions() HostSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v HostSpecSelector) []HostSpecSelectorMatchExpressions { return v.MatchExpressions }).(HostSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HostSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HostSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HostSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (HostSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecSelector)(nil)).Elem()
}

func (o HostSpecSelectorPtrOutput) ToHostSpecSelectorPtrOutput() HostSpecSelectorPtrOutput {
	return o
}

func (o HostSpecSelectorPtrOutput) ToHostSpecSelectorPtrOutputWithContext(ctx context.Context) HostSpecSelectorPtrOutput {
	return o
}

func (o HostSpecSelectorPtrOutput) Elem() HostSpecSelectorOutput {
	return o.ApplyT(func(v *HostSpecSelector) HostSpecSelector { return *v }).(HostSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o HostSpecSelectorPtrOutput) MatchExpressions() HostSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *HostSpecSelector) []HostSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(HostSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HostSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HostSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type HostSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// HostSpecSelectorMatchExpressionsInput is an input type that accepts HostSpecSelectorMatchExpressionsArgs and HostSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `HostSpecSelectorMatchExpressionsInput` via:
//
//          HostSpecSelectorMatchExpressionsArgs{...}
type HostSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToHostSpecSelectorMatchExpressionsOutput() HostSpecSelectorMatchExpressionsOutput
	ToHostSpecSelectorMatchExpressionsOutputWithContext(context.Context) HostSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type HostSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (HostSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i HostSpecSelectorMatchExpressionsArgs) ToHostSpecSelectorMatchExpressionsOutput() HostSpecSelectorMatchExpressionsOutput {
	return i.ToHostSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i HostSpecSelectorMatchExpressionsArgs) ToHostSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) HostSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecSelectorMatchExpressionsOutput)
}

// HostSpecSelectorMatchExpressionsArrayInput is an input type that accepts HostSpecSelectorMatchExpressionsArray and HostSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `HostSpecSelectorMatchExpressionsArrayInput` via:
//
//          HostSpecSelectorMatchExpressionsArray{ HostSpecSelectorMatchExpressionsArgs{...} }
type HostSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToHostSpecSelectorMatchExpressionsArrayOutput() HostSpecSelectorMatchExpressionsArrayOutput
	ToHostSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) HostSpecSelectorMatchExpressionsArrayOutput
}

type HostSpecSelectorMatchExpressionsArray []HostSpecSelectorMatchExpressionsInput

func (HostSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i HostSpecSelectorMatchExpressionsArray) ToHostSpecSelectorMatchExpressionsArrayOutput() HostSpecSelectorMatchExpressionsArrayOutput {
	return i.ToHostSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i HostSpecSelectorMatchExpressionsArray) ToHostSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) HostSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type HostSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (HostSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o HostSpecSelectorMatchExpressionsOutput) ToHostSpecSelectorMatchExpressionsOutput() HostSpecSelectorMatchExpressionsOutput {
	return o
}

func (o HostSpecSelectorMatchExpressionsOutput) ToHostSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) HostSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o HostSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v HostSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o HostSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v HostSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o HostSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type HostSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (HostSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o HostSpecSelectorMatchExpressionsArrayOutput) ToHostSpecSelectorMatchExpressionsArrayOutput() HostSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o HostSpecSelectorMatchExpressionsArrayOutput) ToHostSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) HostSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o HostSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) HostSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostSpecSelectorMatchExpressions {
		return vs[0].([]HostSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(HostSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type HostSpecSelectorMatchLabels struct {
}

// HostSpecSelectorMatchLabelsInput is an input type that accepts HostSpecSelectorMatchLabelsArgs and HostSpecSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `HostSpecSelectorMatchLabelsInput` via:
//
//          HostSpecSelectorMatchLabelsArgs{...}
type HostSpecSelectorMatchLabelsInput interface {
	pulumi.Input

	ToHostSpecSelectorMatchLabelsOutput() HostSpecSelectorMatchLabelsOutput
	ToHostSpecSelectorMatchLabelsOutputWithContext(context.Context) HostSpecSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type HostSpecSelectorMatchLabelsArgs struct {
}

func (HostSpecSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecSelectorMatchLabels)(nil)).Elem()
}

func (i HostSpecSelectorMatchLabelsArgs) ToHostSpecSelectorMatchLabelsOutput() HostSpecSelectorMatchLabelsOutput {
	return i.ToHostSpecSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i HostSpecSelectorMatchLabelsArgs) ToHostSpecSelectorMatchLabelsOutputWithContext(ctx context.Context) HostSpecSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type HostSpecSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (HostSpecSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecSelectorMatchLabels)(nil)).Elem()
}

func (o HostSpecSelectorMatchLabelsOutput) ToHostSpecSelectorMatchLabelsOutput() HostSpecSelectorMatchLabelsOutput {
	return o
}

func (o HostSpecSelectorMatchLabelsOutput) ToHostSpecSelectorMatchLabelsOutputWithContext(ctx context.Context) HostSpecSelectorMatchLabelsOutput {
	return o
}

// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
type HostSpecTls struct {
	Alpn_protocols          *string  `pulumi:"alpn_protocols"`
	Ca_secret               *string  `pulumi:"ca_secret"`
	Cacert_chain_file       *string  `pulumi:"cacert_chain_file"`
	Cert_chain_file         *string  `pulumi:"cert_chain_file"`
	Cert_required           *bool    `pulumi:"cert_required"`
	Cipher_suites           []string `pulumi:"cipher_suites"`
	Ecdh_curves             []string `pulumi:"ecdh_curves"`
	Max_tls_version         *string  `pulumi:"max_tls_version"`
	Min_tls_version         *string  `pulumi:"min_tls_version"`
	Private_key_file        *string  `pulumi:"private_key_file"`
	Redirect_cleartext_from *int     `pulumi:"redirect_cleartext_from"`
	Sni                     *string  `pulumi:"sni"`
}

// HostSpecTlsInput is an input type that accepts HostSpecTlsArgs and HostSpecTlsOutput values.
// You can construct a concrete instance of `HostSpecTlsInput` via:
//
//          HostSpecTlsArgs{...}
type HostSpecTlsInput interface {
	pulumi.Input

	ToHostSpecTlsOutput() HostSpecTlsOutput
	ToHostSpecTlsOutputWithContext(context.Context) HostSpecTlsOutput
}

// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
type HostSpecTlsArgs struct {
	Alpn_protocols          pulumi.StringPtrInput   `pulumi:"alpn_protocols"`
	Ca_secret               pulumi.StringPtrInput   `pulumi:"ca_secret"`
	Cacert_chain_file       pulumi.StringPtrInput   `pulumi:"cacert_chain_file"`
	Cert_chain_file         pulumi.StringPtrInput   `pulumi:"cert_chain_file"`
	Cert_required           pulumi.BoolPtrInput     `pulumi:"cert_required"`
	Cipher_suites           pulumi.StringArrayInput `pulumi:"cipher_suites"`
	Ecdh_curves             pulumi.StringArrayInput `pulumi:"ecdh_curves"`
	Max_tls_version         pulumi.StringPtrInput   `pulumi:"max_tls_version"`
	Min_tls_version         pulumi.StringPtrInput   `pulumi:"min_tls_version"`
	Private_key_file        pulumi.StringPtrInput   `pulumi:"private_key_file"`
	Redirect_cleartext_from pulumi.IntPtrInput      `pulumi:"redirect_cleartext_from"`
	Sni                     pulumi.StringPtrInput   `pulumi:"sni"`
}

func (HostSpecTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecTls)(nil)).Elem()
}

func (i HostSpecTlsArgs) ToHostSpecTlsOutput() HostSpecTlsOutput {
	return i.ToHostSpecTlsOutputWithContext(context.Background())
}

func (i HostSpecTlsArgs) ToHostSpecTlsOutputWithContext(ctx context.Context) HostSpecTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsOutput)
}

func (i HostSpecTlsArgs) ToHostSpecTlsPtrOutput() HostSpecTlsPtrOutput {
	return i.ToHostSpecTlsPtrOutputWithContext(context.Background())
}

func (i HostSpecTlsArgs) ToHostSpecTlsPtrOutputWithContext(ctx context.Context) HostSpecTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsOutput).ToHostSpecTlsPtrOutputWithContext(ctx)
}

// HostSpecTlsPtrInput is an input type that accepts HostSpecTlsArgs, HostSpecTlsPtr and HostSpecTlsPtrOutput values.
// You can construct a concrete instance of `HostSpecTlsPtrInput` via:
//
//          HostSpecTlsArgs{...}
//
//  or:
//
//          nil
type HostSpecTlsPtrInput interface {
	pulumi.Input

	ToHostSpecTlsPtrOutput() HostSpecTlsPtrOutput
	ToHostSpecTlsPtrOutputWithContext(context.Context) HostSpecTlsPtrOutput
}

type hostSpecTlsPtrType HostSpecTlsArgs

func HostSpecTlsPtr(v *HostSpecTlsArgs) HostSpecTlsPtrInput {
	return (*hostSpecTlsPtrType)(v)
}

func (*hostSpecTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecTls)(nil)).Elem()
}

func (i *hostSpecTlsPtrType) ToHostSpecTlsPtrOutput() HostSpecTlsPtrOutput {
	return i.ToHostSpecTlsPtrOutputWithContext(context.Background())
}

func (i *hostSpecTlsPtrType) ToHostSpecTlsPtrOutputWithContext(ctx context.Context) HostSpecTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsPtrOutput)
}

// TLS configuration.  It is not valid to specify both `tlsContext` and `tls`.
type HostSpecTlsOutput struct{ *pulumi.OutputState }

func (HostSpecTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecTls)(nil)).Elem()
}

func (o HostSpecTlsOutput) ToHostSpecTlsOutput() HostSpecTlsOutput {
	return o
}

func (o HostSpecTlsOutput) ToHostSpecTlsOutputWithContext(ctx context.Context) HostSpecTlsOutput {
	return o
}

func (o HostSpecTlsOutput) ToHostSpecTlsPtrOutput() HostSpecTlsPtrOutput {
	return o.ToHostSpecTlsPtrOutputWithContext(context.Background())
}

func (o HostSpecTlsOutput) ToHostSpecTlsPtrOutputWithContext(ctx context.Context) HostSpecTlsPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *HostSpecTls {
		return &v
	}).(HostSpecTlsPtrOutput)
}
func (o HostSpecTlsOutput) Alpn_protocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Alpn_protocols }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Ca_secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Ca_secret }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Cacert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Cacert_chain_file }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Cert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Cert_chain_file }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Cert_required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *bool { return v.Cert_required }).(pulumi.BoolPtrOutput)
}

func (o HostSpecTlsOutput) Cipher_suites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostSpecTls) []string { return v.Cipher_suites }).(pulumi.StringArrayOutput)
}

func (o HostSpecTlsOutput) Ecdh_curves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostSpecTls) []string { return v.Ecdh_curves }).(pulumi.StringArrayOutput)
}

func (o HostSpecTlsOutput) Max_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Max_tls_version }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Min_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Min_tls_version }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Private_key_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Private_key_file }).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsOutput) Redirect_cleartext_from() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *int { return v.Redirect_cleartext_from }).(pulumi.IntPtrOutput)
}

func (o HostSpecTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

type HostSpecTlsPtrOutput struct{ *pulumi.OutputState }

func (HostSpecTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecTls)(nil)).Elem()
}

func (o HostSpecTlsPtrOutput) ToHostSpecTlsPtrOutput() HostSpecTlsPtrOutput {
	return o
}

func (o HostSpecTlsPtrOutput) ToHostSpecTlsPtrOutputWithContext(ctx context.Context) HostSpecTlsPtrOutput {
	return o
}

func (o HostSpecTlsPtrOutput) Elem() HostSpecTlsOutput {
	return o.ApplyT(func(v *HostSpecTls) HostSpecTls { return *v }).(HostSpecTlsOutput)
}

func (o HostSpecTlsPtrOutput) Alpn_protocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Alpn_protocols
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Ca_secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Ca_secret
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Cacert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Cacert_chain_file
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Cert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Cert_chain_file
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Cert_required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *bool {
		if v == nil {
			return nil
		}
		return v.Cert_required
	}).(pulumi.BoolPtrOutput)
}

func (o HostSpecTlsPtrOutput) Cipher_suites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostSpecTls) []string {
		if v == nil {
			return nil
		}
		return v.Cipher_suites
	}).(pulumi.StringArrayOutput)
}

func (o HostSpecTlsPtrOutput) Ecdh_curves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostSpecTls) []string {
		if v == nil {
			return nil
		}
		return v.Ecdh_curves
	}).(pulumi.StringArrayOutput)
}

func (o HostSpecTlsPtrOutput) Max_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Max_tls_version
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Min_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Min_tls_version
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Private_key_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Private_key_file
	}).(pulumi.StringPtrOutput)
}

func (o HostSpecTlsPtrOutput) Redirect_cleartext_from() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *int {
		if v == nil {
			return nil
		}
		return v.Redirect_cleartext_from
	}).(pulumi.IntPtrOutput)
}

func (o HostSpecTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecTlsContext struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// HostSpecTlsContextInput is an input type that accepts HostSpecTlsContextArgs and HostSpecTlsContextOutput values.
// You can construct a concrete instance of `HostSpecTlsContextInput` via:
//
//          HostSpecTlsContextArgs{...}
type HostSpecTlsContextInput interface {
	pulumi.Input

	ToHostSpecTlsContextOutput() HostSpecTlsContextOutput
	ToHostSpecTlsContextOutputWithContext(context.Context) HostSpecTlsContextOutput
}

// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecTlsContextArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HostSpecTlsContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecTlsContext)(nil)).Elem()
}

func (i HostSpecTlsContextArgs) ToHostSpecTlsContextOutput() HostSpecTlsContextOutput {
	return i.ToHostSpecTlsContextOutputWithContext(context.Background())
}

func (i HostSpecTlsContextArgs) ToHostSpecTlsContextOutputWithContext(ctx context.Context) HostSpecTlsContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsContextOutput)
}

func (i HostSpecTlsContextArgs) ToHostSpecTlsContextPtrOutput() HostSpecTlsContextPtrOutput {
	return i.ToHostSpecTlsContextPtrOutputWithContext(context.Background())
}

func (i HostSpecTlsContextArgs) ToHostSpecTlsContextPtrOutputWithContext(ctx context.Context) HostSpecTlsContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsContextOutput).ToHostSpecTlsContextPtrOutputWithContext(ctx)
}

// HostSpecTlsContextPtrInput is an input type that accepts HostSpecTlsContextArgs, HostSpecTlsContextPtr and HostSpecTlsContextPtrOutput values.
// You can construct a concrete instance of `HostSpecTlsContextPtrInput` via:
//
//          HostSpecTlsContextArgs{...}
//
//  or:
//
//          nil
type HostSpecTlsContextPtrInput interface {
	pulumi.Input

	ToHostSpecTlsContextPtrOutput() HostSpecTlsContextPtrOutput
	ToHostSpecTlsContextPtrOutputWithContext(context.Context) HostSpecTlsContextPtrOutput
}

type hostSpecTlsContextPtrType HostSpecTlsContextArgs

func HostSpecTlsContextPtr(v *HostSpecTlsContextArgs) HostSpecTlsContextPtrInput {
	return (*hostSpecTlsContextPtrType)(v)
}

func (*hostSpecTlsContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecTlsContext)(nil)).Elem()
}

func (i *hostSpecTlsContextPtrType) ToHostSpecTlsContextPtrOutput() HostSpecTlsContextPtrOutput {
	return i.ToHostSpecTlsContextPtrOutputWithContext(context.Background())
}

func (i *hostSpecTlsContextPtrType) ToHostSpecTlsContextPtrOutputWithContext(ctx context.Context) HostSpecTlsContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsContextPtrOutput)
}

// Name of the TLSContext the Host resource is linked with. It is not valid to specify both `tlsContext` and `tls`.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecTlsContextOutput struct{ *pulumi.OutputState }

func (HostSpecTlsContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecTlsContext)(nil)).Elem()
}

func (o HostSpecTlsContextOutput) ToHostSpecTlsContextOutput() HostSpecTlsContextOutput {
	return o
}

func (o HostSpecTlsContextOutput) ToHostSpecTlsContextOutputWithContext(ctx context.Context) HostSpecTlsContextOutput {
	return o
}

func (o HostSpecTlsContextOutput) ToHostSpecTlsContextPtrOutput() HostSpecTlsContextPtrOutput {
	return o.ToHostSpecTlsContextPtrOutputWithContext(context.Background())
}

func (o HostSpecTlsContextOutput) ToHostSpecTlsContextPtrOutputWithContext(ctx context.Context) HostSpecTlsContextPtrOutput {
	return o.ApplyT(func(v HostSpecTlsContext) *HostSpecTlsContext {
		return &v
	}).(HostSpecTlsContextPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o HostSpecTlsContextOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTlsContext) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HostSpecTlsContextPtrOutput struct{ *pulumi.OutputState }

func (HostSpecTlsContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecTlsContext)(nil)).Elem()
}

func (o HostSpecTlsContextPtrOutput) ToHostSpecTlsContextPtrOutput() HostSpecTlsContextPtrOutput {
	return o
}

func (o HostSpecTlsContextPtrOutput) ToHostSpecTlsContextPtrOutputWithContext(ctx context.Context) HostSpecTlsContextPtrOutput {
	return o
}

func (o HostSpecTlsContextPtrOutput) Elem() HostSpecTlsContextOutput {
	return o.ApplyT(func(v *HostSpecTlsContext) HostSpecTlsContext { return *v }).(HostSpecTlsContextOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o HostSpecTlsContextPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTlsContext) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecTlsSecret struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// HostSpecTlsSecretInput is an input type that accepts HostSpecTlsSecretArgs and HostSpecTlsSecretOutput values.
// You can construct a concrete instance of `HostSpecTlsSecretInput` via:
//
//          HostSpecTlsSecretArgs{...}
type HostSpecTlsSecretInput interface {
	pulumi.Input

	ToHostSpecTlsSecretOutput() HostSpecTlsSecretOutput
	ToHostSpecTlsSecretOutputWithContext(context.Context) HostSpecTlsSecretOutput
}

// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecTlsSecretArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HostSpecTlsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecTlsSecret)(nil)).Elem()
}

func (i HostSpecTlsSecretArgs) ToHostSpecTlsSecretOutput() HostSpecTlsSecretOutput {
	return i.ToHostSpecTlsSecretOutputWithContext(context.Background())
}

func (i HostSpecTlsSecretArgs) ToHostSpecTlsSecretOutputWithContext(ctx context.Context) HostSpecTlsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsSecretOutput)
}

func (i HostSpecTlsSecretArgs) ToHostSpecTlsSecretPtrOutput() HostSpecTlsSecretPtrOutput {
	return i.ToHostSpecTlsSecretPtrOutputWithContext(context.Background())
}

func (i HostSpecTlsSecretArgs) ToHostSpecTlsSecretPtrOutputWithContext(ctx context.Context) HostSpecTlsSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsSecretOutput).ToHostSpecTlsSecretPtrOutputWithContext(ctx)
}

// HostSpecTlsSecretPtrInput is an input type that accepts HostSpecTlsSecretArgs, HostSpecTlsSecretPtr and HostSpecTlsSecretPtrOutput values.
// You can construct a concrete instance of `HostSpecTlsSecretPtrInput` via:
//
//          HostSpecTlsSecretArgs{...}
//
//  or:
//
//          nil
type HostSpecTlsSecretPtrInput interface {
	pulumi.Input

	ToHostSpecTlsSecretPtrOutput() HostSpecTlsSecretPtrOutput
	ToHostSpecTlsSecretPtrOutputWithContext(context.Context) HostSpecTlsSecretPtrOutput
}

type hostSpecTlsSecretPtrType HostSpecTlsSecretArgs

func HostSpecTlsSecretPtr(v *HostSpecTlsSecretArgs) HostSpecTlsSecretPtrInput {
	return (*hostSpecTlsSecretPtrType)(v)
}

func (*hostSpecTlsSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecTlsSecret)(nil)).Elem()
}

func (i *hostSpecTlsSecretPtrType) ToHostSpecTlsSecretPtrOutput() HostSpecTlsSecretPtrOutput {
	return i.ToHostSpecTlsSecretPtrOutputWithContext(context.Background())
}

func (i *hostSpecTlsSecretPtrType) ToHostSpecTlsSecretPtrOutputWithContext(ctx context.Context) HostSpecTlsSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostSpecTlsSecretPtrOutput)
}

// Name of the Kubernetes secret into which to save generated certificates.  If ACME is enabled (see $acmeProvider), then the default is $hostname; otherwise the default is "".  If the value is "", then we do not do TLS for this Host.
//  Note that this is a native-Kubernetes-style core.v1.LocalObjectReference, not an Ambassador-style `{name}.{namespace}` string.  Because we're opinionated, it does not support referencing a Secret in another namespace (because most native Kubernetes resources don't support that), but if we ever abandon that opinion and decide to support non-local references it, it would be by adding a `namespace:` field by changing it from a core.v1.LocalObjectReference to a core.v1.SecretReference, not by adopting the `{name}.{namespace}` notation.
type HostSpecTlsSecretOutput struct{ *pulumi.OutputState }

func (HostSpecTlsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostSpecTlsSecret)(nil)).Elem()
}

func (o HostSpecTlsSecretOutput) ToHostSpecTlsSecretOutput() HostSpecTlsSecretOutput {
	return o
}

func (o HostSpecTlsSecretOutput) ToHostSpecTlsSecretOutputWithContext(ctx context.Context) HostSpecTlsSecretOutput {
	return o
}

func (o HostSpecTlsSecretOutput) ToHostSpecTlsSecretPtrOutput() HostSpecTlsSecretPtrOutput {
	return o.ToHostSpecTlsSecretPtrOutputWithContext(context.Background())
}

func (o HostSpecTlsSecretOutput) ToHostSpecTlsSecretPtrOutputWithContext(ctx context.Context) HostSpecTlsSecretPtrOutput {
	return o.ApplyT(func(v HostSpecTlsSecret) *HostSpecTlsSecret {
		return &v
	}).(HostSpecTlsSecretPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o HostSpecTlsSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostSpecTlsSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HostSpecTlsSecretPtrOutput struct{ *pulumi.OutputState }

func (HostSpecTlsSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostSpecTlsSecret)(nil)).Elem()
}

func (o HostSpecTlsSecretPtrOutput) ToHostSpecTlsSecretPtrOutput() HostSpecTlsSecretPtrOutput {
	return o
}

func (o HostSpecTlsSecretPtrOutput) ToHostSpecTlsSecretPtrOutputWithContext(ctx context.Context) HostSpecTlsSecretPtrOutput {
	return o
}

func (o HostSpecTlsSecretPtrOutput) Elem() HostSpecTlsSecretOutput {
	return o.ApplyT(func(v *HostSpecTlsSecret) HostSpecTlsSecret { return *v }).(HostSpecTlsSecretOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o HostSpecTlsSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostSpecTlsSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HostStatus defines the observed state of Host
type HostStatus struct {
	ErrorBackoff *string `pulumi:"errorBackoff"`
	// errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
	ErrorReason    *string `pulumi:"errorReason"`
	ErrorTimestamp *string `pulumi:"errorTimestamp"`
	// phaseCompleted and phasePending are valid when state==Pending or state==Error.
	PhaseCompleted *string `pulumi:"phaseCompleted"`
	// phaseCompleted and phasePending are valid when state==Pending or state==Error.
	PhasePending *string `pulumi:"phasePending"`
	// The first value listed in the Enum marker becomes the "zero" value, and it would be great if "Pending" could be the default value; but it's Important that the "zero" value be able to be shown as empty/omitted from display, and we really do want `kubectl get hosts` to say "Pending" in the "STATE" column, and not leave the column empty.
	State                *string `pulumi:"state"`
	TlsCertificateSource *string `pulumi:"tlsCertificateSource"`
}

// HostStatusInput is an input type that accepts HostStatusArgs and HostStatusOutput values.
// You can construct a concrete instance of `HostStatusInput` via:
//
//          HostStatusArgs{...}
type HostStatusInput interface {
	pulumi.Input

	ToHostStatusOutput() HostStatusOutput
	ToHostStatusOutputWithContext(context.Context) HostStatusOutput
}

// HostStatus defines the observed state of Host
type HostStatusArgs struct {
	ErrorBackoff pulumi.StringPtrInput `pulumi:"errorBackoff"`
	// errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
	ErrorReason    pulumi.StringPtrInput `pulumi:"errorReason"`
	ErrorTimestamp pulumi.StringPtrInput `pulumi:"errorTimestamp"`
	// phaseCompleted and phasePending are valid when state==Pending or state==Error.
	PhaseCompleted pulumi.StringPtrInput `pulumi:"phaseCompleted"`
	// phaseCompleted and phasePending are valid when state==Pending or state==Error.
	PhasePending pulumi.StringPtrInput `pulumi:"phasePending"`
	// The first value listed in the Enum marker becomes the "zero" value, and it would be great if "Pending" could be the default value; but it's Important that the "zero" value be able to be shown as empty/omitted from display, and we really do want `kubectl get hosts` to say "Pending" in the "STATE" column, and not leave the column empty.
	State                pulumi.StringPtrInput `pulumi:"state"`
	TlsCertificateSource pulumi.StringPtrInput `pulumi:"tlsCertificateSource"`
}

func (HostStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostStatus)(nil)).Elem()
}

func (i HostStatusArgs) ToHostStatusOutput() HostStatusOutput {
	return i.ToHostStatusOutputWithContext(context.Background())
}

func (i HostStatusArgs) ToHostStatusOutputWithContext(ctx context.Context) HostStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostStatusOutput)
}

func (i HostStatusArgs) ToHostStatusPtrOutput() HostStatusPtrOutput {
	return i.ToHostStatusPtrOutputWithContext(context.Background())
}

func (i HostStatusArgs) ToHostStatusPtrOutputWithContext(ctx context.Context) HostStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostStatusOutput).ToHostStatusPtrOutputWithContext(ctx)
}

// HostStatusPtrInput is an input type that accepts HostStatusArgs, HostStatusPtr and HostStatusPtrOutput values.
// You can construct a concrete instance of `HostStatusPtrInput` via:
//
//          HostStatusArgs{...}
//
//  or:
//
//          nil
type HostStatusPtrInput interface {
	pulumi.Input

	ToHostStatusPtrOutput() HostStatusPtrOutput
	ToHostStatusPtrOutputWithContext(context.Context) HostStatusPtrOutput
}

type hostStatusPtrType HostStatusArgs

func HostStatusPtr(v *HostStatusArgs) HostStatusPtrInput {
	return (*hostStatusPtrType)(v)
}

func (*hostStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostStatus)(nil)).Elem()
}

func (i *hostStatusPtrType) ToHostStatusPtrOutput() HostStatusPtrOutput {
	return i.ToHostStatusPtrOutputWithContext(context.Background())
}

func (i *hostStatusPtrType) ToHostStatusPtrOutputWithContext(ctx context.Context) HostStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostStatusPtrOutput)
}

// HostStatus defines the observed state of Host
type HostStatusOutput struct{ *pulumi.OutputState }

func (HostStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostStatus)(nil)).Elem()
}

func (o HostStatusOutput) ToHostStatusOutput() HostStatusOutput {
	return o
}

func (o HostStatusOutput) ToHostStatusOutputWithContext(ctx context.Context) HostStatusOutput {
	return o
}

func (o HostStatusOutput) ToHostStatusPtrOutput() HostStatusPtrOutput {
	return o.ToHostStatusPtrOutputWithContext(context.Background())
}

func (o HostStatusOutput) ToHostStatusPtrOutputWithContext(ctx context.Context) HostStatusPtrOutput {
	return o.ApplyT(func(v HostStatus) *HostStatus {
		return &v
	}).(HostStatusPtrOutput)
}
func (o HostStatusOutput) ErrorBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.ErrorBackoff }).(pulumi.StringPtrOutput)
}

// errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
func (o HostStatusOutput) ErrorReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.ErrorReason }).(pulumi.StringPtrOutput)
}

func (o HostStatusOutput) ErrorTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.ErrorTimestamp }).(pulumi.StringPtrOutput)
}

// phaseCompleted and phasePending are valid when state==Pending or state==Error.
func (o HostStatusOutput) PhaseCompleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.PhaseCompleted }).(pulumi.StringPtrOutput)
}

// phaseCompleted and phasePending are valid when state==Pending or state==Error.
func (o HostStatusOutput) PhasePending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.PhasePending }).(pulumi.StringPtrOutput)
}

// The first value listed in the Enum marker becomes the "zero" value, and it would be great if "Pending" could be the default value; but it's Important that the "zero" value be able to be shown as empty/omitted from display, and we really do want `kubectl get hosts` to say "Pending" in the "STATE" column, and not leave the column empty.
func (o HostStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o HostStatusOutput) TlsCertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostStatus) *string { return v.TlsCertificateSource }).(pulumi.StringPtrOutput)
}

type HostStatusPtrOutput struct{ *pulumi.OutputState }

func (HostStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostStatus)(nil)).Elem()
}

func (o HostStatusPtrOutput) ToHostStatusPtrOutput() HostStatusPtrOutput {
	return o
}

func (o HostStatusPtrOutput) ToHostStatusPtrOutputWithContext(ctx context.Context) HostStatusPtrOutput {
	return o
}

func (o HostStatusPtrOutput) Elem() HostStatusOutput {
	return o.ApplyT(func(v *HostStatus) HostStatus { return *v }).(HostStatusOutput)
}

func (o HostStatusPtrOutput) ErrorBackoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.ErrorBackoff
	}).(pulumi.StringPtrOutput)
}

// errorReason, errorTimestamp, and errorBackoff are valid when state==Error.
func (o HostStatusPtrOutput) ErrorReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.ErrorReason
	}).(pulumi.StringPtrOutput)
}

func (o HostStatusPtrOutput) ErrorTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.ErrorTimestamp
	}).(pulumi.StringPtrOutput)
}

// phaseCompleted and phasePending are valid when state==Pending or state==Error.
func (o HostStatusPtrOutput) PhaseCompleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.PhaseCompleted
	}).(pulumi.StringPtrOutput)
}

// phaseCompleted and phasePending are valid when state==Pending or state==Error.
func (o HostStatusPtrOutput) PhasePending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.PhasePending
	}).(pulumi.StringPtrOutput)
}

// The first value listed in the Enum marker becomes the "zero" value, and it would be great if "Pending" could be the default value; but it's Important that the "zero" value be able to be shown as empty/omitted from display, and we really do want `kubectl get hosts` to say "Pending" in the "STATE" column, and not leave the column empty.
func (o HostStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

func (o HostStatusPtrOutput) TlsCertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostStatus) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertificateSource
	}).(pulumi.StringPtrOutput)
}

// KubernetesEndpointResolver is the Schema for the kubernetesendpointresolver API
type KubernetesEndpointResolverType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec *KubernetesEndpointResolverSpec `pulumi:"spec"`
}

// KubernetesEndpointResolverTypeInput is an input type that accepts KubernetesEndpointResolverTypeArgs and KubernetesEndpointResolverTypeOutput values.
// You can construct a concrete instance of `KubernetesEndpointResolverTypeInput` via:
//
//          KubernetesEndpointResolverTypeArgs{...}
type KubernetesEndpointResolverTypeInput interface {
	pulumi.Input

	ToKubernetesEndpointResolverTypeOutput() KubernetesEndpointResolverTypeOutput
	ToKubernetesEndpointResolverTypeOutputWithContext(context.Context) KubernetesEndpointResolverTypeOutput
}

// KubernetesEndpointResolver is the Schema for the kubernetesendpointresolver API
type KubernetesEndpointResolverTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesEndpointResolverSpecPtrInput `pulumi:"spec"`
}

func (KubernetesEndpointResolverTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolverType)(nil)).Elem()
}

func (i KubernetesEndpointResolverTypeArgs) ToKubernetesEndpointResolverTypeOutput() KubernetesEndpointResolverTypeOutput {
	return i.ToKubernetesEndpointResolverTypeOutputWithContext(context.Background())
}

func (i KubernetesEndpointResolverTypeArgs) ToKubernetesEndpointResolverTypeOutputWithContext(ctx context.Context) KubernetesEndpointResolverTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEndpointResolverTypeOutput)
}

// KubernetesEndpointResolver is the Schema for the kubernetesendpointresolver API
type KubernetesEndpointResolverTypeOutput struct{ *pulumi.OutputState }

func (KubernetesEndpointResolverTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolverType)(nil)).Elem()
}

func (o KubernetesEndpointResolverTypeOutput) ToKubernetesEndpointResolverTypeOutput() KubernetesEndpointResolverTypeOutput {
	return o
}

func (o KubernetesEndpointResolverTypeOutput) ToKubernetesEndpointResolverTypeOutputWithContext(ctx context.Context) KubernetesEndpointResolverTypeOutput {
	return o
}

func (o KubernetesEndpointResolverTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesEndpointResolverType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubernetesEndpointResolverTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesEndpointResolverType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubernetesEndpointResolverTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubernetesEndpointResolverType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
func (o KubernetesEndpointResolverTypeOutput) Spec() KubernetesEndpointResolverSpecPtrOutput {
	return o.ApplyT(func(v KubernetesEndpointResolverType) *KubernetesEndpointResolverSpec { return v.Spec }).(KubernetesEndpointResolverSpecPtrOutput)
}

type KubernetesEndpointResolverMetadata struct {
}

// KubernetesEndpointResolverMetadataInput is an input type that accepts KubernetesEndpointResolverMetadataArgs and KubernetesEndpointResolverMetadataOutput values.
// You can construct a concrete instance of `KubernetesEndpointResolverMetadataInput` via:
//
//          KubernetesEndpointResolverMetadataArgs{...}
type KubernetesEndpointResolverMetadataInput interface {
	pulumi.Input

	ToKubernetesEndpointResolverMetadataOutput() KubernetesEndpointResolverMetadataOutput
	ToKubernetesEndpointResolverMetadataOutputWithContext(context.Context) KubernetesEndpointResolverMetadataOutput
}

type KubernetesEndpointResolverMetadataArgs struct {
}

func (KubernetesEndpointResolverMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolverMetadata)(nil)).Elem()
}

func (i KubernetesEndpointResolverMetadataArgs) ToKubernetesEndpointResolverMetadataOutput() KubernetesEndpointResolverMetadataOutput {
	return i.ToKubernetesEndpointResolverMetadataOutputWithContext(context.Background())
}

func (i KubernetesEndpointResolverMetadataArgs) ToKubernetesEndpointResolverMetadataOutputWithContext(ctx context.Context) KubernetesEndpointResolverMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEndpointResolverMetadataOutput)
}

type KubernetesEndpointResolverMetadataOutput struct{ *pulumi.OutputState }

func (KubernetesEndpointResolverMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolverMetadata)(nil)).Elem()
}

func (o KubernetesEndpointResolverMetadataOutput) ToKubernetesEndpointResolverMetadataOutput() KubernetesEndpointResolverMetadataOutput {
	return o
}

func (o KubernetesEndpointResolverMetadataOutput) ToKubernetesEndpointResolverMetadataOutputWithContext(ctx context.Context) KubernetesEndpointResolverMetadataOutput {
	return o
}

// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
type KubernetesEndpointResolverSpec struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id interface{} `pulumi:"ambassador_id"`
}

// KubernetesEndpointResolverSpecInput is an input type that accepts KubernetesEndpointResolverSpecArgs and KubernetesEndpointResolverSpecOutput values.
// You can construct a concrete instance of `KubernetesEndpointResolverSpecInput` via:
//
//          KubernetesEndpointResolverSpecArgs{...}
type KubernetesEndpointResolverSpecInput interface {
	pulumi.Input

	ToKubernetesEndpointResolverSpecOutput() KubernetesEndpointResolverSpecOutput
	ToKubernetesEndpointResolverSpecOutputWithContext(context.Context) KubernetesEndpointResolverSpecOutput
}

// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
type KubernetesEndpointResolverSpecArgs struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id pulumi.Input `pulumi:"ambassador_id"`
}

func (KubernetesEndpointResolverSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolverSpec)(nil)).Elem()
}

func (i KubernetesEndpointResolverSpecArgs) ToKubernetesEndpointResolverSpecOutput() KubernetesEndpointResolverSpecOutput {
	return i.ToKubernetesEndpointResolverSpecOutputWithContext(context.Background())
}

func (i KubernetesEndpointResolverSpecArgs) ToKubernetesEndpointResolverSpecOutputWithContext(ctx context.Context) KubernetesEndpointResolverSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEndpointResolverSpecOutput)
}

func (i KubernetesEndpointResolverSpecArgs) ToKubernetesEndpointResolverSpecPtrOutput() KubernetesEndpointResolverSpecPtrOutput {
	return i.ToKubernetesEndpointResolverSpecPtrOutputWithContext(context.Background())
}

func (i KubernetesEndpointResolverSpecArgs) ToKubernetesEndpointResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesEndpointResolverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEndpointResolverSpecOutput).ToKubernetesEndpointResolverSpecPtrOutputWithContext(ctx)
}

// KubernetesEndpointResolverSpecPtrInput is an input type that accepts KubernetesEndpointResolverSpecArgs, KubernetesEndpointResolverSpecPtr and KubernetesEndpointResolverSpecPtrOutput values.
// You can construct a concrete instance of `KubernetesEndpointResolverSpecPtrInput` via:
//
//          KubernetesEndpointResolverSpecArgs{...}
//
//  or:
//
//          nil
type KubernetesEndpointResolverSpecPtrInput interface {
	pulumi.Input

	ToKubernetesEndpointResolverSpecPtrOutput() KubernetesEndpointResolverSpecPtrOutput
	ToKubernetesEndpointResolverSpecPtrOutputWithContext(context.Context) KubernetesEndpointResolverSpecPtrOutput
}

type kubernetesEndpointResolverSpecPtrType KubernetesEndpointResolverSpecArgs

func KubernetesEndpointResolverSpecPtr(v *KubernetesEndpointResolverSpecArgs) KubernetesEndpointResolverSpecPtrInput {
	return (*kubernetesEndpointResolverSpecPtrType)(v)
}

func (*kubernetesEndpointResolverSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesEndpointResolverSpec)(nil)).Elem()
}

func (i *kubernetesEndpointResolverSpecPtrType) ToKubernetesEndpointResolverSpecPtrOutput() KubernetesEndpointResolverSpecPtrOutput {
	return i.ToKubernetesEndpointResolverSpecPtrOutputWithContext(context.Background())
}

func (i *kubernetesEndpointResolverSpecPtrType) ToKubernetesEndpointResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesEndpointResolverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEndpointResolverSpecPtrOutput)
}

// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
type KubernetesEndpointResolverSpecOutput struct{ *pulumi.OutputState }

func (KubernetesEndpointResolverSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolverSpec)(nil)).Elem()
}

func (o KubernetesEndpointResolverSpecOutput) ToKubernetesEndpointResolverSpecOutput() KubernetesEndpointResolverSpecOutput {
	return o
}

func (o KubernetesEndpointResolverSpecOutput) ToKubernetesEndpointResolverSpecOutputWithContext(ctx context.Context) KubernetesEndpointResolverSpecOutput {
	return o
}

func (o KubernetesEndpointResolverSpecOutput) ToKubernetesEndpointResolverSpecPtrOutput() KubernetesEndpointResolverSpecPtrOutput {
	return o.ToKubernetesEndpointResolverSpecPtrOutputWithContext(context.Background())
}

func (o KubernetesEndpointResolverSpecOutput) ToKubernetesEndpointResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesEndpointResolverSpecPtrOutput {
	return o.ApplyT(func(v KubernetesEndpointResolverSpec) *KubernetesEndpointResolverSpec {
		return &v
	}).(KubernetesEndpointResolverSpecPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o KubernetesEndpointResolverSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesEndpointResolverSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

type KubernetesEndpointResolverSpecPtrOutput struct{ *pulumi.OutputState }

func (KubernetesEndpointResolverSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesEndpointResolverSpec)(nil)).Elem()
}

func (o KubernetesEndpointResolverSpecPtrOutput) ToKubernetesEndpointResolverSpecPtrOutput() KubernetesEndpointResolverSpecPtrOutput {
	return o
}

func (o KubernetesEndpointResolverSpecPtrOutput) ToKubernetesEndpointResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesEndpointResolverSpecPtrOutput {
	return o
}

func (o KubernetesEndpointResolverSpecPtrOutput) Elem() KubernetesEndpointResolverSpecOutput {
	return o.ApplyT(func(v *KubernetesEndpointResolverSpec) KubernetesEndpointResolverSpec { return *v }).(KubernetesEndpointResolverSpecOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o KubernetesEndpointResolverSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *KubernetesEndpointResolverSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

// KubernetesServiceResolver is the Schema for the kubernetesserviceresolver API
type KubernetesServiceResolverType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec *KubernetesServiceResolverSpec `pulumi:"spec"`
}

// KubernetesServiceResolverTypeInput is an input type that accepts KubernetesServiceResolverTypeArgs and KubernetesServiceResolverTypeOutput values.
// You can construct a concrete instance of `KubernetesServiceResolverTypeInput` via:
//
//          KubernetesServiceResolverTypeArgs{...}
type KubernetesServiceResolverTypeInput interface {
	pulumi.Input

	ToKubernetesServiceResolverTypeOutput() KubernetesServiceResolverTypeOutput
	ToKubernetesServiceResolverTypeOutputWithContext(context.Context) KubernetesServiceResolverTypeOutput
}

// KubernetesServiceResolver is the Schema for the kubernetesserviceresolver API
type KubernetesServiceResolverTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesServiceResolverSpecPtrInput `pulumi:"spec"`
}

func (KubernetesServiceResolverTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolverType)(nil)).Elem()
}

func (i KubernetesServiceResolverTypeArgs) ToKubernetesServiceResolverTypeOutput() KubernetesServiceResolverTypeOutput {
	return i.ToKubernetesServiceResolverTypeOutputWithContext(context.Background())
}

func (i KubernetesServiceResolverTypeArgs) ToKubernetesServiceResolverTypeOutputWithContext(ctx context.Context) KubernetesServiceResolverTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesServiceResolverTypeOutput)
}

// KubernetesServiceResolver is the Schema for the kubernetesserviceresolver API
type KubernetesServiceResolverTypeOutput struct{ *pulumi.OutputState }

func (KubernetesServiceResolverTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolverType)(nil)).Elem()
}

func (o KubernetesServiceResolverTypeOutput) ToKubernetesServiceResolverTypeOutput() KubernetesServiceResolverTypeOutput {
	return o
}

func (o KubernetesServiceResolverTypeOutput) ToKubernetesServiceResolverTypeOutputWithContext(ctx context.Context) KubernetesServiceResolverTypeOutput {
	return o
}

func (o KubernetesServiceResolverTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesServiceResolverType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubernetesServiceResolverTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesServiceResolverType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubernetesServiceResolverTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubernetesServiceResolverType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
func (o KubernetesServiceResolverTypeOutput) Spec() KubernetesServiceResolverSpecPtrOutput {
	return o.ApplyT(func(v KubernetesServiceResolverType) *KubernetesServiceResolverSpec { return v.Spec }).(KubernetesServiceResolverSpecPtrOutput)
}

type KubernetesServiceResolverMetadata struct {
}

// KubernetesServiceResolverMetadataInput is an input type that accepts KubernetesServiceResolverMetadataArgs and KubernetesServiceResolverMetadataOutput values.
// You can construct a concrete instance of `KubernetesServiceResolverMetadataInput` via:
//
//          KubernetesServiceResolverMetadataArgs{...}
type KubernetesServiceResolverMetadataInput interface {
	pulumi.Input

	ToKubernetesServiceResolverMetadataOutput() KubernetesServiceResolverMetadataOutput
	ToKubernetesServiceResolverMetadataOutputWithContext(context.Context) KubernetesServiceResolverMetadataOutput
}

type KubernetesServiceResolverMetadataArgs struct {
}

func (KubernetesServiceResolverMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolverMetadata)(nil)).Elem()
}

func (i KubernetesServiceResolverMetadataArgs) ToKubernetesServiceResolverMetadataOutput() KubernetesServiceResolverMetadataOutput {
	return i.ToKubernetesServiceResolverMetadataOutputWithContext(context.Background())
}

func (i KubernetesServiceResolverMetadataArgs) ToKubernetesServiceResolverMetadataOutputWithContext(ctx context.Context) KubernetesServiceResolverMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesServiceResolverMetadataOutput)
}

type KubernetesServiceResolverMetadataOutput struct{ *pulumi.OutputState }

func (KubernetesServiceResolverMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolverMetadata)(nil)).Elem()
}

func (o KubernetesServiceResolverMetadataOutput) ToKubernetesServiceResolverMetadataOutput() KubernetesServiceResolverMetadataOutput {
	return o
}

func (o KubernetesServiceResolverMetadataOutput) ToKubernetesServiceResolverMetadataOutputWithContext(ctx context.Context) KubernetesServiceResolverMetadataOutput {
	return o
}

// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
type KubernetesServiceResolverSpec struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id interface{} `pulumi:"ambassador_id"`
}

// KubernetesServiceResolverSpecInput is an input type that accepts KubernetesServiceResolverSpecArgs and KubernetesServiceResolverSpecOutput values.
// You can construct a concrete instance of `KubernetesServiceResolverSpecInput` via:
//
//          KubernetesServiceResolverSpecArgs{...}
type KubernetesServiceResolverSpecInput interface {
	pulumi.Input

	ToKubernetesServiceResolverSpecOutput() KubernetesServiceResolverSpecOutput
	ToKubernetesServiceResolverSpecOutputWithContext(context.Context) KubernetesServiceResolverSpecOutput
}

// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
type KubernetesServiceResolverSpecArgs struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id pulumi.Input `pulumi:"ambassador_id"`
}

func (KubernetesServiceResolverSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolverSpec)(nil)).Elem()
}

func (i KubernetesServiceResolverSpecArgs) ToKubernetesServiceResolverSpecOutput() KubernetesServiceResolverSpecOutput {
	return i.ToKubernetesServiceResolverSpecOutputWithContext(context.Background())
}

func (i KubernetesServiceResolverSpecArgs) ToKubernetesServiceResolverSpecOutputWithContext(ctx context.Context) KubernetesServiceResolverSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesServiceResolverSpecOutput)
}

func (i KubernetesServiceResolverSpecArgs) ToKubernetesServiceResolverSpecPtrOutput() KubernetesServiceResolverSpecPtrOutput {
	return i.ToKubernetesServiceResolverSpecPtrOutputWithContext(context.Background())
}

func (i KubernetesServiceResolverSpecArgs) ToKubernetesServiceResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesServiceResolverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesServiceResolverSpecOutput).ToKubernetesServiceResolverSpecPtrOutputWithContext(ctx)
}

// KubernetesServiceResolverSpecPtrInput is an input type that accepts KubernetesServiceResolverSpecArgs, KubernetesServiceResolverSpecPtr and KubernetesServiceResolverSpecPtrOutput values.
// You can construct a concrete instance of `KubernetesServiceResolverSpecPtrInput` via:
//
//          KubernetesServiceResolverSpecArgs{...}
//
//  or:
//
//          nil
type KubernetesServiceResolverSpecPtrInput interface {
	pulumi.Input

	ToKubernetesServiceResolverSpecPtrOutput() KubernetesServiceResolverSpecPtrOutput
	ToKubernetesServiceResolverSpecPtrOutputWithContext(context.Context) KubernetesServiceResolverSpecPtrOutput
}

type kubernetesServiceResolverSpecPtrType KubernetesServiceResolverSpecArgs

func KubernetesServiceResolverSpecPtr(v *KubernetesServiceResolverSpecArgs) KubernetesServiceResolverSpecPtrInput {
	return (*kubernetesServiceResolverSpecPtrType)(v)
}

func (*kubernetesServiceResolverSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesServiceResolverSpec)(nil)).Elem()
}

func (i *kubernetesServiceResolverSpecPtrType) ToKubernetesServiceResolverSpecPtrOutput() KubernetesServiceResolverSpecPtrOutput {
	return i.ToKubernetesServiceResolverSpecPtrOutputWithContext(context.Background())
}

func (i *kubernetesServiceResolverSpecPtrType) ToKubernetesServiceResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesServiceResolverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesServiceResolverSpecPtrOutput)
}

// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
type KubernetesServiceResolverSpecOutput struct{ *pulumi.OutputState }

func (KubernetesServiceResolverSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolverSpec)(nil)).Elem()
}

func (o KubernetesServiceResolverSpecOutput) ToKubernetesServiceResolverSpecOutput() KubernetesServiceResolverSpecOutput {
	return o
}

func (o KubernetesServiceResolverSpecOutput) ToKubernetesServiceResolverSpecOutputWithContext(ctx context.Context) KubernetesServiceResolverSpecOutput {
	return o
}

func (o KubernetesServiceResolverSpecOutput) ToKubernetesServiceResolverSpecPtrOutput() KubernetesServiceResolverSpecPtrOutput {
	return o.ToKubernetesServiceResolverSpecPtrOutputWithContext(context.Background())
}

func (o KubernetesServiceResolverSpecOutput) ToKubernetesServiceResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesServiceResolverSpecPtrOutput {
	return o.ApplyT(func(v KubernetesServiceResolverSpec) *KubernetesServiceResolverSpec {
		return &v
	}).(KubernetesServiceResolverSpecPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o KubernetesServiceResolverSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesServiceResolverSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

type KubernetesServiceResolverSpecPtrOutput struct{ *pulumi.OutputState }

func (KubernetesServiceResolverSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesServiceResolverSpec)(nil)).Elem()
}

func (o KubernetesServiceResolverSpecPtrOutput) ToKubernetesServiceResolverSpecPtrOutput() KubernetesServiceResolverSpecPtrOutput {
	return o
}

func (o KubernetesServiceResolverSpecPtrOutput) ToKubernetesServiceResolverSpecPtrOutputWithContext(ctx context.Context) KubernetesServiceResolverSpecPtrOutput {
	return o
}

func (o KubernetesServiceResolverSpecPtrOutput) Elem() KubernetesServiceResolverSpecOutput {
	return o.ApplyT(func(v *KubernetesServiceResolverSpec) KubernetesServiceResolverSpec { return *v }).(KubernetesServiceResolverSpecOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o KubernetesServiceResolverSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *KubernetesServiceResolverSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

// LogService is the Schema for the logservices API
type LogServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// LogServiceSpec defines the desired state of LogService
	Spec *LogServiceSpec `pulumi:"spec"`
}

// LogServiceTypeInput is an input type that accepts LogServiceTypeArgs and LogServiceTypeOutput values.
// You can construct a concrete instance of `LogServiceTypeInput` via:
//
//          LogServiceTypeArgs{...}
type LogServiceTypeInput interface {
	pulumi.Input

	ToLogServiceTypeOutput() LogServiceTypeOutput
	ToLogServiceTypeOutputWithContext(context.Context) LogServiceTypeOutput
}

// LogService is the Schema for the logservices API
type LogServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// LogServiceSpec defines the desired state of LogService
	Spec LogServiceSpecPtrInput `pulumi:"spec"`
}

func (LogServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceType)(nil)).Elem()
}

func (i LogServiceTypeArgs) ToLogServiceTypeOutput() LogServiceTypeOutput {
	return i.ToLogServiceTypeOutputWithContext(context.Background())
}

func (i LogServiceTypeArgs) ToLogServiceTypeOutputWithContext(ctx context.Context) LogServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceTypeOutput)
}

// LogService is the Schema for the logservices API
type LogServiceTypeOutput struct{ *pulumi.OutputState }

func (LogServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceType)(nil)).Elem()
}

func (o LogServiceTypeOutput) ToLogServiceTypeOutput() LogServiceTypeOutput {
	return o
}

func (o LogServiceTypeOutput) ToLogServiceTypeOutputWithContext(ctx context.Context) LogServiceTypeOutput {
	return o
}

func (o LogServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o LogServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o LogServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v LogServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// LogServiceSpec defines the desired state of LogService
func (o LogServiceTypeOutput) Spec() LogServiceSpecPtrOutput {
	return o.ApplyT(func(v LogServiceType) *LogServiceSpec { return v.Spec }).(LogServiceSpecPtrOutput)
}

type LogServiceMetadata struct {
}

// LogServiceMetadataInput is an input type that accepts LogServiceMetadataArgs and LogServiceMetadataOutput values.
// You can construct a concrete instance of `LogServiceMetadataInput` via:
//
//          LogServiceMetadataArgs{...}
type LogServiceMetadataInput interface {
	pulumi.Input

	ToLogServiceMetadataOutput() LogServiceMetadataOutput
	ToLogServiceMetadataOutputWithContext(context.Context) LogServiceMetadataOutput
}

type LogServiceMetadataArgs struct {
}

func (LogServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceMetadata)(nil)).Elem()
}

func (i LogServiceMetadataArgs) ToLogServiceMetadataOutput() LogServiceMetadataOutput {
	return i.ToLogServiceMetadataOutputWithContext(context.Background())
}

func (i LogServiceMetadataArgs) ToLogServiceMetadataOutputWithContext(ctx context.Context) LogServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceMetadataOutput)
}

type LogServiceMetadataOutput struct{ *pulumi.OutputState }

func (LogServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceMetadata)(nil)).Elem()
}

func (o LogServiceMetadataOutput) ToLogServiceMetadataOutput() LogServiceMetadataOutput {
	return o
}

func (o LogServiceMetadataOutput) ToLogServiceMetadataOutputWithContext(ctx context.Context) LogServiceMetadataOutput {
	return o
}

// LogServiceSpec defines the desired state of LogService
type LogServiceSpec struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id            interface{}                  `pulumi:"ambassador_id"`
	Driver                   *string                      `pulumi:"driver"`
	Driver_config            *LogServiceSpecDriver_config `pulumi:"driver_config"`
	Flush_interval_byte_size *int                         `pulumi:"flush_interval_byte_size"`
	Flush_interval_time      *int                         `pulumi:"flush_interval_time"`
	Grpc                     *bool                        `pulumi:"grpc"`
	Service                  *string                      `pulumi:"service"`
}

// LogServiceSpecInput is an input type that accepts LogServiceSpecArgs and LogServiceSpecOutput values.
// You can construct a concrete instance of `LogServiceSpecInput` via:
//
//          LogServiceSpecArgs{...}
type LogServiceSpecInput interface {
	pulumi.Input

	ToLogServiceSpecOutput() LogServiceSpecOutput
	ToLogServiceSpecOutputWithContext(context.Context) LogServiceSpecOutput
}

// LogServiceSpec defines the desired state of LogService
type LogServiceSpecArgs struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id            pulumi.Input                        `pulumi:"ambassador_id"`
	Driver                   pulumi.StringPtrInput               `pulumi:"driver"`
	Driver_config            LogServiceSpecDriver_configPtrInput `pulumi:"driver_config"`
	Flush_interval_byte_size pulumi.IntPtrInput                  `pulumi:"flush_interval_byte_size"`
	Flush_interval_time      pulumi.IntPtrInput                  `pulumi:"flush_interval_time"`
	Grpc                     pulumi.BoolPtrInput                 `pulumi:"grpc"`
	Service                  pulumi.StringPtrInput               `pulumi:"service"`
}

func (LogServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceSpec)(nil)).Elem()
}

func (i LogServiceSpecArgs) ToLogServiceSpecOutput() LogServiceSpecOutput {
	return i.ToLogServiceSpecOutputWithContext(context.Background())
}

func (i LogServiceSpecArgs) ToLogServiceSpecOutputWithContext(ctx context.Context) LogServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecOutput)
}

func (i LogServiceSpecArgs) ToLogServiceSpecPtrOutput() LogServiceSpecPtrOutput {
	return i.ToLogServiceSpecPtrOutputWithContext(context.Background())
}

func (i LogServiceSpecArgs) ToLogServiceSpecPtrOutputWithContext(ctx context.Context) LogServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecOutput).ToLogServiceSpecPtrOutputWithContext(ctx)
}

// LogServiceSpecPtrInput is an input type that accepts LogServiceSpecArgs, LogServiceSpecPtr and LogServiceSpecPtrOutput values.
// You can construct a concrete instance of `LogServiceSpecPtrInput` via:
//
//          LogServiceSpecArgs{...}
//
//  or:
//
//          nil
type LogServiceSpecPtrInput interface {
	pulumi.Input

	ToLogServiceSpecPtrOutput() LogServiceSpecPtrOutput
	ToLogServiceSpecPtrOutputWithContext(context.Context) LogServiceSpecPtrOutput
}

type logServiceSpecPtrType LogServiceSpecArgs

func LogServiceSpecPtr(v *LogServiceSpecArgs) LogServiceSpecPtrInput {
	return (*logServiceSpecPtrType)(v)
}

func (*logServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogServiceSpec)(nil)).Elem()
}

func (i *logServiceSpecPtrType) ToLogServiceSpecPtrOutput() LogServiceSpecPtrOutput {
	return i.ToLogServiceSpecPtrOutputWithContext(context.Background())
}

func (i *logServiceSpecPtrType) ToLogServiceSpecPtrOutputWithContext(ctx context.Context) LogServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecPtrOutput)
}

// LogServiceSpec defines the desired state of LogService
type LogServiceSpecOutput struct{ *pulumi.OutputState }

func (LogServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceSpec)(nil)).Elem()
}

func (o LogServiceSpecOutput) ToLogServiceSpecOutput() LogServiceSpecOutput {
	return o
}

func (o LogServiceSpecOutput) ToLogServiceSpecOutputWithContext(ctx context.Context) LogServiceSpecOutput {
	return o
}

func (o LogServiceSpecOutput) ToLogServiceSpecPtrOutput() LogServiceSpecPtrOutput {
	return o.ToLogServiceSpecPtrOutputWithContext(context.Background())
}

func (o LogServiceSpecOutput) ToLogServiceSpecPtrOutputWithContext(ctx context.Context) LogServiceSpecPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *LogServiceSpec {
		return &v
	}).(LogServiceSpecPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o LogServiceSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v LogServiceSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o LogServiceSpecOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

func (o LogServiceSpecOutput) Driver_config() LogServiceSpecDriver_configPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *LogServiceSpecDriver_config { return v.Driver_config }).(LogServiceSpecDriver_configPtrOutput)
}

func (o LogServiceSpecOutput) Flush_interval_byte_size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *int { return v.Flush_interval_byte_size }).(pulumi.IntPtrOutput)
}

func (o LogServiceSpecOutput) Flush_interval_time() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *int { return v.Flush_interval_time }).(pulumi.IntPtrOutput)
}

func (o LogServiceSpecOutput) Grpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *bool { return v.Grpc }).(pulumi.BoolPtrOutput)
}

func (o LogServiceSpecOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogServiceSpec) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type LogServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (LogServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogServiceSpec)(nil)).Elem()
}

func (o LogServiceSpecPtrOutput) ToLogServiceSpecPtrOutput() LogServiceSpecPtrOutput {
	return o
}

func (o LogServiceSpecPtrOutput) ToLogServiceSpecPtrOutputWithContext(ctx context.Context) LogServiceSpecPtrOutput {
	return o
}

func (o LogServiceSpecPtrOutput) Elem() LogServiceSpecOutput {
	return o.ApplyT(func(v *LogServiceSpec) LogServiceSpec { return *v }).(LogServiceSpecOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o LogServiceSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogServiceSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o LogServiceSpecPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

func (o LogServiceSpecPtrOutput) Driver_config() LogServiceSpecDriver_configPtrOutput {
	return o.ApplyT(func(v *LogServiceSpec) *LogServiceSpecDriver_config {
		if v == nil {
			return nil
		}
		return v.Driver_config
	}).(LogServiceSpecDriver_configPtrOutput)
}

func (o LogServiceSpecPtrOutput) Flush_interval_byte_size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.Flush_interval_byte_size
	}).(pulumi.IntPtrOutput)
}

func (o LogServiceSpecPtrOutput) Flush_interval_time() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.Flush_interval_time
	}).(pulumi.IntPtrOutput)
}

func (o LogServiceSpecPtrOutput) Grpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(pulumi.BoolPtrOutput)
}

func (o LogServiceSpecPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

type LogServiceSpecDriver_config struct {
	Additional_log_headers []LogServiceSpecDriver_configAdditional_log_headers `pulumi:"additional_log_headers"`
}

// LogServiceSpecDriver_configInput is an input type that accepts LogServiceSpecDriver_configArgs and LogServiceSpecDriver_configOutput values.
// You can construct a concrete instance of `LogServiceSpecDriver_configInput` via:
//
//          LogServiceSpecDriver_configArgs{...}
type LogServiceSpecDriver_configInput interface {
	pulumi.Input

	ToLogServiceSpecDriver_configOutput() LogServiceSpecDriver_configOutput
	ToLogServiceSpecDriver_configOutputWithContext(context.Context) LogServiceSpecDriver_configOutput
}

type LogServiceSpecDriver_configArgs struct {
	Additional_log_headers LogServiceSpecDriver_configAdditional_log_headersArrayInput `pulumi:"additional_log_headers"`
}

func (LogServiceSpecDriver_configArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceSpecDriver_config)(nil)).Elem()
}

func (i LogServiceSpecDriver_configArgs) ToLogServiceSpecDriver_configOutput() LogServiceSpecDriver_configOutput {
	return i.ToLogServiceSpecDriver_configOutputWithContext(context.Background())
}

func (i LogServiceSpecDriver_configArgs) ToLogServiceSpecDriver_configOutputWithContext(ctx context.Context) LogServiceSpecDriver_configOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecDriver_configOutput)
}

func (i LogServiceSpecDriver_configArgs) ToLogServiceSpecDriver_configPtrOutput() LogServiceSpecDriver_configPtrOutput {
	return i.ToLogServiceSpecDriver_configPtrOutputWithContext(context.Background())
}

func (i LogServiceSpecDriver_configArgs) ToLogServiceSpecDriver_configPtrOutputWithContext(ctx context.Context) LogServiceSpecDriver_configPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecDriver_configOutput).ToLogServiceSpecDriver_configPtrOutputWithContext(ctx)
}

// LogServiceSpecDriver_configPtrInput is an input type that accepts LogServiceSpecDriver_configArgs, LogServiceSpecDriver_configPtr and LogServiceSpecDriver_configPtrOutput values.
// You can construct a concrete instance of `LogServiceSpecDriver_configPtrInput` via:
//
//          LogServiceSpecDriver_configArgs{...}
//
//  or:
//
//          nil
type LogServiceSpecDriver_configPtrInput interface {
	pulumi.Input

	ToLogServiceSpecDriver_configPtrOutput() LogServiceSpecDriver_configPtrOutput
	ToLogServiceSpecDriver_configPtrOutputWithContext(context.Context) LogServiceSpecDriver_configPtrOutput
}

type logServiceSpecDriver_configPtrType LogServiceSpecDriver_configArgs

func LogServiceSpecDriver_configPtr(v *LogServiceSpecDriver_configArgs) LogServiceSpecDriver_configPtrInput {
	return (*logServiceSpecDriver_configPtrType)(v)
}

func (*logServiceSpecDriver_configPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogServiceSpecDriver_config)(nil)).Elem()
}

func (i *logServiceSpecDriver_configPtrType) ToLogServiceSpecDriver_configPtrOutput() LogServiceSpecDriver_configPtrOutput {
	return i.ToLogServiceSpecDriver_configPtrOutputWithContext(context.Background())
}

func (i *logServiceSpecDriver_configPtrType) ToLogServiceSpecDriver_configPtrOutputWithContext(ctx context.Context) LogServiceSpecDriver_configPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecDriver_configPtrOutput)
}

type LogServiceSpecDriver_configOutput struct{ *pulumi.OutputState }

func (LogServiceSpecDriver_configOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceSpecDriver_config)(nil)).Elem()
}

func (o LogServiceSpecDriver_configOutput) ToLogServiceSpecDriver_configOutput() LogServiceSpecDriver_configOutput {
	return o
}

func (o LogServiceSpecDriver_configOutput) ToLogServiceSpecDriver_configOutputWithContext(ctx context.Context) LogServiceSpecDriver_configOutput {
	return o
}

func (o LogServiceSpecDriver_configOutput) ToLogServiceSpecDriver_configPtrOutput() LogServiceSpecDriver_configPtrOutput {
	return o.ToLogServiceSpecDriver_configPtrOutputWithContext(context.Background())
}

func (o LogServiceSpecDriver_configOutput) ToLogServiceSpecDriver_configPtrOutputWithContext(ctx context.Context) LogServiceSpecDriver_configPtrOutput {
	return o.ApplyT(func(v LogServiceSpecDriver_config) *LogServiceSpecDriver_config {
		return &v
	}).(LogServiceSpecDriver_configPtrOutput)
}
func (o LogServiceSpecDriver_configOutput) Additional_log_headers() LogServiceSpecDriver_configAdditional_log_headersArrayOutput {
	return o.ApplyT(func(v LogServiceSpecDriver_config) []LogServiceSpecDriver_configAdditional_log_headers {
		return v.Additional_log_headers
	}).(LogServiceSpecDriver_configAdditional_log_headersArrayOutput)
}

type LogServiceSpecDriver_configPtrOutput struct{ *pulumi.OutputState }

func (LogServiceSpecDriver_configPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogServiceSpecDriver_config)(nil)).Elem()
}

func (o LogServiceSpecDriver_configPtrOutput) ToLogServiceSpecDriver_configPtrOutput() LogServiceSpecDriver_configPtrOutput {
	return o
}

func (o LogServiceSpecDriver_configPtrOutput) ToLogServiceSpecDriver_configPtrOutputWithContext(ctx context.Context) LogServiceSpecDriver_configPtrOutput {
	return o
}

func (o LogServiceSpecDriver_configPtrOutput) Elem() LogServiceSpecDriver_configOutput {
	return o.ApplyT(func(v *LogServiceSpecDriver_config) LogServiceSpecDriver_config { return *v }).(LogServiceSpecDriver_configOutput)
}

func (o LogServiceSpecDriver_configPtrOutput) Additional_log_headers() LogServiceSpecDriver_configAdditional_log_headersArrayOutput {
	return o.ApplyT(func(v *LogServiceSpecDriver_config) []LogServiceSpecDriver_configAdditional_log_headers {
		if v == nil {
			return nil
		}
		return v.Additional_log_headers
	}).(LogServiceSpecDriver_configAdditional_log_headersArrayOutput)
}

type LogServiceSpecDriver_configAdditional_log_headers struct {
	During_request  *bool   `pulumi:"during_request"`
	During_response *bool   `pulumi:"during_response"`
	During_trailer  *bool   `pulumi:"during_trailer"`
	Header_name     *string `pulumi:"header_name"`
}

// LogServiceSpecDriver_configAdditional_log_headersInput is an input type that accepts LogServiceSpecDriver_configAdditional_log_headersArgs and LogServiceSpecDriver_configAdditional_log_headersOutput values.
// You can construct a concrete instance of `LogServiceSpecDriver_configAdditional_log_headersInput` via:
//
//          LogServiceSpecDriver_configAdditional_log_headersArgs{...}
type LogServiceSpecDriver_configAdditional_log_headersInput interface {
	pulumi.Input

	ToLogServiceSpecDriver_configAdditional_log_headersOutput() LogServiceSpecDriver_configAdditional_log_headersOutput
	ToLogServiceSpecDriver_configAdditional_log_headersOutputWithContext(context.Context) LogServiceSpecDriver_configAdditional_log_headersOutput
}

type LogServiceSpecDriver_configAdditional_log_headersArgs struct {
	During_request  pulumi.BoolPtrInput   `pulumi:"during_request"`
	During_response pulumi.BoolPtrInput   `pulumi:"during_response"`
	During_trailer  pulumi.BoolPtrInput   `pulumi:"during_trailer"`
	Header_name     pulumi.StringPtrInput `pulumi:"header_name"`
}

func (LogServiceSpecDriver_configAdditional_log_headersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceSpecDriver_configAdditional_log_headers)(nil)).Elem()
}

func (i LogServiceSpecDriver_configAdditional_log_headersArgs) ToLogServiceSpecDriver_configAdditional_log_headersOutput() LogServiceSpecDriver_configAdditional_log_headersOutput {
	return i.ToLogServiceSpecDriver_configAdditional_log_headersOutputWithContext(context.Background())
}

func (i LogServiceSpecDriver_configAdditional_log_headersArgs) ToLogServiceSpecDriver_configAdditional_log_headersOutputWithContext(ctx context.Context) LogServiceSpecDriver_configAdditional_log_headersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecDriver_configAdditional_log_headersOutput)
}

// LogServiceSpecDriver_configAdditional_log_headersArrayInput is an input type that accepts LogServiceSpecDriver_configAdditional_log_headersArray and LogServiceSpecDriver_configAdditional_log_headersArrayOutput values.
// You can construct a concrete instance of `LogServiceSpecDriver_configAdditional_log_headersArrayInput` via:
//
//          LogServiceSpecDriver_configAdditional_log_headersArray{ LogServiceSpecDriver_configAdditional_log_headersArgs{...} }
type LogServiceSpecDriver_configAdditional_log_headersArrayInput interface {
	pulumi.Input

	ToLogServiceSpecDriver_configAdditional_log_headersArrayOutput() LogServiceSpecDriver_configAdditional_log_headersArrayOutput
	ToLogServiceSpecDriver_configAdditional_log_headersArrayOutputWithContext(context.Context) LogServiceSpecDriver_configAdditional_log_headersArrayOutput
}

type LogServiceSpecDriver_configAdditional_log_headersArray []LogServiceSpecDriver_configAdditional_log_headersInput

func (LogServiceSpecDriver_configAdditional_log_headersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogServiceSpecDriver_configAdditional_log_headers)(nil)).Elem()
}

func (i LogServiceSpecDriver_configAdditional_log_headersArray) ToLogServiceSpecDriver_configAdditional_log_headersArrayOutput() LogServiceSpecDriver_configAdditional_log_headersArrayOutput {
	return i.ToLogServiceSpecDriver_configAdditional_log_headersArrayOutputWithContext(context.Background())
}

func (i LogServiceSpecDriver_configAdditional_log_headersArray) ToLogServiceSpecDriver_configAdditional_log_headersArrayOutputWithContext(ctx context.Context) LogServiceSpecDriver_configAdditional_log_headersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceSpecDriver_configAdditional_log_headersArrayOutput)
}

type LogServiceSpecDriver_configAdditional_log_headersOutput struct{ *pulumi.OutputState }

func (LogServiceSpecDriver_configAdditional_log_headersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogServiceSpecDriver_configAdditional_log_headers)(nil)).Elem()
}

func (o LogServiceSpecDriver_configAdditional_log_headersOutput) ToLogServiceSpecDriver_configAdditional_log_headersOutput() LogServiceSpecDriver_configAdditional_log_headersOutput {
	return o
}

func (o LogServiceSpecDriver_configAdditional_log_headersOutput) ToLogServiceSpecDriver_configAdditional_log_headersOutputWithContext(ctx context.Context) LogServiceSpecDriver_configAdditional_log_headersOutput {
	return o
}

func (o LogServiceSpecDriver_configAdditional_log_headersOutput) During_request() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogServiceSpecDriver_configAdditional_log_headers) *bool { return v.During_request }).(pulumi.BoolPtrOutput)
}

func (o LogServiceSpecDriver_configAdditional_log_headersOutput) During_response() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogServiceSpecDriver_configAdditional_log_headers) *bool { return v.During_response }).(pulumi.BoolPtrOutput)
}

func (o LogServiceSpecDriver_configAdditional_log_headersOutput) During_trailer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogServiceSpecDriver_configAdditional_log_headers) *bool { return v.During_trailer }).(pulumi.BoolPtrOutput)
}

func (o LogServiceSpecDriver_configAdditional_log_headersOutput) Header_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogServiceSpecDriver_configAdditional_log_headers) *string { return v.Header_name }).(pulumi.StringPtrOutput)
}

type LogServiceSpecDriver_configAdditional_log_headersArrayOutput struct{ *pulumi.OutputState }

func (LogServiceSpecDriver_configAdditional_log_headersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogServiceSpecDriver_configAdditional_log_headers)(nil)).Elem()
}

func (o LogServiceSpecDriver_configAdditional_log_headersArrayOutput) ToLogServiceSpecDriver_configAdditional_log_headersArrayOutput() LogServiceSpecDriver_configAdditional_log_headersArrayOutput {
	return o
}

func (o LogServiceSpecDriver_configAdditional_log_headersArrayOutput) ToLogServiceSpecDriver_configAdditional_log_headersArrayOutputWithContext(ctx context.Context) LogServiceSpecDriver_configAdditional_log_headersArrayOutput {
	return o
}

func (o LogServiceSpecDriver_configAdditional_log_headersArrayOutput) Index(i pulumi.IntInput) LogServiceSpecDriver_configAdditional_log_headersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogServiceSpecDriver_configAdditional_log_headers {
		return vs[0].([]LogServiceSpecDriver_configAdditional_log_headers)[vs[1].(int)]
	}).(LogServiceSpecDriver_configAdditional_log_headersOutput)
}

// Mapping is the Schema for the mappings API
type MappingType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MappingSpec defines the desired state of Mapping
	Spec *MappingSpec `pulumi:"spec"`
	// MappingStatus defines the observed state of Mapping
	Status *MappingStatus `pulumi:"status"`
}

// MappingTypeInput is an input type that accepts MappingTypeArgs and MappingTypeOutput values.
// You can construct a concrete instance of `MappingTypeInput` via:
//
//          MappingTypeArgs{...}
type MappingTypeInput interface {
	pulumi.Input

	ToMappingTypeOutput() MappingTypeOutput
	ToMappingTypeOutputWithContext(context.Context) MappingTypeOutput
}

// Mapping is the Schema for the mappings API
type MappingTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// MappingSpec defines the desired state of Mapping
	Spec MappingSpecPtrInput `pulumi:"spec"`
	// MappingStatus defines the observed state of Mapping
	Status MappingStatusPtrInput `pulumi:"status"`
}

func (MappingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingType)(nil)).Elem()
}

func (i MappingTypeArgs) ToMappingTypeOutput() MappingTypeOutput {
	return i.ToMappingTypeOutputWithContext(context.Background())
}

func (i MappingTypeArgs) ToMappingTypeOutputWithContext(ctx context.Context) MappingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingTypeOutput)
}

// Mapping is the Schema for the mappings API
type MappingTypeOutput struct{ *pulumi.OutputState }

func (MappingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingType)(nil)).Elem()
}

func (o MappingTypeOutput) ToMappingTypeOutput() MappingTypeOutput {
	return o
}

func (o MappingTypeOutput) ToMappingTypeOutputWithContext(ctx context.Context) MappingTypeOutput {
	return o
}

func (o MappingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o MappingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o MappingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v MappingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// MappingSpec defines the desired state of Mapping
func (o MappingTypeOutput) Spec() MappingSpecPtrOutput {
	return o.ApplyT(func(v MappingType) *MappingSpec { return v.Spec }).(MappingSpecPtrOutput)
}

// MappingStatus defines the observed state of Mapping
func (o MappingTypeOutput) Status() MappingStatusPtrOutput {
	return o.ApplyT(func(v MappingType) *MappingStatus { return v.Status }).(MappingStatusPtrOutput)
}

type MappingMetadata struct {
}

// MappingMetadataInput is an input type that accepts MappingMetadataArgs and MappingMetadataOutput values.
// You can construct a concrete instance of `MappingMetadataInput` via:
//
//          MappingMetadataArgs{...}
type MappingMetadataInput interface {
	pulumi.Input

	ToMappingMetadataOutput() MappingMetadataOutput
	ToMappingMetadataOutputWithContext(context.Context) MappingMetadataOutput
}

type MappingMetadataArgs struct {
}

func (MappingMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingMetadata)(nil)).Elem()
}

func (i MappingMetadataArgs) ToMappingMetadataOutput() MappingMetadataOutput {
	return i.ToMappingMetadataOutputWithContext(context.Background())
}

func (i MappingMetadataArgs) ToMappingMetadataOutputWithContext(ctx context.Context) MappingMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingMetadataOutput)
}

type MappingMetadataOutput struct{ *pulumi.OutputState }

func (MappingMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingMetadata)(nil)).Elem()
}

func (o MappingMetadataOutput) ToMappingMetadataOutput() MappingMetadataOutput {
	return o
}

func (o MappingMetadataOutput) ToMappingMetadataOutputWithContext(ctx context.Context) MappingMetadataOutput {
	return o
}

// MappingSpec defines the desired state of Mapping
type MappingSpec struct {
	Add_linkerd_headers  *bool                  `pulumi:"add_linkerd_headers"`
	Add_request_headers  map[string]interface{} `pulumi:"add_request_headers"`
	Add_response_headers map[string]interface{} `pulumi:"add_response_headers"`
	// A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings.
	//  [1]: https://tools.ietf.org/html/rfc7230#section-6.7
	//  For example, if your upstream service supports WebSockets, you would write
	//     allow_upgrade:    - websocket
	//  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write
	//     allow_upgrade:    - spdy/3.1
	Allow_upgrade []string `pulumi:"allow_upgrade"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id           interface{}       `pulumi:"ambassador_id"`
	Auth_context_extensions map[string]string `pulumi:"auth_context_extensions"`
	Auto_host_rewrite       *bool             `pulumi:"auto_host_rewrite"`
	Bypass_auth             *bool             `pulumi:"bypass_auth"`
	// If true, bypasses any `error_response_overrides` set on the Ambassador module.
	Bypass_error_response_overrides    *bool                         `pulumi:"bypass_error_response_overrides"`
	Case_sensitive                     *bool                         `pulumi:"case_sensitive"`
	Circuit_breakers                   []MappingSpecCircuit_breakers `pulumi:"circuit_breakers"`
	Cluster_idle_timeout_ms            *int                          `pulumi:"cluster_idle_timeout_ms"`
	Cluster_max_connection_lifetime_ms *int                          `pulumi:"cluster_max_connection_lifetime_ms"`
	Cluster_tag                        *string                       `pulumi:"cluster_tag"`
	Connect_timeout_ms                 *int                          `pulumi:"connect_timeout_ms"`
	Cors                               *MappingSpecCors              `pulumi:"cors"`
	// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
	Docs        *MappingSpecDocs `pulumi:"docs"`
	Enable_ipv4 *bool            `pulumi:"enable_ipv4"`
	Enable_ipv6 *bool            `pulumi:"enable_ipv6"`
	// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
	Envoy_override map[string]interface{} `pulumi:"envoy_override"`
	// Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
	Error_response_overrides []MappingSpecError_response_overrides `pulumi:"error_response_overrides"`
	Grpc                     *bool                                 `pulumi:"grpc"`
	Headers                  map[string]interface{}                `pulumi:"headers"`
	Host                     *string                               `pulumi:"host"`
	Host_redirect            *bool                                 `pulumi:"host_redirect"`
	Host_regex               *bool                                 `pulumi:"host_regex"`
	Host_rewrite             *string                               `pulumi:"host_rewrite"`
	Idle_timeout_ms          *int                                  `pulumi:"idle_timeout_ms"`
	Keepalive                *MappingSpecKeepalive                 `pulumi:"keepalive"`
	// A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
	Labels            map[string][]map[string][]interface{} `pulumi:"labels"`
	Load_balancer     *MappingSpecLoad_balancer             `pulumi:"load_balancer"`
	Method            *string                               `pulumi:"method"`
	Method_regex      *bool                                 `pulumi:"method_regex"`
	Modules           []map[string]interface{}              `pulumi:"modules"`
	Outlier_detection *string                               `pulumi:"outlier_detection"`
	// Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
	Path_redirect *string `pulumi:"path_redirect"`
	Precedence    *int    `pulumi:"precedence"`
	Prefix        string  `pulumi:"prefix"`
	Prefix_exact  *bool   `pulumi:"prefix_exact"`
	// Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
	Prefix_redirect  *string                `pulumi:"prefix_redirect"`
	Prefix_regex     *bool                  `pulumi:"prefix_regex"`
	Priority         *string                `pulumi:"priority"`
	Query_parameters map[string]interface{} `pulumi:"query_parameters"`
	// The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
	Redirect_response_code *int                   `pulumi:"redirect_response_code"`
	Regex_headers          map[string]interface{} `pulumi:"regex_headers"`
	Regex_query_parameters map[string]interface{} `pulumi:"regex_query_parameters"`
	// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
	Regex_redirect map[string]interface{} `pulumi:"regex_redirect"`
	Regex_rewrite  map[string]interface{} `pulumi:"regex_rewrite"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Remove_request_headers interface{} `pulumi:"remove_request_headers"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Remove_response_headers interface{}              `pulumi:"remove_response_headers"`
	Resolver                *string                  `pulumi:"resolver"`
	Retry_policy            *MappingSpecRetry_policy `pulumi:"retry_policy"`
	Rewrite                 *string                  `pulumi:"rewrite"`
	Service                 string                   `pulumi:"service"`
	Shadow                  *bool                    `pulumi:"shadow"`
	// The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
	Timeout_ms *int `pulumi:"timeout_ms"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls interface{} `pulumi:"tls"`
	// use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]`
	Use_websocket *bool `pulumi:"use_websocket"`
	Weight        *int  `pulumi:"weight"`
}

// MappingSpecInput is an input type that accepts MappingSpecArgs and MappingSpecOutput values.
// You can construct a concrete instance of `MappingSpecInput` via:
//
//          MappingSpecArgs{...}
type MappingSpecInput interface {
	pulumi.Input

	ToMappingSpecOutput() MappingSpecOutput
	ToMappingSpecOutputWithContext(context.Context) MappingSpecOutput
}

// MappingSpec defines the desired state of Mapping
type MappingSpecArgs struct {
	Add_linkerd_headers  pulumi.BoolPtrInput `pulumi:"add_linkerd_headers"`
	Add_request_headers  pulumi.MapInput     `pulumi:"add_request_headers"`
	Add_response_headers pulumi.MapInput     `pulumi:"add_response_headers"`
	// A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings.
	//  [1]: https://tools.ietf.org/html/rfc7230#section-6.7
	//  For example, if your upstream service supports WebSockets, you would write
	//     allow_upgrade:    - websocket
	//  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write
	//     allow_upgrade:    - spdy/3.1
	Allow_upgrade pulumi.StringArrayInput `pulumi:"allow_upgrade"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id           pulumi.Input          `pulumi:"ambassador_id"`
	Auth_context_extensions pulumi.StringMapInput `pulumi:"auth_context_extensions"`
	Auto_host_rewrite       pulumi.BoolPtrInput   `pulumi:"auto_host_rewrite"`
	Bypass_auth             pulumi.BoolPtrInput   `pulumi:"bypass_auth"`
	// If true, bypasses any `error_response_overrides` set on the Ambassador module.
	Bypass_error_response_overrides    pulumi.BoolPtrInput                   `pulumi:"bypass_error_response_overrides"`
	Case_sensitive                     pulumi.BoolPtrInput                   `pulumi:"case_sensitive"`
	Circuit_breakers                   MappingSpecCircuit_breakersArrayInput `pulumi:"circuit_breakers"`
	Cluster_idle_timeout_ms            pulumi.IntPtrInput                    `pulumi:"cluster_idle_timeout_ms"`
	Cluster_max_connection_lifetime_ms pulumi.IntPtrInput                    `pulumi:"cluster_max_connection_lifetime_ms"`
	Cluster_tag                        pulumi.StringPtrInput                 `pulumi:"cluster_tag"`
	Connect_timeout_ms                 pulumi.IntPtrInput                    `pulumi:"connect_timeout_ms"`
	Cors                               MappingSpecCorsPtrInput               `pulumi:"cors"`
	// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
	Docs        MappingSpecDocsPtrInput `pulumi:"docs"`
	Enable_ipv4 pulumi.BoolPtrInput     `pulumi:"enable_ipv4"`
	Enable_ipv6 pulumi.BoolPtrInput     `pulumi:"enable_ipv6"`
	// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
	Envoy_override pulumi.MapInput `pulumi:"envoy_override"`
	// Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
	Error_response_overrides MappingSpecError_response_overridesArrayInput `pulumi:"error_response_overrides"`
	Grpc                     pulumi.BoolPtrInput                           `pulumi:"grpc"`
	Headers                  pulumi.MapInput                               `pulumi:"headers"`
	Host                     pulumi.StringPtrInput                         `pulumi:"host"`
	Host_redirect            pulumi.BoolPtrInput                           `pulumi:"host_redirect"`
	Host_regex               pulumi.BoolPtrInput                           `pulumi:"host_regex"`
	Host_rewrite             pulumi.StringPtrInput                         `pulumi:"host_rewrite"`
	Idle_timeout_ms          pulumi.IntPtrInput                            `pulumi:"idle_timeout_ms"`
	Keepalive                MappingSpecKeepalivePtrInput                  `pulumi:"keepalive"`
	// A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
	Labels            pulumi.ArrayMapArrayMapInput     `pulumi:"labels"`
	Load_balancer     MappingSpecLoad_balancerPtrInput `pulumi:"load_balancer"`
	Method            pulumi.StringPtrInput            `pulumi:"method"`
	Method_regex      pulumi.BoolPtrInput              `pulumi:"method_regex"`
	Modules           pulumi.MapArrayInput             `pulumi:"modules"`
	Outlier_detection pulumi.StringPtrInput            `pulumi:"outlier_detection"`
	// Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
	Path_redirect pulumi.StringPtrInput `pulumi:"path_redirect"`
	Precedence    pulumi.IntPtrInput    `pulumi:"precedence"`
	Prefix        pulumi.StringInput    `pulumi:"prefix"`
	Prefix_exact  pulumi.BoolPtrInput   `pulumi:"prefix_exact"`
	// Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
	Prefix_redirect  pulumi.StringPtrInput `pulumi:"prefix_redirect"`
	Prefix_regex     pulumi.BoolPtrInput   `pulumi:"prefix_regex"`
	Priority         pulumi.StringPtrInput `pulumi:"priority"`
	Query_parameters pulumi.MapInput       `pulumi:"query_parameters"`
	// The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
	Redirect_response_code pulumi.IntPtrInput `pulumi:"redirect_response_code"`
	Regex_headers          pulumi.MapInput    `pulumi:"regex_headers"`
	Regex_query_parameters pulumi.MapInput    `pulumi:"regex_query_parameters"`
	// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
	Regex_redirect pulumi.MapInput `pulumi:"regex_redirect"`
	Regex_rewrite  pulumi.MapInput `pulumi:"regex_rewrite"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Remove_request_headers pulumi.Input `pulumi:"remove_request_headers"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Remove_response_headers pulumi.Input                    `pulumi:"remove_response_headers"`
	Resolver                pulumi.StringPtrInput           `pulumi:"resolver"`
	Retry_policy            MappingSpecRetry_policyPtrInput `pulumi:"retry_policy"`
	Rewrite                 pulumi.StringPtrInput           `pulumi:"rewrite"`
	Service                 pulumi.StringInput              `pulumi:"service"`
	Shadow                  pulumi.BoolPtrInput             `pulumi:"shadow"`
	// The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
	Timeout_ms pulumi.IntPtrInput `pulumi:"timeout_ms"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls pulumi.Input `pulumi:"tls"`
	// use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]`
	Use_websocket pulumi.BoolPtrInput `pulumi:"use_websocket"`
	Weight        pulumi.IntPtrInput  `pulumi:"weight"`
}

func (MappingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpec)(nil)).Elem()
}

func (i MappingSpecArgs) ToMappingSpecOutput() MappingSpecOutput {
	return i.ToMappingSpecOutputWithContext(context.Background())
}

func (i MappingSpecArgs) ToMappingSpecOutputWithContext(ctx context.Context) MappingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecOutput)
}

func (i MappingSpecArgs) ToMappingSpecPtrOutput() MappingSpecPtrOutput {
	return i.ToMappingSpecPtrOutputWithContext(context.Background())
}

func (i MappingSpecArgs) ToMappingSpecPtrOutputWithContext(ctx context.Context) MappingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecOutput).ToMappingSpecPtrOutputWithContext(ctx)
}

// MappingSpecPtrInput is an input type that accepts MappingSpecArgs, MappingSpecPtr and MappingSpecPtrOutput values.
// You can construct a concrete instance of `MappingSpecPtrInput` via:
//
//          MappingSpecArgs{...}
//
//  or:
//
//          nil
type MappingSpecPtrInput interface {
	pulumi.Input

	ToMappingSpecPtrOutput() MappingSpecPtrOutput
	ToMappingSpecPtrOutputWithContext(context.Context) MappingSpecPtrOutput
}

type mappingSpecPtrType MappingSpecArgs

func MappingSpecPtr(v *MappingSpecArgs) MappingSpecPtrInput {
	return (*mappingSpecPtrType)(v)
}

func (*mappingSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpec)(nil)).Elem()
}

func (i *mappingSpecPtrType) ToMappingSpecPtrOutput() MappingSpecPtrOutput {
	return i.ToMappingSpecPtrOutputWithContext(context.Background())
}

func (i *mappingSpecPtrType) ToMappingSpecPtrOutputWithContext(ctx context.Context) MappingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecPtrOutput)
}

// MappingSpec defines the desired state of Mapping
type MappingSpecOutput struct{ *pulumi.OutputState }

func (MappingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpec)(nil)).Elem()
}

func (o MappingSpecOutput) ToMappingSpecOutput() MappingSpecOutput {
	return o
}

func (o MappingSpecOutput) ToMappingSpecOutputWithContext(ctx context.Context) MappingSpecOutput {
	return o
}

func (o MappingSpecOutput) ToMappingSpecPtrOutput() MappingSpecPtrOutput {
	return o.ToMappingSpecPtrOutputWithContext(context.Background())
}

func (o MappingSpecOutput) ToMappingSpecPtrOutputWithContext(ctx context.Context) MappingSpecPtrOutput {
	return o.ApplyT(func(v MappingSpec) *MappingSpec {
		return &v
	}).(MappingSpecPtrOutput)
}
func (o MappingSpecOutput) Add_linkerd_headers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Add_linkerd_headers }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Add_request_headers() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Add_request_headers }).(pulumi.MapOutput)
}

func (o MappingSpecOutput) Add_response_headers() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Add_response_headers }).(pulumi.MapOutput)
}

// A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings.
//  [1]: https://tools.ietf.org/html/rfc7230#section-6.7
//  For example, if your upstream service supports WebSockets, you would write
//     allow_upgrade:    - websocket
//  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write
//     allow_upgrade:    - spdy/3.1
func (o MappingSpecOutput) Allow_upgrade() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MappingSpec) []string { return v.Allow_upgrade }).(pulumi.StringArrayOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o MappingSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o MappingSpecOutput) Auth_context_extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]string { return v.Auth_context_extensions }).(pulumi.StringMapOutput)
}

func (o MappingSpecOutput) Auto_host_rewrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Auto_host_rewrite }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Bypass_auth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Bypass_auth }).(pulumi.BoolPtrOutput)
}

// If true, bypasses any `error_response_overrides` set on the Ambassador module.
func (o MappingSpecOutput) Bypass_error_response_overrides() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Bypass_error_response_overrides }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Case_sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Case_sensitive }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Circuit_breakers() MappingSpecCircuit_breakersArrayOutput {
	return o.ApplyT(func(v MappingSpec) []MappingSpecCircuit_breakers { return v.Circuit_breakers }).(MappingSpecCircuit_breakersArrayOutput)
}

func (o MappingSpecOutput) Cluster_idle_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Cluster_idle_timeout_ms }).(pulumi.IntPtrOutput)
}

func (o MappingSpecOutput) Cluster_max_connection_lifetime_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Cluster_max_connection_lifetime_ms }).(pulumi.IntPtrOutput)
}

func (o MappingSpecOutput) Cluster_tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Cluster_tag }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Connect_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Connect_timeout_ms }).(pulumi.IntPtrOutput)
}

func (o MappingSpecOutput) Cors() MappingSpecCorsPtrOutput {
	return o.ApplyT(func(v MappingSpec) *MappingSpecCors { return v.Cors }).(MappingSpecCorsPtrOutput)
}

// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
func (o MappingSpecOutput) Docs() MappingSpecDocsPtrOutput {
	return o.ApplyT(func(v MappingSpec) *MappingSpecDocs { return v.Docs }).(MappingSpecDocsPtrOutput)
}

func (o MappingSpecOutput) Enable_ipv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Enable_ipv4 }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Enable_ipv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Enable_ipv6 }).(pulumi.BoolPtrOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
func (o MappingSpecOutput) Envoy_override() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Envoy_override }).(pulumi.MapOutput)
}

// Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
func (o MappingSpecOutput) Error_response_overrides() MappingSpecError_response_overridesArrayOutput {
	return o.ApplyT(func(v MappingSpec) []MappingSpecError_response_overrides { return v.Error_response_overrides }).(MappingSpecError_response_overridesArrayOutput)
}

func (o MappingSpecOutput) Grpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Grpc }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

func (o MappingSpecOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Host_redirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Host_redirect }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Host_regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Host_regex }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Host_rewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Host_rewrite }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Idle_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Idle_timeout_ms }).(pulumi.IntPtrOutput)
}

func (o MappingSpecOutput) Keepalive() MappingSpecKeepalivePtrOutput {
	return o.ApplyT(func(v MappingSpec) *MappingSpecKeepalive { return v.Keepalive }).(MappingSpecKeepalivePtrOutput)
}

// A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
func (o MappingSpecOutput) Labels() pulumi.ArrayMapArrayMapOutput {
	return o.ApplyT(func(v MappingSpec) map[string][]map[string][]interface{} { return v.Labels }).(pulumi.ArrayMapArrayMapOutput)
}

func (o MappingSpecOutput) Load_balancer() MappingSpecLoad_balancerPtrOutput {
	return o.ApplyT(func(v MappingSpec) *MappingSpecLoad_balancer { return v.Load_balancer }).(MappingSpecLoad_balancerPtrOutput)
}

func (o MappingSpecOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Method_regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Method_regex }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Modules() pulumi.MapArrayOutput {
	return o.ApplyT(func(v MappingSpec) []map[string]interface{} { return v.Modules }).(pulumi.MapArrayOutput)
}

func (o MappingSpecOutput) Outlier_detection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Outlier_detection }).(pulumi.StringPtrOutput)
}

// Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
func (o MappingSpecOutput) Path_redirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Path_redirect }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Precedence }).(pulumi.IntPtrOutput)
}

func (o MappingSpecOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v MappingSpec) string { return v.Prefix }).(pulumi.StringOutput)
}

func (o MappingSpecOutput) Prefix_exact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Prefix_exact }).(pulumi.BoolPtrOutput)
}

// Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
func (o MappingSpecOutput) Prefix_redirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Prefix_redirect }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Prefix_regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Prefix_regex }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Query_parameters() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Query_parameters }).(pulumi.MapOutput)
}

// The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
func (o MappingSpecOutput) Redirect_response_code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Redirect_response_code }).(pulumi.IntPtrOutput)
}

func (o MappingSpecOutput) Regex_headers() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Regex_headers }).(pulumi.MapOutput)
}

func (o MappingSpecOutput) Regex_query_parameters() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Regex_query_parameters }).(pulumi.MapOutput)
}

// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
func (o MappingSpecOutput) Regex_redirect() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Regex_redirect }).(pulumi.MapOutput)
}

func (o MappingSpecOutput) Regex_rewrite() pulumi.MapOutput {
	return o.ApplyT(func(v MappingSpec) map[string]interface{} { return v.Regex_rewrite }).(pulumi.MapOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecOutput) Remove_request_headers() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpec) interface{} { return v.Remove_request_headers }).(pulumi.AnyOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecOutput) Remove_response_headers() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpec) interface{} { return v.Remove_response_headers }).(pulumi.AnyOutput)
}

func (o MappingSpecOutput) Resolver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Resolver }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Retry_policy() MappingSpecRetry_policyPtrOutput {
	return o.ApplyT(func(v MappingSpec) *MappingSpecRetry_policy { return v.Retry_policy }).(MappingSpecRetry_policyPtrOutput)
}

func (o MappingSpecOutput) Rewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpec) *string { return v.Rewrite }).(pulumi.StringPtrOutput)
}

func (o MappingSpecOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v MappingSpec) string { return v.Service }).(pulumi.StringOutput)
}

func (o MappingSpecOutput) Shadow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Shadow }).(pulumi.BoolPtrOutput)
}

// The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
func (o MappingSpecOutput) Timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Timeout_ms }).(pulumi.IntPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o MappingSpecOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpec) interface{} { return v.Tls }).(pulumi.AnyOutput)
}

// use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]`
func (o MappingSpecOutput) Use_websocket() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpec) *bool { return v.Use_websocket }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpec) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type MappingSpecPtrOutput struct{ *pulumi.OutputState }

func (MappingSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpec)(nil)).Elem()
}

func (o MappingSpecPtrOutput) ToMappingSpecPtrOutput() MappingSpecPtrOutput {
	return o
}

func (o MappingSpecPtrOutput) ToMappingSpecPtrOutputWithContext(ctx context.Context) MappingSpecPtrOutput {
	return o
}

func (o MappingSpecPtrOutput) Elem() MappingSpecOutput {
	return o.ApplyT(func(v *MappingSpec) MappingSpec { return *v }).(MappingSpecOutput)
}

func (o MappingSpecPtrOutput) Add_linkerd_headers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Add_linkerd_headers
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Add_request_headers() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Add_request_headers
	}).(pulumi.MapOutput)
}

func (o MappingSpecPtrOutput) Add_response_headers() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Add_response_headers
	}).(pulumi.MapOutput)
}

// A case-insensitive list of the non-HTTP protocols to allow "upgrading" to from HTTP via the "Connection: upgrade" mechanism[1].  After the upgrade, Ambassador does not interpret the traffic, and behaves similarly to how it does for TCPMappings.
//  [1]: https://tools.ietf.org/html/rfc7230#section-6.7
//  For example, if your upstream service supports WebSockets, you would write
//     allow_upgrade:    - websocket
//  Or if your upstream service supports upgrading from HTTP to SPDY (as the Kubernetes apiserver does for `kubectl exec` functionality), you would write
//     allow_upgrade:    - spdy/3.1
func (o MappingSpecPtrOutput) Allow_upgrade() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MappingSpec) []string {
		if v == nil {
			return nil
		}
		return v.Allow_upgrade
	}).(pulumi.StringArrayOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o MappingSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o MappingSpecPtrOutput) Auth_context_extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Auth_context_extensions
	}).(pulumi.StringMapOutput)
}

func (o MappingSpecPtrOutput) Auto_host_rewrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Auto_host_rewrite
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Bypass_auth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Bypass_auth
	}).(pulumi.BoolPtrOutput)
}

// If true, bypasses any `error_response_overrides` set on the Ambassador module.
func (o MappingSpecPtrOutput) Bypass_error_response_overrides() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Bypass_error_response_overrides
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Case_sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Case_sensitive
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Circuit_breakers() MappingSpecCircuit_breakersArrayOutput {
	return o.ApplyT(func(v *MappingSpec) []MappingSpecCircuit_breakers {
		if v == nil {
			return nil
		}
		return v.Circuit_breakers
	}).(MappingSpecCircuit_breakersArrayOutput)
}

func (o MappingSpecPtrOutput) Cluster_idle_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Cluster_idle_timeout_ms
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecPtrOutput) Cluster_max_connection_lifetime_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Cluster_max_connection_lifetime_ms
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecPtrOutput) Cluster_tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Cluster_tag
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Connect_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Connect_timeout_ms
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecPtrOutput) Cors() MappingSpecCorsPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *MappingSpecCors {
		if v == nil {
			return nil
		}
		return v.Cors
	}).(MappingSpecCorsPtrOutput)
}

// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
func (o MappingSpecPtrOutput) Docs() MappingSpecDocsPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *MappingSpecDocs {
		if v == nil {
			return nil
		}
		return v.Docs
	}).(MappingSpecDocsPtrOutput)
}

func (o MappingSpecPtrOutput) Enable_ipv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Enable_ipv4
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Enable_ipv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Enable_ipv6
	}).(pulumi.BoolPtrOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
func (o MappingSpecPtrOutput) Envoy_override() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Envoy_override
	}).(pulumi.MapOutput)
}

// Error response overrides for this Mapping. Replaces all of the `error_response_overrides` set on the Ambassador module, if any.
func (o MappingSpecPtrOutput) Error_response_overrides() MappingSpecError_response_overridesArrayOutput {
	return o.ApplyT(func(v *MappingSpec) []MappingSpecError_response_overrides {
		if v == nil {
			return nil
		}
		return v.Error_response_overrides
	}).(MappingSpecError_response_overridesArrayOutput)
}

func (o MappingSpecPtrOutput) Grpc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.MapOutput)
}

func (o MappingSpecPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Host_redirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Host_redirect
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Host_regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Host_regex
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Host_rewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Host_rewrite
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Idle_timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Idle_timeout_ms
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecPtrOutput) Keepalive() MappingSpecKeepalivePtrOutput {
	return o.ApplyT(func(v *MappingSpec) *MappingSpecKeepalive {
		if v == nil {
			return nil
		}
		return v.Keepalive
	}).(MappingSpecKeepalivePtrOutput)
}

// A DomainMap is the overall Mapping.spec.Labels type. It maps domains (kind of like namespaces for Mapping labels) to arrays of label groups.
func (o MappingSpecPtrOutput) Labels() pulumi.ArrayMapArrayMapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string][]map[string][]interface{} {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.ArrayMapArrayMapOutput)
}

func (o MappingSpecPtrOutput) Load_balancer() MappingSpecLoad_balancerPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *MappingSpecLoad_balancer {
		if v == nil {
			return nil
		}
		return v.Load_balancer
	}).(MappingSpecLoad_balancerPtrOutput)
}

func (o MappingSpecPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Method_regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Method_regex
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Modules() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *MappingSpec) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Modules
	}).(pulumi.MapArrayOutput)
}

func (o MappingSpecPtrOutput) Outlier_detection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Outlier_detection
	}).(pulumi.StringPtrOutput)
}

// Path replacement to use when generating an HTTP redirect. Used with `host_redirect`.
func (o MappingSpecPtrOutput) Path_redirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Path_redirect
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Precedence
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Prefix
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Prefix_exact() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Prefix_exact
	}).(pulumi.BoolPtrOutput)
}

// Prefix rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
func (o MappingSpecPtrOutput) Prefix_redirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Prefix_redirect
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Prefix_regex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Prefix_regex
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Query_parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Query_parameters
	}).(pulumi.MapOutput)
}

// The response code to use when generating an HTTP redirect. Defaults to 301. Used with `host_redirect`.
func (o MappingSpecPtrOutput) Redirect_response_code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Redirect_response_code
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecPtrOutput) Regex_headers() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Regex_headers
	}).(pulumi.MapOutput)
}

func (o MappingSpecPtrOutput) Regex_query_parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Regex_query_parameters
	}).(pulumi.MapOutput)
}

// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
func (o MappingSpecPtrOutput) Regex_redirect() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Regex_redirect
	}).(pulumi.MapOutput)
}

func (o MappingSpecPtrOutput) Regex_rewrite() pulumi.MapOutput {
	return o.ApplyT(func(v *MappingSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Regex_rewrite
	}).(pulumi.MapOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecPtrOutput) Remove_request_headers() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Remove_request_headers
	}).(pulumi.AnyOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecPtrOutput) Remove_response_headers() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Remove_response_headers
	}).(pulumi.AnyOutput)
}

func (o MappingSpecPtrOutput) Resolver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Resolver
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Retry_policy() MappingSpecRetry_policyPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *MappingSpecRetry_policy {
		if v == nil {
			return nil
		}
		return v.Retry_policy
	}).(MappingSpecRetry_policyPtrOutput)
}

func (o MappingSpecPtrOutput) Rewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Rewrite
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecPtrOutput) Shadow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Shadow
	}).(pulumi.BoolPtrOutput)
}

// The timeout for requests that use this Mapping. Overrides `cluster_request_timeout_ms` set on the Ambassador Module, if it exists.
func (o MappingSpecPtrOutput) Timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Timeout_ms
	}).(pulumi.IntPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o MappingSpecPtrOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.AnyOutput)
}

// use_websocket is deprecated, and is equivlaent to setting `allow_upgrade: ["websocket"]`
func (o MappingSpecPtrOutput) Use_websocket() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Use_websocket
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type MappingSpecAdd_request_headers struct {
}

// MappingSpecAdd_request_headersInput is an input type that accepts MappingSpecAdd_request_headersArgs and MappingSpecAdd_request_headersOutput values.
// You can construct a concrete instance of `MappingSpecAdd_request_headersInput` via:
//
//          MappingSpecAdd_request_headersArgs{...}
type MappingSpecAdd_request_headersInput interface {
	pulumi.Input

	ToMappingSpecAdd_request_headersOutput() MappingSpecAdd_request_headersOutput
	ToMappingSpecAdd_request_headersOutputWithContext(context.Context) MappingSpecAdd_request_headersOutput
}

type MappingSpecAdd_request_headersArgs struct {
}

func (MappingSpecAdd_request_headersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_request_headers)(nil)).Elem()
}

func (i MappingSpecAdd_request_headersArgs) ToMappingSpecAdd_request_headersOutput() MappingSpecAdd_request_headersOutput {
	return i.ToMappingSpecAdd_request_headersOutputWithContext(context.Background())
}

func (i MappingSpecAdd_request_headersArgs) ToMappingSpecAdd_request_headersOutputWithContext(ctx context.Context) MappingSpecAdd_request_headersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecAdd_request_headersOutput)
}

type MappingSpecAdd_request_headersOutput struct{ *pulumi.OutputState }

func (MappingSpecAdd_request_headersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_request_headers)(nil)).Elem()
}

func (o MappingSpecAdd_request_headersOutput) ToMappingSpecAdd_request_headersOutput() MappingSpecAdd_request_headersOutput {
	return o
}

func (o MappingSpecAdd_request_headersOutput) ToMappingSpecAdd_request_headersOutputWithContext(ctx context.Context) MappingSpecAdd_request_headersOutput {
	return o
}

type MappingSpecAdd_request_headersOneOf2 struct {
}

// MappingSpecAdd_request_headersOneOf2Input is an input type that accepts MappingSpecAdd_request_headersOneOf2Args and MappingSpecAdd_request_headersOneOf2Output values.
// You can construct a concrete instance of `MappingSpecAdd_request_headersOneOf2Input` via:
//
//          MappingSpecAdd_request_headersOneOf2Args{...}
type MappingSpecAdd_request_headersOneOf2Input interface {
	pulumi.Input

	ToMappingSpecAdd_request_headersOneOf2Output() MappingSpecAdd_request_headersOneOf2Output
	ToMappingSpecAdd_request_headersOneOf2OutputWithContext(context.Context) MappingSpecAdd_request_headersOneOf2Output
}

type MappingSpecAdd_request_headersOneOf2Args struct {
}

func (MappingSpecAdd_request_headersOneOf2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_request_headersOneOf2)(nil)).Elem()
}

func (i MappingSpecAdd_request_headersOneOf2Args) ToMappingSpecAdd_request_headersOneOf2Output() MappingSpecAdd_request_headersOneOf2Output {
	return i.ToMappingSpecAdd_request_headersOneOf2OutputWithContext(context.Background())
}

func (i MappingSpecAdd_request_headersOneOf2Args) ToMappingSpecAdd_request_headersOneOf2OutputWithContext(ctx context.Context) MappingSpecAdd_request_headersOneOf2Output {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecAdd_request_headersOneOf2Output)
}

type MappingSpecAdd_request_headersOneOf2Output struct{ *pulumi.OutputState }

func (MappingSpecAdd_request_headersOneOf2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_request_headersOneOf2)(nil)).Elem()
}

func (o MappingSpecAdd_request_headersOneOf2Output) ToMappingSpecAdd_request_headersOneOf2Output() MappingSpecAdd_request_headersOneOf2Output {
	return o
}

func (o MappingSpecAdd_request_headersOneOf2Output) ToMappingSpecAdd_request_headersOneOf2OutputWithContext(ctx context.Context) MappingSpecAdd_request_headersOneOf2Output {
	return o
}

type MappingSpecAdd_response_headers struct {
}

// MappingSpecAdd_response_headersInput is an input type that accepts MappingSpecAdd_response_headersArgs and MappingSpecAdd_response_headersOutput values.
// You can construct a concrete instance of `MappingSpecAdd_response_headersInput` via:
//
//          MappingSpecAdd_response_headersArgs{...}
type MappingSpecAdd_response_headersInput interface {
	pulumi.Input

	ToMappingSpecAdd_response_headersOutput() MappingSpecAdd_response_headersOutput
	ToMappingSpecAdd_response_headersOutputWithContext(context.Context) MappingSpecAdd_response_headersOutput
}

type MappingSpecAdd_response_headersArgs struct {
}

func (MappingSpecAdd_response_headersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_response_headers)(nil)).Elem()
}

func (i MappingSpecAdd_response_headersArgs) ToMappingSpecAdd_response_headersOutput() MappingSpecAdd_response_headersOutput {
	return i.ToMappingSpecAdd_response_headersOutputWithContext(context.Background())
}

func (i MappingSpecAdd_response_headersArgs) ToMappingSpecAdd_response_headersOutputWithContext(ctx context.Context) MappingSpecAdd_response_headersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecAdd_response_headersOutput)
}

type MappingSpecAdd_response_headersOutput struct{ *pulumi.OutputState }

func (MappingSpecAdd_response_headersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_response_headers)(nil)).Elem()
}

func (o MappingSpecAdd_response_headersOutput) ToMappingSpecAdd_response_headersOutput() MappingSpecAdd_response_headersOutput {
	return o
}

func (o MappingSpecAdd_response_headersOutput) ToMappingSpecAdd_response_headersOutputWithContext(ctx context.Context) MappingSpecAdd_response_headersOutput {
	return o
}

type MappingSpecAdd_response_headersOneOf2 struct {
}

// MappingSpecAdd_response_headersOneOf2Input is an input type that accepts MappingSpecAdd_response_headersOneOf2Args and MappingSpecAdd_response_headersOneOf2Output values.
// You can construct a concrete instance of `MappingSpecAdd_response_headersOneOf2Input` via:
//
//          MappingSpecAdd_response_headersOneOf2Args{...}
type MappingSpecAdd_response_headersOneOf2Input interface {
	pulumi.Input

	ToMappingSpecAdd_response_headersOneOf2Output() MappingSpecAdd_response_headersOneOf2Output
	ToMappingSpecAdd_response_headersOneOf2OutputWithContext(context.Context) MappingSpecAdd_response_headersOneOf2Output
}

type MappingSpecAdd_response_headersOneOf2Args struct {
}

func (MappingSpecAdd_response_headersOneOf2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_response_headersOneOf2)(nil)).Elem()
}

func (i MappingSpecAdd_response_headersOneOf2Args) ToMappingSpecAdd_response_headersOneOf2Output() MappingSpecAdd_response_headersOneOf2Output {
	return i.ToMappingSpecAdd_response_headersOneOf2OutputWithContext(context.Background())
}

func (i MappingSpecAdd_response_headersOneOf2Args) ToMappingSpecAdd_response_headersOneOf2OutputWithContext(ctx context.Context) MappingSpecAdd_response_headersOneOf2Output {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecAdd_response_headersOneOf2Output)
}

type MappingSpecAdd_response_headersOneOf2Output struct{ *pulumi.OutputState }

func (MappingSpecAdd_response_headersOneOf2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAdd_response_headersOneOf2)(nil)).Elem()
}

func (o MappingSpecAdd_response_headersOneOf2Output) ToMappingSpecAdd_response_headersOneOf2Output() MappingSpecAdd_response_headersOneOf2Output {
	return o
}

func (o MappingSpecAdd_response_headersOneOf2Output) ToMappingSpecAdd_response_headersOneOf2OutputWithContext(ctx context.Context) MappingSpecAdd_response_headersOneOf2Output {
	return o
}

type MappingSpecAuth_context_extensions struct {
}

// MappingSpecAuth_context_extensionsInput is an input type that accepts MappingSpecAuth_context_extensionsArgs and MappingSpecAuth_context_extensionsOutput values.
// You can construct a concrete instance of `MappingSpecAuth_context_extensionsInput` via:
//
//          MappingSpecAuth_context_extensionsArgs{...}
type MappingSpecAuth_context_extensionsInput interface {
	pulumi.Input

	ToMappingSpecAuth_context_extensionsOutput() MappingSpecAuth_context_extensionsOutput
	ToMappingSpecAuth_context_extensionsOutputWithContext(context.Context) MappingSpecAuth_context_extensionsOutput
}

type MappingSpecAuth_context_extensionsArgs struct {
}

func (MappingSpecAuth_context_extensionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAuth_context_extensions)(nil)).Elem()
}

func (i MappingSpecAuth_context_extensionsArgs) ToMappingSpecAuth_context_extensionsOutput() MappingSpecAuth_context_extensionsOutput {
	return i.ToMappingSpecAuth_context_extensionsOutputWithContext(context.Background())
}

func (i MappingSpecAuth_context_extensionsArgs) ToMappingSpecAuth_context_extensionsOutputWithContext(ctx context.Context) MappingSpecAuth_context_extensionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecAuth_context_extensionsOutput)
}

type MappingSpecAuth_context_extensionsOutput struct{ *pulumi.OutputState }

func (MappingSpecAuth_context_extensionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecAuth_context_extensions)(nil)).Elem()
}

func (o MappingSpecAuth_context_extensionsOutput) ToMappingSpecAuth_context_extensionsOutput() MappingSpecAuth_context_extensionsOutput {
	return o
}

func (o MappingSpecAuth_context_extensionsOutput) ToMappingSpecAuth_context_extensionsOutputWithContext(ctx context.Context) MappingSpecAuth_context_extensionsOutput {
	return o
}

type MappingSpecCircuit_breakers struct {
	Max_connections      *int    `pulumi:"max_connections"`
	Max_pending_requests *int    `pulumi:"max_pending_requests"`
	Max_requests         *int    `pulumi:"max_requests"`
	Max_retries          *int    `pulumi:"max_retries"`
	Priority             *string `pulumi:"priority"`
}

// MappingSpecCircuit_breakersInput is an input type that accepts MappingSpecCircuit_breakersArgs and MappingSpecCircuit_breakersOutput values.
// You can construct a concrete instance of `MappingSpecCircuit_breakersInput` via:
//
//          MappingSpecCircuit_breakersArgs{...}
type MappingSpecCircuit_breakersInput interface {
	pulumi.Input

	ToMappingSpecCircuit_breakersOutput() MappingSpecCircuit_breakersOutput
	ToMappingSpecCircuit_breakersOutputWithContext(context.Context) MappingSpecCircuit_breakersOutput
}

type MappingSpecCircuit_breakersArgs struct {
	Max_connections      pulumi.IntPtrInput    `pulumi:"max_connections"`
	Max_pending_requests pulumi.IntPtrInput    `pulumi:"max_pending_requests"`
	Max_requests         pulumi.IntPtrInput    `pulumi:"max_requests"`
	Max_retries          pulumi.IntPtrInput    `pulumi:"max_retries"`
	Priority             pulumi.StringPtrInput `pulumi:"priority"`
}

func (MappingSpecCircuit_breakersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecCircuit_breakers)(nil)).Elem()
}

func (i MappingSpecCircuit_breakersArgs) ToMappingSpecCircuit_breakersOutput() MappingSpecCircuit_breakersOutput {
	return i.ToMappingSpecCircuit_breakersOutputWithContext(context.Background())
}

func (i MappingSpecCircuit_breakersArgs) ToMappingSpecCircuit_breakersOutputWithContext(ctx context.Context) MappingSpecCircuit_breakersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecCircuit_breakersOutput)
}

// MappingSpecCircuit_breakersArrayInput is an input type that accepts MappingSpecCircuit_breakersArray and MappingSpecCircuit_breakersArrayOutput values.
// You can construct a concrete instance of `MappingSpecCircuit_breakersArrayInput` via:
//
//          MappingSpecCircuit_breakersArray{ MappingSpecCircuit_breakersArgs{...} }
type MappingSpecCircuit_breakersArrayInput interface {
	pulumi.Input

	ToMappingSpecCircuit_breakersArrayOutput() MappingSpecCircuit_breakersArrayOutput
	ToMappingSpecCircuit_breakersArrayOutputWithContext(context.Context) MappingSpecCircuit_breakersArrayOutput
}

type MappingSpecCircuit_breakersArray []MappingSpecCircuit_breakersInput

func (MappingSpecCircuit_breakersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MappingSpecCircuit_breakers)(nil)).Elem()
}

func (i MappingSpecCircuit_breakersArray) ToMappingSpecCircuit_breakersArrayOutput() MappingSpecCircuit_breakersArrayOutput {
	return i.ToMappingSpecCircuit_breakersArrayOutputWithContext(context.Background())
}

func (i MappingSpecCircuit_breakersArray) ToMappingSpecCircuit_breakersArrayOutputWithContext(ctx context.Context) MappingSpecCircuit_breakersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecCircuit_breakersArrayOutput)
}

type MappingSpecCircuit_breakersOutput struct{ *pulumi.OutputState }

func (MappingSpecCircuit_breakersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecCircuit_breakers)(nil)).Elem()
}

func (o MappingSpecCircuit_breakersOutput) ToMappingSpecCircuit_breakersOutput() MappingSpecCircuit_breakersOutput {
	return o
}

func (o MappingSpecCircuit_breakersOutput) ToMappingSpecCircuit_breakersOutputWithContext(ctx context.Context) MappingSpecCircuit_breakersOutput {
	return o
}

func (o MappingSpecCircuit_breakersOutput) Max_connections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecCircuit_breakers) *int { return v.Max_connections }).(pulumi.IntPtrOutput)
}

func (o MappingSpecCircuit_breakersOutput) Max_pending_requests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecCircuit_breakers) *int { return v.Max_pending_requests }).(pulumi.IntPtrOutput)
}

func (o MappingSpecCircuit_breakersOutput) Max_requests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecCircuit_breakers) *int { return v.Max_requests }).(pulumi.IntPtrOutput)
}

func (o MappingSpecCircuit_breakersOutput) Max_retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecCircuit_breakers) *int { return v.Max_retries }).(pulumi.IntPtrOutput)
}

func (o MappingSpecCircuit_breakersOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecCircuit_breakers) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

type MappingSpecCircuit_breakersArrayOutput struct{ *pulumi.OutputState }

func (MappingSpecCircuit_breakersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MappingSpecCircuit_breakers)(nil)).Elem()
}

func (o MappingSpecCircuit_breakersArrayOutput) ToMappingSpecCircuit_breakersArrayOutput() MappingSpecCircuit_breakersArrayOutput {
	return o
}

func (o MappingSpecCircuit_breakersArrayOutput) ToMappingSpecCircuit_breakersArrayOutputWithContext(ctx context.Context) MappingSpecCircuit_breakersArrayOutput {
	return o
}

func (o MappingSpecCircuit_breakersArrayOutput) Index(i pulumi.IntInput) MappingSpecCircuit_breakersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MappingSpecCircuit_breakers {
		return vs[0].([]MappingSpecCircuit_breakers)[vs[1].(int)]
	}).(MappingSpecCircuit_breakersOutput)
}

type MappingSpecCors struct {
	Credentials *bool `pulumi:"credentials"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Exposed_headers interface{} `pulumi:"exposed_headers"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Headers interface{} `pulumi:"headers"`
	Max_age *string     `pulumi:"max_age"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Methods interface{} `pulumi:"methods"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Origins interface{} `pulumi:"origins"`
}

// MappingSpecCorsInput is an input type that accepts MappingSpecCorsArgs and MappingSpecCorsOutput values.
// You can construct a concrete instance of `MappingSpecCorsInput` via:
//
//          MappingSpecCorsArgs{...}
type MappingSpecCorsInput interface {
	pulumi.Input

	ToMappingSpecCorsOutput() MappingSpecCorsOutput
	ToMappingSpecCorsOutputWithContext(context.Context) MappingSpecCorsOutput
}

type MappingSpecCorsArgs struct {
	Credentials pulumi.BoolPtrInput `pulumi:"credentials"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Exposed_headers pulumi.Input `pulumi:"exposed_headers"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Headers pulumi.Input          `pulumi:"headers"`
	Max_age pulumi.StringPtrInput `pulumi:"max_age"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Methods pulumi.Input `pulumi:"methods"`
	// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
	Origins pulumi.Input `pulumi:"origins"`
}

func (MappingSpecCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecCors)(nil)).Elem()
}

func (i MappingSpecCorsArgs) ToMappingSpecCorsOutput() MappingSpecCorsOutput {
	return i.ToMappingSpecCorsOutputWithContext(context.Background())
}

func (i MappingSpecCorsArgs) ToMappingSpecCorsOutputWithContext(ctx context.Context) MappingSpecCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecCorsOutput)
}

func (i MappingSpecCorsArgs) ToMappingSpecCorsPtrOutput() MappingSpecCorsPtrOutput {
	return i.ToMappingSpecCorsPtrOutputWithContext(context.Background())
}

func (i MappingSpecCorsArgs) ToMappingSpecCorsPtrOutputWithContext(ctx context.Context) MappingSpecCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecCorsOutput).ToMappingSpecCorsPtrOutputWithContext(ctx)
}

// MappingSpecCorsPtrInput is an input type that accepts MappingSpecCorsArgs, MappingSpecCorsPtr and MappingSpecCorsPtrOutput values.
// You can construct a concrete instance of `MappingSpecCorsPtrInput` via:
//
//          MappingSpecCorsArgs{...}
//
//  or:
//
//          nil
type MappingSpecCorsPtrInput interface {
	pulumi.Input

	ToMappingSpecCorsPtrOutput() MappingSpecCorsPtrOutput
	ToMappingSpecCorsPtrOutputWithContext(context.Context) MappingSpecCorsPtrOutput
}

type mappingSpecCorsPtrType MappingSpecCorsArgs

func MappingSpecCorsPtr(v *MappingSpecCorsArgs) MappingSpecCorsPtrInput {
	return (*mappingSpecCorsPtrType)(v)
}

func (*mappingSpecCorsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecCors)(nil)).Elem()
}

func (i *mappingSpecCorsPtrType) ToMappingSpecCorsPtrOutput() MappingSpecCorsPtrOutput {
	return i.ToMappingSpecCorsPtrOutputWithContext(context.Background())
}

func (i *mappingSpecCorsPtrType) ToMappingSpecCorsPtrOutputWithContext(ctx context.Context) MappingSpecCorsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecCorsPtrOutput)
}

type MappingSpecCorsOutput struct{ *pulumi.OutputState }

func (MappingSpecCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecCors)(nil)).Elem()
}

func (o MappingSpecCorsOutput) ToMappingSpecCorsOutput() MappingSpecCorsOutput {
	return o
}

func (o MappingSpecCorsOutput) ToMappingSpecCorsOutputWithContext(ctx context.Context) MappingSpecCorsOutput {
	return o
}

func (o MappingSpecCorsOutput) ToMappingSpecCorsPtrOutput() MappingSpecCorsPtrOutput {
	return o.ToMappingSpecCorsPtrOutputWithContext(context.Background())
}

func (o MappingSpecCorsOutput) ToMappingSpecCorsPtrOutputWithContext(ctx context.Context) MappingSpecCorsPtrOutput {
	return o.ApplyT(func(v MappingSpecCors) *MappingSpecCors {
		return &v
	}).(MappingSpecCorsPtrOutput)
}
func (o MappingSpecCorsOutput) Credentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpecCors) *bool { return v.Credentials }).(pulumi.BoolPtrOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsOutput) Exposed_headers() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpecCors) interface{} { return v.Exposed_headers }).(pulumi.AnyOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsOutput) Headers() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpecCors) interface{} { return v.Headers }).(pulumi.AnyOutput)
}

func (o MappingSpecCorsOutput) Max_age() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecCors) *string { return v.Max_age }).(pulumi.StringPtrOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsOutput) Methods() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpecCors) interface{} { return v.Methods }).(pulumi.AnyOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsOutput) Origins() pulumi.AnyOutput {
	return o.ApplyT(func(v MappingSpecCors) interface{} { return v.Origins }).(pulumi.AnyOutput)
}

type MappingSpecCorsPtrOutput struct{ *pulumi.OutputState }

func (MappingSpecCorsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecCors)(nil)).Elem()
}

func (o MappingSpecCorsPtrOutput) ToMappingSpecCorsPtrOutput() MappingSpecCorsPtrOutput {
	return o
}

func (o MappingSpecCorsPtrOutput) ToMappingSpecCorsPtrOutputWithContext(ctx context.Context) MappingSpecCorsPtrOutput {
	return o
}

func (o MappingSpecCorsPtrOutput) Elem() MappingSpecCorsOutput {
	return o.ApplyT(func(v *MappingSpecCors) MappingSpecCors { return *v }).(MappingSpecCorsOutput)
}

func (o MappingSpecCorsPtrOutput) Credentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpecCors) *bool {
		if v == nil {
			return nil
		}
		return v.Credentials
	}).(pulumi.BoolPtrOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsPtrOutput) Exposed_headers() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpecCors) interface{} {
		if v == nil {
			return nil
		}
		return v.Exposed_headers
	}).(pulumi.AnyOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsPtrOutput) Headers() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpecCors) interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.AnyOutput)
}

func (o MappingSpecCorsPtrOutput) Max_age() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecCors) *string {
		if v == nil {
			return nil
		}
		return v.Max_age
	}).(pulumi.StringPtrOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsPtrOutput) Methods() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpecCors) interface{} {
		if v == nil {
			return nil
		}
		return v.Methods
	}).(pulumi.AnyOutput)
}

// StringOrStringList is just what it says on the tin, but note that it will always marshal as a list of strings right now.
func (o MappingSpecCorsPtrOutput) Origins() pulumi.AnyOutput {
	return o.ApplyT(func(v *MappingSpecCors) interface{} {
		if v == nil {
			return nil
		}
		return v.Origins
	}).(pulumi.AnyOutput)
}

// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
type MappingSpecDocs struct {
	Display_name *string `pulumi:"display_name"`
	Ignored      *bool   `pulumi:"ignored"`
	Path         *string `pulumi:"path"`
	Url          *string `pulumi:"url"`
}

// MappingSpecDocsInput is an input type that accepts MappingSpecDocsArgs and MappingSpecDocsOutput values.
// You can construct a concrete instance of `MappingSpecDocsInput` via:
//
//          MappingSpecDocsArgs{...}
type MappingSpecDocsInput interface {
	pulumi.Input

	ToMappingSpecDocsOutput() MappingSpecDocsOutput
	ToMappingSpecDocsOutputWithContext(context.Context) MappingSpecDocsOutput
}

// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
type MappingSpecDocsArgs struct {
	Display_name pulumi.StringPtrInput `pulumi:"display_name"`
	Ignored      pulumi.BoolPtrInput   `pulumi:"ignored"`
	Path         pulumi.StringPtrInput `pulumi:"path"`
	Url          pulumi.StringPtrInput `pulumi:"url"`
}

func (MappingSpecDocsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecDocs)(nil)).Elem()
}

func (i MappingSpecDocsArgs) ToMappingSpecDocsOutput() MappingSpecDocsOutput {
	return i.ToMappingSpecDocsOutputWithContext(context.Background())
}

func (i MappingSpecDocsArgs) ToMappingSpecDocsOutputWithContext(ctx context.Context) MappingSpecDocsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecDocsOutput)
}

func (i MappingSpecDocsArgs) ToMappingSpecDocsPtrOutput() MappingSpecDocsPtrOutput {
	return i.ToMappingSpecDocsPtrOutputWithContext(context.Background())
}

func (i MappingSpecDocsArgs) ToMappingSpecDocsPtrOutputWithContext(ctx context.Context) MappingSpecDocsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecDocsOutput).ToMappingSpecDocsPtrOutputWithContext(ctx)
}

// MappingSpecDocsPtrInput is an input type that accepts MappingSpecDocsArgs, MappingSpecDocsPtr and MappingSpecDocsPtrOutput values.
// You can construct a concrete instance of `MappingSpecDocsPtrInput` via:
//
//          MappingSpecDocsArgs{...}
//
//  or:
//
//          nil
type MappingSpecDocsPtrInput interface {
	pulumi.Input

	ToMappingSpecDocsPtrOutput() MappingSpecDocsPtrOutput
	ToMappingSpecDocsPtrOutputWithContext(context.Context) MappingSpecDocsPtrOutput
}

type mappingSpecDocsPtrType MappingSpecDocsArgs

func MappingSpecDocsPtr(v *MappingSpecDocsArgs) MappingSpecDocsPtrInput {
	return (*mappingSpecDocsPtrType)(v)
}

func (*mappingSpecDocsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecDocs)(nil)).Elem()
}

func (i *mappingSpecDocsPtrType) ToMappingSpecDocsPtrOutput() MappingSpecDocsPtrOutput {
	return i.ToMappingSpecDocsPtrOutputWithContext(context.Background())
}

func (i *mappingSpecDocsPtrType) ToMappingSpecDocsPtrOutputWithContext(ctx context.Context) MappingSpecDocsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecDocsPtrOutput)
}

// DocsInfo provides some extra information about the docs for the Mapping (used by the Dev Portal)
type MappingSpecDocsOutput struct{ *pulumi.OutputState }

func (MappingSpecDocsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecDocs)(nil)).Elem()
}

func (o MappingSpecDocsOutput) ToMappingSpecDocsOutput() MappingSpecDocsOutput {
	return o
}

func (o MappingSpecDocsOutput) ToMappingSpecDocsOutputWithContext(ctx context.Context) MappingSpecDocsOutput {
	return o
}

func (o MappingSpecDocsOutput) ToMappingSpecDocsPtrOutput() MappingSpecDocsPtrOutput {
	return o.ToMappingSpecDocsPtrOutputWithContext(context.Background())
}

func (o MappingSpecDocsOutput) ToMappingSpecDocsPtrOutputWithContext(ctx context.Context) MappingSpecDocsPtrOutput {
	return o.ApplyT(func(v MappingSpecDocs) *MappingSpecDocs {
		return &v
	}).(MappingSpecDocsPtrOutput)
}
func (o MappingSpecDocsOutput) Display_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecDocs) *string { return v.Display_name }).(pulumi.StringPtrOutput)
}

func (o MappingSpecDocsOutput) Ignored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpecDocs) *bool { return v.Ignored }).(pulumi.BoolPtrOutput)
}

func (o MappingSpecDocsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecDocs) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o MappingSpecDocsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecDocs) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type MappingSpecDocsPtrOutput struct{ *pulumi.OutputState }

func (MappingSpecDocsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecDocs)(nil)).Elem()
}

func (o MappingSpecDocsPtrOutput) ToMappingSpecDocsPtrOutput() MappingSpecDocsPtrOutput {
	return o
}

func (o MappingSpecDocsPtrOutput) ToMappingSpecDocsPtrOutputWithContext(ctx context.Context) MappingSpecDocsPtrOutput {
	return o
}

func (o MappingSpecDocsPtrOutput) Elem() MappingSpecDocsOutput {
	return o.ApplyT(func(v *MappingSpecDocs) MappingSpecDocs { return *v }).(MappingSpecDocsOutput)
}

func (o MappingSpecDocsPtrOutput) Display_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecDocs) *string {
		if v == nil {
			return nil
		}
		return v.Display_name
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecDocsPtrOutput) Ignored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpecDocs) *bool {
		if v == nil {
			return nil
		}
		return v.Ignored
	}).(pulumi.BoolPtrOutput)
}

func (o MappingSpecDocsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecDocs) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecDocsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecDocs) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type MappingSpecEnvoy_override struct {
}

// MappingSpecEnvoy_overrideInput is an input type that accepts MappingSpecEnvoy_overrideArgs and MappingSpecEnvoy_overrideOutput values.
// You can construct a concrete instance of `MappingSpecEnvoy_overrideInput` via:
//
//          MappingSpecEnvoy_overrideArgs{...}
type MappingSpecEnvoy_overrideInput interface {
	pulumi.Input

	ToMappingSpecEnvoy_overrideOutput() MappingSpecEnvoy_overrideOutput
	ToMappingSpecEnvoy_overrideOutputWithContext(context.Context) MappingSpecEnvoy_overrideOutput
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type MappingSpecEnvoy_overrideArgs struct {
}

func (MappingSpecEnvoy_overrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecEnvoy_override)(nil)).Elem()
}

func (i MappingSpecEnvoy_overrideArgs) ToMappingSpecEnvoy_overrideOutput() MappingSpecEnvoy_overrideOutput {
	return i.ToMappingSpecEnvoy_overrideOutputWithContext(context.Background())
}

func (i MappingSpecEnvoy_overrideArgs) ToMappingSpecEnvoy_overrideOutputWithContext(ctx context.Context) MappingSpecEnvoy_overrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecEnvoy_overrideOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type MappingSpecEnvoy_overrideOutput struct{ *pulumi.OutputState }

func (MappingSpecEnvoy_overrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecEnvoy_override)(nil)).Elem()
}

func (o MappingSpecEnvoy_overrideOutput) ToMappingSpecEnvoy_overrideOutput() MappingSpecEnvoy_overrideOutput {
	return o
}

func (o MappingSpecEnvoy_overrideOutput) ToMappingSpecEnvoy_overrideOutputWithContext(ctx context.Context) MappingSpecEnvoy_overrideOutput {
	return o
}

// A response rewrite for an HTTP error response
type MappingSpecError_response_overrides struct {
	// The new response body
	Body MappingSpecError_response_overridesBody `pulumi:"body"`
	// The status code to match on -- not a pointer because it's required.
	On_status_code int `pulumi:"on_status_code"`
}

// MappingSpecError_response_overridesInput is an input type that accepts MappingSpecError_response_overridesArgs and MappingSpecError_response_overridesOutput values.
// You can construct a concrete instance of `MappingSpecError_response_overridesInput` via:
//
//          MappingSpecError_response_overridesArgs{...}
type MappingSpecError_response_overridesInput interface {
	pulumi.Input

	ToMappingSpecError_response_overridesOutput() MappingSpecError_response_overridesOutput
	ToMappingSpecError_response_overridesOutputWithContext(context.Context) MappingSpecError_response_overridesOutput
}

// A response rewrite for an HTTP error response
type MappingSpecError_response_overridesArgs struct {
	// The new response body
	Body MappingSpecError_response_overridesBodyInput `pulumi:"body"`
	// The status code to match on -- not a pointer because it's required.
	On_status_code pulumi.IntInput `pulumi:"on_status_code"`
}

func (MappingSpecError_response_overridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overrides)(nil)).Elem()
}

func (i MappingSpecError_response_overridesArgs) ToMappingSpecError_response_overridesOutput() MappingSpecError_response_overridesOutput {
	return i.ToMappingSpecError_response_overridesOutputWithContext(context.Background())
}

func (i MappingSpecError_response_overridesArgs) ToMappingSpecError_response_overridesOutputWithContext(ctx context.Context) MappingSpecError_response_overridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesOutput)
}

// MappingSpecError_response_overridesArrayInput is an input type that accepts MappingSpecError_response_overridesArray and MappingSpecError_response_overridesArrayOutput values.
// You can construct a concrete instance of `MappingSpecError_response_overridesArrayInput` via:
//
//          MappingSpecError_response_overridesArray{ MappingSpecError_response_overridesArgs{...} }
type MappingSpecError_response_overridesArrayInput interface {
	pulumi.Input

	ToMappingSpecError_response_overridesArrayOutput() MappingSpecError_response_overridesArrayOutput
	ToMappingSpecError_response_overridesArrayOutputWithContext(context.Context) MappingSpecError_response_overridesArrayOutput
}

type MappingSpecError_response_overridesArray []MappingSpecError_response_overridesInput

func (MappingSpecError_response_overridesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MappingSpecError_response_overrides)(nil)).Elem()
}

func (i MappingSpecError_response_overridesArray) ToMappingSpecError_response_overridesArrayOutput() MappingSpecError_response_overridesArrayOutput {
	return i.ToMappingSpecError_response_overridesArrayOutputWithContext(context.Background())
}

func (i MappingSpecError_response_overridesArray) ToMappingSpecError_response_overridesArrayOutputWithContext(ctx context.Context) MappingSpecError_response_overridesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesArrayOutput)
}

// A response rewrite for an HTTP error response
type MappingSpecError_response_overridesOutput struct{ *pulumi.OutputState }

func (MappingSpecError_response_overridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overrides)(nil)).Elem()
}

func (o MappingSpecError_response_overridesOutput) ToMappingSpecError_response_overridesOutput() MappingSpecError_response_overridesOutput {
	return o
}

func (o MappingSpecError_response_overridesOutput) ToMappingSpecError_response_overridesOutputWithContext(ctx context.Context) MappingSpecError_response_overridesOutput {
	return o
}

// The new response body
func (o MappingSpecError_response_overridesOutput) Body() MappingSpecError_response_overridesBodyOutput {
	return o.ApplyT(func(v MappingSpecError_response_overrides) MappingSpecError_response_overridesBody { return v.Body }).(MappingSpecError_response_overridesBodyOutput)
}

// The status code to match on -- not a pointer because it's required.
func (o MappingSpecError_response_overridesOutput) On_status_code() pulumi.IntOutput {
	return o.ApplyT(func(v MappingSpecError_response_overrides) int { return v.On_status_code }).(pulumi.IntOutput)
}

type MappingSpecError_response_overridesArrayOutput struct{ *pulumi.OutputState }

func (MappingSpecError_response_overridesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MappingSpecError_response_overrides)(nil)).Elem()
}

func (o MappingSpecError_response_overridesArrayOutput) ToMappingSpecError_response_overridesArrayOutput() MappingSpecError_response_overridesArrayOutput {
	return o
}

func (o MappingSpecError_response_overridesArrayOutput) ToMappingSpecError_response_overridesArrayOutputWithContext(ctx context.Context) MappingSpecError_response_overridesArrayOutput {
	return o
}

func (o MappingSpecError_response_overridesArrayOutput) Index(i pulumi.IntInput) MappingSpecError_response_overridesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MappingSpecError_response_overrides {
		return vs[0].([]MappingSpecError_response_overrides)[vs[1].(int)]
	}).(MappingSpecError_response_overridesOutput)
}

// The new response body
type MappingSpecError_response_overridesBody struct {
	// The content type to set on the error response body when using text_format or text_format_source. Defaults to 'text/plain'.
	Content_type *string `pulumi:"content_type"`
	// A JSON response with content-type: application/json. The values can contain format text like in text_format.
	Json_format map[string]string `pulumi:"json_format"`
	// A format string representing a text response body. Content-Type can be set using the `content_type` field below.
	Text_format *string `pulumi:"text_format"`
	// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
	Text_format_source *MappingSpecError_response_overridesBodyText_format_source `pulumi:"text_format_source"`
}

// MappingSpecError_response_overridesBodyInput is an input type that accepts MappingSpecError_response_overridesBodyArgs and MappingSpecError_response_overridesBodyOutput values.
// You can construct a concrete instance of `MappingSpecError_response_overridesBodyInput` via:
//
//          MappingSpecError_response_overridesBodyArgs{...}
type MappingSpecError_response_overridesBodyInput interface {
	pulumi.Input

	ToMappingSpecError_response_overridesBodyOutput() MappingSpecError_response_overridesBodyOutput
	ToMappingSpecError_response_overridesBodyOutputWithContext(context.Context) MappingSpecError_response_overridesBodyOutput
}

// The new response body
type MappingSpecError_response_overridesBodyArgs struct {
	// The content type to set on the error response body when using text_format or text_format_source. Defaults to 'text/plain'.
	Content_type pulumi.StringPtrInput `pulumi:"content_type"`
	// A JSON response with content-type: application/json. The values can contain format text like in text_format.
	Json_format pulumi.StringMapInput `pulumi:"json_format"`
	// A format string representing a text response body. Content-Type can be set using the `content_type` field below.
	Text_format pulumi.StringPtrInput `pulumi:"text_format"`
	// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
	Text_format_source MappingSpecError_response_overridesBodyText_format_sourcePtrInput `pulumi:"text_format_source"`
}

func (MappingSpecError_response_overridesBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overridesBody)(nil)).Elem()
}

func (i MappingSpecError_response_overridesBodyArgs) ToMappingSpecError_response_overridesBodyOutput() MappingSpecError_response_overridesBodyOutput {
	return i.ToMappingSpecError_response_overridesBodyOutputWithContext(context.Background())
}

func (i MappingSpecError_response_overridesBodyArgs) ToMappingSpecError_response_overridesBodyOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesBodyOutput)
}

// The new response body
type MappingSpecError_response_overridesBodyOutput struct{ *pulumi.OutputState }

func (MappingSpecError_response_overridesBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overridesBody)(nil)).Elem()
}

func (o MappingSpecError_response_overridesBodyOutput) ToMappingSpecError_response_overridesBodyOutput() MappingSpecError_response_overridesBodyOutput {
	return o
}

func (o MappingSpecError_response_overridesBodyOutput) ToMappingSpecError_response_overridesBodyOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyOutput {
	return o
}

// The content type to set on the error response body when using text_format or text_format_source. Defaults to 'text/plain'.
func (o MappingSpecError_response_overridesBodyOutput) Content_type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecError_response_overridesBody) *string { return v.Content_type }).(pulumi.StringPtrOutput)
}

// A JSON response with content-type: application/json. The values can contain format text like in text_format.
func (o MappingSpecError_response_overridesBodyOutput) Json_format() pulumi.StringMapOutput {
	return o.ApplyT(func(v MappingSpecError_response_overridesBody) map[string]string { return v.Json_format }).(pulumi.StringMapOutput)
}

// A format string representing a text response body. Content-Type can be set using the `content_type` field below.
func (o MappingSpecError_response_overridesBodyOutput) Text_format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecError_response_overridesBody) *string { return v.Text_format }).(pulumi.StringPtrOutput)
}

// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
func (o MappingSpecError_response_overridesBodyOutput) Text_format_source() MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return o.ApplyT(func(v MappingSpecError_response_overridesBody) *MappingSpecError_response_overridesBodyText_format_source {
		return v.Text_format_source
	}).(MappingSpecError_response_overridesBodyText_format_sourcePtrOutput)
}

// A JSON response with content-type: application/json. The values can contain format text like in text_format.
type MappingSpecError_response_overridesBodyJson_format struct {
}

// MappingSpecError_response_overridesBodyJson_formatInput is an input type that accepts MappingSpecError_response_overridesBodyJson_formatArgs and MappingSpecError_response_overridesBodyJson_formatOutput values.
// You can construct a concrete instance of `MappingSpecError_response_overridesBodyJson_formatInput` via:
//
//          MappingSpecError_response_overridesBodyJson_formatArgs{...}
type MappingSpecError_response_overridesBodyJson_formatInput interface {
	pulumi.Input

	ToMappingSpecError_response_overridesBodyJson_formatOutput() MappingSpecError_response_overridesBodyJson_formatOutput
	ToMappingSpecError_response_overridesBodyJson_formatOutputWithContext(context.Context) MappingSpecError_response_overridesBodyJson_formatOutput
}

// A JSON response with content-type: application/json. The values can contain format text like in text_format.
type MappingSpecError_response_overridesBodyJson_formatArgs struct {
}

func (MappingSpecError_response_overridesBodyJson_formatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overridesBodyJson_format)(nil)).Elem()
}

func (i MappingSpecError_response_overridesBodyJson_formatArgs) ToMappingSpecError_response_overridesBodyJson_formatOutput() MappingSpecError_response_overridesBodyJson_formatOutput {
	return i.ToMappingSpecError_response_overridesBodyJson_formatOutputWithContext(context.Background())
}

func (i MappingSpecError_response_overridesBodyJson_formatArgs) ToMappingSpecError_response_overridesBodyJson_formatOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyJson_formatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesBodyJson_formatOutput)
}

// A JSON response with content-type: application/json. The values can contain format text like in text_format.
type MappingSpecError_response_overridesBodyJson_formatOutput struct{ *pulumi.OutputState }

func (MappingSpecError_response_overridesBodyJson_formatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overridesBodyJson_format)(nil)).Elem()
}

func (o MappingSpecError_response_overridesBodyJson_formatOutput) ToMappingSpecError_response_overridesBodyJson_formatOutput() MappingSpecError_response_overridesBodyJson_formatOutput {
	return o
}

func (o MappingSpecError_response_overridesBodyJson_formatOutput) ToMappingSpecError_response_overridesBodyJson_formatOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyJson_formatOutput {
	return o
}

// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
type MappingSpecError_response_overridesBodyText_format_source struct {
	// The name of a file on the Ambassador pod that contains a format text string.
	Filename *string `pulumi:"filename"`
}

// MappingSpecError_response_overridesBodyText_format_sourceInput is an input type that accepts MappingSpecError_response_overridesBodyText_format_sourceArgs and MappingSpecError_response_overridesBodyText_format_sourceOutput values.
// You can construct a concrete instance of `MappingSpecError_response_overridesBodyText_format_sourceInput` via:
//
//          MappingSpecError_response_overridesBodyText_format_sourceArgs{...}
type MappingSpecError_response_overridesBodyText_format_sourceInput interface {
	pulumi.Input

	ToMappingSpecError_response_overridesBodyText_format_sourceOutput() MappingSpecError_response_overridesBodyText_format_sourceOutput
	ToMappingSpecError_response_overridesBodyText_format_sourceOutputWithContext(context.Context) MappingSpecError_response_overridesBodyText_format_sourceOutput
}

// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
type MappingSpecError_response_overridesBodyText_format_sourceArgs struct {
	// The name of a file on the Ambassador pod that contains a format text string.
	Filename pulumi.StringPtrInput `pulumi:"filename"`
}

func (MappingSpecError_response_overridesBodyText_format_sourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overridesBodyText_format_source)(nil)).Elem()
}

func (i MappingSpecError_response_overridesBodyText_format_sourceArgs) ToMappingSpecError_response_overridesBodyText_format_sourceOutput() MappingSpecError_response_overridesBodyText_format_sourceOutput {
	return i.ToMappingSpecError_response_overridesBodyText_format_sourceOutputWithContext(context.Background())
}

func (i MappingSpecError_response_overridesBodyText_format_sourceArgs) ToMappingSpecError_response_overridesBodyText_format_sourceOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyText_format_sourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesBodyText_format_sourceOutput)
}

func (i MappingSpecError_response_overridesBodyText_format_sourceArgs) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutput() MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return i.ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(context.Background())
}

func (i MappingSpecError_response_overridesBodyText_format_sourceArgs) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesBodyText_format_sourceOutput).ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(ctx)
}

// MappingSpecError_response_overridesBodyText_format_sourcePtrInput is an input type that accepts MappingSpecError_response_overridesBodyText_format_sourceArgs, MappingSpecError_response_overridesBodyText_format_sourcePtr and MappingSpecError_response_overridesBodyText_format_sourcePtrOutput values.
// You can construct a concrete instance of `MappingSpecError_response_overridesBodyText_format_sourcePtrInput` via:
//
//          MappingSpecError_response_overridesBodyText_format_sourceArgs{...}
//
//  or:
//
//          nil
type MappingSpecError_response_overridesBodyText_format_sourcePtrInput interface {
	pulumi.Input

	ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutput() MappingSpecError_response_overridesBodyText_format_sourcePtrOutput
	ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(context.Context) MappingSpecError_response_overridesBodyText_format_sourcePtrOutput
}

type mappingSpecError_response_overridesBodyText_format_sourcePtrType MappingSpecError_response_overridesBodyText_format_sourceArgs

func MappingSpecError_response_overridesBodyText_format_sourcePtr(v *MappingSpecError_response_overridesBodyText_format_sourceArgs) MappingSpecError_response_overridesBodyText_format_sourcePtrInput {
	return (*mappingSpecError_response_overridesBodyText_format_sourcePtrType)(v)
}

func (*mappingSpecError_response_overridesBodyText_format_sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecError_response_overridesBodyText_format_source)(nil)).Elem()
}

func (i *mappingSpecError_response_overridesBodyText_format_sourcePtrType) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutput() MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return i.ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(context.Background())
}

func (i *mappingSpecError_response_overridesBodyText_format_sourcePtrType) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecError_response_overridesBodyText_format_sourcePtrOutput)
}

// A format string sourced from a file on the Ambassador container. Useful for larger response bodies that should not be placed inline in configuration.
type MappingSpecError_response_overridesBodyText_format_sourceOutput struct{ *pulumi.OutputState }

func (MappingSpecError_response_overridesBodyText_format_sourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecError_response_overridesBodyText_format_source)(nil)).Elem()
}

func (o MappingSpecError_response_overridesBodyText_format_sourceOutput) ToMappingSpecError_response_overridesBodyText_format_sourceOutput() MappingSpecError_response_overridesBodyText_format_sourceOutput {
	return o
}

func (o MappingSpecError_response_overridesBodyText_format_sourceOutput) ToMappingSpecError_response_overridesBodyText_format_sourceOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyText_format_sourceOutput {
	return o
}

func (o MappingSpecError_response_overridesBodyText_format_sourceOutput) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutput() MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return o.ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(context.Background())
}

func (o MappingSpecError_response_overridesBodyText_format_sourceOutput) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return o.ApplyT(func(v MappingSpecError_response_overridesBodyText_format_source) *MappingSpecError_response_overridesBodyText_format_source {
		return &v
	}).(MappingSpecError_response_overridesBodyText_format_sourcePtrOutput)
}

// The name of a file on the Ambassador pod that contains a format text string.
func (o MappingSpecError_response_overridesBodyText_format_sourceOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecError_response_overridesBodyText_format_source) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

type MappingSpecError_response_overridesBodyText_format_sourcePtrOutput struct{ *pulumi.OutputState }

func (MappingSpecError_response_overridesBodyText_format_sourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecError_response_overridesBodyText_format_source)(nil)).Elem()
}

func (o MappingSpecError_response_overridesBodyText_format_sourcePtrOutput) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutput() MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return o
}

func (o MappingSpecError_response_overridesBodyText_format_sourcePtrOutput) ToMappingSpecError_response_overridesBodyText_format_sourcePtrOutputWithContext(ctx context.Context) MappingSpecError_response_overridesBodyText_format_sourcePtrOutput {
	return o
}

func (o MappingSpecError_response_overridesBodyText_format_sourcePtrOutput) Elem() MappingSpecError_response_overridesBodyText_format_sourceOutput {
	return o.ApplyT(func(v *MappingSpecError_response_overridesBodyText_format_source) MappingSpecError_response_overridesBodyText_format_source {
		return *v
	}).(MappingSpecError_response_overridesBodyText_format_sourceOutput)
}

// The name of a file on the Ambassador pod that contains a format text string.
func (o MappingSpecError_response_overridesBodyText_format_sourcePtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecError_response_overridesBodyText_format_source) *string {
		if v == nil {
			return nil
		}
		return v.Filename
	}).(pulumi.StringPtrOutput)
}

type MappingSpecHeaders struct {
}

// MappingSpecHeadersInput is an input type that accepts MappingSpecHeadersArgs and MappingSpecHeadersOutput values.
// You can construct a concrete instance of `MappingSpecHeadersInput` via:
//
//          MappingSpecHeadersArgs{...}
type MappingSpecHeadersInput interface {
	pulumi.Input

	ToMappingSpecHeadersOutput() MappingSpecHeadersOutput
	ToMappingSpecHeadersOutputWithContext(context.Context) MappingSpecHeadersOutput
}

type MappingSpecHeadersArgs struct {
}

func (MappingSpecHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecHeaders)(nil)).Elem()
}

func (i MappingSpecHeadersArgs) ToMappingSpecHeadersOutput() MappingSpecHeadersOutput {
	return i.ToMappingSpecHeadersOutputWithContext(context.Background())
}

func (i MappingSpecHeadersArgs) ToMappingSpecHeadersOutputWithContext(ctx context.Context) MappingSpecHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecHeadersOutput)
}

type MappingSpecHeadersOutput struct{ *pulumi.OutputState }

func (MappingSpecHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecHeaders)(nil)).Elem()
}

func (o MappingSpecHeadersOutput) ToMappingSpecHeadersOutput() MappingSpecHeadersOutput {
	return o
}

func (o MappingSpecHeadersOutput) ToMappingSpecHeadersOutputWithContext(ctx context.Context) MappingSpecHeadersOutput {
	return o
}

type MappingSpecKeepalive struct {
	Idle_time *int `pulumi:"idle_time"`
	Interval  *int `pulumi:"interval"`
	Probes    *int `pulumi:"probes"`
}

// MappingSpecKeepaliveInput is an input type that accepts MappingSpecKeepaliveArgs and MappingSpecKeepaliveOutput values.
// You can construct a concrete instance of `MappingSpecKeepaliveInput` via:
//
//          MappingSpecKeepaliveArgs{...}
type MappingSpecKeepaliveInput interface {
	pulumi.Input

	ToMappingSpecKeepaliveOutput() MappingSpecKeepaliveOutput
	ToMappingSpecKeepaliveOutputWithContext(context.Context) MappingSpecKeepaliveOutput
}

type MappingSpecKeepaliveArgs struct {
	Idle_time pulumi.IntPtrInput `pulumi:"idle_time"`
	Interval  pulumi.IntPtrInput `pulumi:"interval"`
	Probes    pulumi.IntPtrInput `pulumi:"probes"`
}

func (MappingSpecKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecKeepalive)(nil)).Elem()
}

func (i MappingSpecKeepaliveArgs) ToMappingSpecKeepaliveOutput() MappingSpecKeepaliveOutput {
	return i.ToMappingSpecKeepaliveOutputWithContext(context.Background())
}

func (i MappingSpecKeepaliveArgs) ToMappingSpecKeepaliveOutputWithContext(ctx context.Context) MappingSpecKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecKeepaliveOutput)
}

func (i MappingSpecKeepaliveArgs) ToMappingSpecKeepalivePtrOutput() MappingSpecKeepalivePtrOutput {
	return i.ToMappingSpecKeepalivePtrOutputWithContext(context.Background())
}

func (i MappingSpecKeepaliveArgs) ToMappingSpecKeepalivePtrOutputWithContext(ctx context.Context) MappingSpecKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecKeepaliveOutput).ToMappingSpecKeepalivePtrOutputWithContext(ctx)
}

// MappingSpecKeepalivePtrInput is an input type that accepts MappingSpecKeepaliveArgs, MappingSpecKeepalivePtr and MappingSpecKeepalivePtrOutput values.
// You can construct a concrete instance of `MappingSpecKeepalivePtrInput` via:
//
//          MappingSpecKeepaliveArgs{...}
//
//  or:
//
//          nil
type MappingSpecKeepalivePtrInput interface {
	pulumi.Input

	ToMappingSpecKeepalivePtrOutput() MappingSpecKeepalivePtrOutput
	ToMappingSpecKeepalivePtrOutputWithContext(context.Context) MappingSpecKeepalivePtrOutput
}

type mappingSpecKeepalivePtrType MappingSpecKeepaliveArgs

func MappingSpecKeepalivePtr(v *MappingSpecKeepaliveArgs) MappingSpecKeepalivePtrInput {
	return (*mappingSpecKeepalivePtrType)(v)
}

func (*mappingSpecKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecKeepalive)(nil)).Elem()
}

func (i *mappingSpecKeepalivePtrType) ToMappingSpecKeepalivePtrOutput() MappingSpecKeepalivePtrOutput {
	return i.ToMappingSpecKeepalivePtrOutputWithContext(context.Background())
}

func (i *mappingSpecKeepalivePtrType) ToMappingSpecKeepalivePtrOutputWithContext(ctx context.Context) MappingSpecKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecKeepalivePtrOutput)
}

type MappingSpecKeepaliveOutput struct{ *pulumi.OutputState }

func (MappingSpecKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecKeepalive)(nil)).Elem()
}

func (o MappingSpecKeepaliveOutput) ToMappingSpecKeepaliveOutput() MappingSpecKeepaliveOutput {
	return o
}

func (o MappingSpecKeepaliveOutput) ToMappingSpecKeepaliveOutputWithContext(ctx context.Context) MappingSpecKeepaliveOutput {
	return o
}

func (o MappingSpecKeepaliveOutput) ToMappingSpecKeepalivePtrOutput() MappingSpecKeepalivePtrOutput {
	return o.ToMappingSpecKeepalivePtrOutputWithContext(context.Background())
}

func (o MappingSpecKeepaliveOutput) ToMappingSpecKeepalivePtrOutputWithContext(ctx context.Context) MappingSpecKeepalivePtrOutput {
	return o.ApplyT(func(v MappingSpecKeepalive) *MappingSpecKeepalive {
		return &v
	}).(MappingSpecKeepalivePtrOutput)
}
func (o MappingSpecKeepaliveOutput) Idle_time() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecKeepalive) *int { return v.Idle_time }).(pulumi.IntPtrOutput)
}

func (o MappingSpecKeepaliveOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecKeepalive) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o MappingSpecKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecKeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

type MappingSpecKeepalivePtrOutput struct{ *pulumi.OutputState }

func (MappingSpecKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecKeepalive)(nil)).Elem()
}

func (o MappingSpecKeepalivePtrOutput) ToMappingSpecKeepalivePtrOutput() MappingSpecKeepalivePtrOutput {
	return o
}

func (o MappingSpecKeepalivePtrOutput) ToMappingSpecKeepalivePtrOutputWithContext(ctx context.Context) MappingSpecKeepalivePtrOutput {
	return o
}

func (o MappingSpecKeepalivePtrOutput) Elem() MappingSpecKeepaliveOutput {
	return o.ApplyT(func(v *MappingSpecKeepalive) MappingSpecKeepalive { return *v }).(MappingSpecKeepaliveOutput)
}

func (o MappingSpecKeepalivePtrOutput) Idle_time() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpecKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Idle_time
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecKeepalivePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpecKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpecKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// A MappingLabelGroup is a single element of a MappingLabelGroupsArray: a second map, where the key is a human-readable name that identifies the group.
type MappingSpecLabels struct {
}

// MappingSpecLabelsInput is an input type that accepts MappingSpecLabelsArgs and MappingSpecLabelsOutput values.
// You can construct a concrete instance of `MappingSpecLabelsInput` via:
//
//          MappingSpecLabelsArgs{...}
type MappingSpecLabelsInput interface {
	pulumi.Input

	ToMappingSpecLabelsOutput() MappingSpecLabelsOutput
	ToMappingSpecLabelsOutputWithContext(context.Context) MappingSpecLabelsOutput
}

// A MappingLabelGroup is a single element of a MappingLabelGroupsArray: a second map, where the key is a human-readable name that identifies the group.
type MappingSpecLabelsArgs struct {
}

func (MappingSpecLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecLabels)(nil)).Elem()
}

func (i MappingSpecLabelsArgs) ToMappingSpecLabelsOutput() MappingSpecLabelsOutput {
	return i.ToMappingSpecLabelsOutputWithContext(context.Background())
}

func (i MappingSpecLabelsArgs) ToMappingSpecLabelsOutputWithContext(ctx context.Context) MappingSpecLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLabelsOutput)
}

// A MappingLabelGroup is a single element of a MappingLabelGroupsArray: a second map, where the key is a human-readable name that identifies the group.
type MappingSpecLabelsOutput struct{ *pulumi.OutputState }

func (MappingSpecLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecLabels)(nil)).Elem()
}

func (o MappingSpecLabelsOutput) ToMappingSpecLabelsOutput() MappingSpecLabelsOutput {
	return o
}

func (o MappingSpecLabelsOutput) ToMappingSpecLabelsOutputWithContext(ctx context.Context) MappingSpecLabelsOutput {
	return o
}

type MappingSpecLoad_balancer struct {
	Cookie    *MappingSpecLoad_balancerCookie `pulumi:"cookie"`
	Header    *string                         `pulumi:"header"`
	Policy    string                          `pulumi:"policy"`
	Source_ip *bool                           `pulumi:"source_ip"`
}

// MappingSpecLoad_balancerInput is an input type that accepts MappingSpecLoad_balancerArgs and MappingSpecLoad_balancerOutput values.
// You can construct a concrete instance of `MappingSpecLoad_balancerInput` via:
//
//          MappingSpecLoad_balancerArgs{...}
type MappingSpecLoad_balancerInput interface {
	pulumi.Input

	ToMappingSpecLoad_balancerOutput() MappingSpecLoad_balancerOutput
	ToMappingSpecLoad_balancerOutputWithContext(context.Context) MappingSpecLoad_balancerOutput
}

type MappingSpecLoad_balancerArgs struct {
	Cookie    MappingSpecLoad_balancerCookiePtrInput `pulumi:"cookie"`
	Header    pulumi.StringPtrInput                  `pulumi:"header"`
	Policy    pulumi.StringInput                     `pulumi:"policy"`
	Source_ip pulumi.BoolPtrInput                    `pulumi:"source_ip"`
}

func (MappingSpecLoad_balancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecLoad_balancer)(nil)).Elem()
}

func (i MappingSpecLoad_balancerArgs) ToMappingSpecLoad_balancerOutput() MappingSpecLoad_balancerOutput {
	return i.ToMappingSpecLoad_balancerOutputWithContext(context.Background())
}

func (i MappingSpecLoad_balancerArgs) ToMappingSpecLoad_balancerOutputWithContext(ctx context.Context) MappingSpecLoad_balancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLoad_balancerOutput)
}

func (i MappingSpecLoad_balancerArgs) ToMappingSpecLoad_balancerPtrOutput() MappingSpecLoad_balancerPtrOutput {
	return i.ToMappingSpecLoad_balancerPtrOutputWithContext(context.Background())
}

func (i MappingSpecLoad_balancerArgs) ToMappingSpecLoad_balancerPtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLoad_balancerOutput).ToMappingSpecLoad_balancerPtrOutputWithContext(ctx)
}

// MappingSpecLoad_balancerPtrInput is an input type that accepts MappingSpecLoad_balancerArgs, MappingSpecLoad_balancerPtr and MappingSpecLoad_balancerPtrOutput values.
// You can construct a concrete instance of `MappingSpecLoad_balancerPtrInput` via:
//
//          MappingSpecLoad_balancerArgs{...}
//
//  or:
//
//          nil
type MappingSpecLoad_balancerPtrInput interface {
	pulumi.Input

	ToMappingSpecLoad_balancerPtrOutput() MappingSpecLoad_balancerPtrOutput
	ToMappingSpecLoad_balancerPtrOutputWithContext(context.Context) MappingSpecLoad_balancerPtrOutput
}

type mappingSpecLoad_balancerPtrType MappingSpecLoad_balancerArgs

func MappingSpecLoad_balancerPtr(v *MappingSpecLoad_balancerArgs) MappingSpecLoad_balancerPtrInput {
	return (*mappingSpecLoad_balancerPtrType)(v)
}

func (*mappingSpecLoad_balancerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecLoad_balancer)(nil)).Elem()
}

func (i *mappingSpecLoad_balancerPtrType) ToMappingSpecLoad_balancerPtrOutput() MappingSpecLoad_balancerPtrOutput {
	return i.ToMappingSpecLoad_balancerPtrOutputWithContext(context.Background())
}

func (i *mappingSpecLoad_balancerPtrType) ToMappingSpecLoad_balancerPtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLoad_balancerPtrOutput)
}

type MappingSpecLoad_balancerOutput struct{ *pulumi.OutputState }

func (MappingSpecLoad_balancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecLoad_balancer)(nil)).Elem()
}

func (o MappingSpecLoad_balancerOutput) ToMappingSpecLoad_balancerOutput() MappingSpecLoad_balancerOutput {
	return o
}

func (o MappingSpecLoad_balancerOutput) ToMappingSpecLoad_balancerOutputWithContext(ctx context.Context) MappingSpecLoad_balancerOutput {
	return o
}

func (o MappingSpecLoad_balancerOutput) ToMappingSpecLoad_balancerPtrOutput() MappingSpecLoad_balancerPtrOutput {
	return o.ToMappingSpecLoad_balancerPtrOutputWithContext(context.Background())
}

func (o MappingSpecLoad_balancerOutput) ToMappingSpecLoad_balancerPtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerPtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancer) *MappingSpecLoad_balancer {
		return &v
	}).(MappingSpecLoad_balancerPtrOutput)
}
func (o MappingSpecLoad_balancerOutput) Cookie() MappingSpecLoad_balancerCookiePtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancer) *MappingSpecLoad_balancerCookie { return v.Cookie }).(MappingSpecLoad_balancerCookiePtrOutput)
}

func (o MappingSpecLoad_balancerOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancer) *string { return v.Header }).(pulumi.StringPtrOutput)
}

func (o MappingSpecLoad_balancerOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancer) string { return v.Policy }).(pulumi.StringOutput)
}

func (o MappingSpecLoad_balancerOutput) Source_ip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancer) *bool { return v.Source_ip }).(pulumi.BoolPtrOutput)
}

type MappingSpecLoad_balancerPtrOutput struct{ *pulumi.OutputState }

func (MappingSpecLoad_balancerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecLoad_balancer)(nil)).Elem()
}

func (o MappingSpecLoad_balancerPtrOutput) ToMappingSpecLoad_balancerPtrOutput() MappingSpecLoad_balancerPtrOutput {
	return o
}

func (o MappingSpecLoad_balancerPtrOutput) ToMappingSpecLoad_balancerPtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerPtrOutput {
	return o
}

func (o MappingSpecLoad_balancerPtrOutput) Elem() MappingSpecLoad_balancerOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancer) MappingSpecLoad_balancer { return *v }).(MappingSpecLoad_balancerOutput)
}

func (o MappingSpecLoad_balancerPtrOutput) Cookie() MappingSpecLoad_balancerCookiePtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancer) *MappingSpecLoad_balancerCookie {
		if v == nil {
			return nil
		}
		return v.Cookie
	}).(MappingSpecLoad_balancerCookiePtrOutput)
}

func (o MappingSpecLoad_balancerPtrOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancer) *string {
		if v == nil {
			return nil
		}
		return v.Header
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecLoad_balancerPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancer) *string {
		if v == nil {
			return nil
		}
		return &v.Policy
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecLoad_balancerPtrOutput) Source_ip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancer) *bool {
		if v == nil {
			return nil
		}
		return v.Source_ip
	}).(pulumi.BoolPtrOutput)
}

type MappingSpecLoad_balancerCookie struct {
	Name string  `pulumi:"name"`
	Path *string `pulumi:"path"`
	Ttl  *string `pulumi:"ttl"`
}

// MappingSpecLoad_balancerCookieInput is an input type that accepts MappingSpecLoad_balancerCookieArgs and MappingSpecLoad_balancerCookieOutput values.
// You can construct a concrete instance of `MappingSpecLoad_balancerCookieInput` via:
//
//          MappingSpecLoad_balancerCookieArgs{...}
type MappingSpecLoad_balancerCookieInput interface {
	pulumi.Input

	ToMappingSpecLoad_balancerCookieOutput() MappingSpecLoad_balancerCookieOutput
	ToMappingSpecLoad_balancerCookieOutputWithContext(context.Context) MappingSpecLoad_balancerCookieOutput
}

type MappingSpecLoad_balancerCookieArgs struct {
	Name pulumi.StringInput    `pulumi:"name"`
	Path pulumi.StringPtrInput `pulumi:"path"`
	Ttl  pulumi.StringPtrInput `pulumi:"ttl"`
}

func (MappingSpecLoad_balancerCookieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecLoad_balancerCookie)(nil)).Elem()
}

func (i MappingSpecLoad_balancerCookieArgs) ToMappingSpecLoad_balancerCookieOutput() MappingSpecLoad_balancerCookieOutput {
	return i.ToMappingSpecLoad_balancerCookieOutputWithContext(context.Background())
}

func (i MappingSpecLoad_balancerCookieArgs) ToMappingSpecLoad_balancerCookieOutputWithContext(ctx context.Context) MappingSpecLoad_balancerCookieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLoad_balancerCookieOutput)
}

func (i MappingSpecLoad_balancerCookieArgs) ToMappingSpecLoad_balancerCookiePtrOutput() MappingSpecLoad_balancerCookiePtrOutput {
	return i.ToMappingSpecLoad_balancerCookiePtrOutputWithContext(context.Background())
}

func (i MappingSpecLoad_balancerCookieArgs) ToMappingSpecLoad_balancerCookiePtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLoad_balancerCookieOutput).ToMappingSpecLoad_balancerCookiePtrOutputWithContext(ctx)
}

// MappingSpecLoad_balancerCookiePtrInput is an input type that accepts MappingSpecLoad_balancerCookieArgs, MappingSpecLoad_balancerCookiePtr and MappingSpecLoad_balancerCookiePtrOutput values.
// You can construct a concrete instance of `MappingSpecLoad_balancerCookiePtrInput` via:
//
//          MappingSpecLoad_balancerCookieArgs{...}
//
//  or:
//
//          nil
type MappingSpecLoad_balancerCookiePtrInput interface {
	pulumi.Input

	ToMappingSpecLoad_balancerCookiePtrOutput() MappingSpecLoad_balancerCookiePtrOutput
	ToMappingSpecLoad_balancerCookiePtrOutputWithContext(context.Context) MappingSpecLoad_balancerCookiePtrOutput
}

type mappingSpecLoad_balancerCookiePtrType MappingSpecLoad_balancerCookieArgs

func MappingSpecLoad_balancerCookiePtr(v *MappingSpecLoad_balancerCookieArgs) MappingSpecLoad_balancerCookiePtrInput {
	return (*mappingSpecLoad_balancerCookiePtrType)(v)
}

func (*mappingSpecLoad_balancerCookiePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecLoad_balancerCookie)(nil)).Elem()
}

func (i *mappingSpecLoad_balancerCookiePtrType) ToMappingSpecLoad_balancerCookiePtrOutput() MappingSpecLoad_balancerCookiePtrOutput {
	return i.ToMappingSpecLoad_balancerCookiePtrOutputWithContext(context.Background())
}

func (i *mappingSpecLoad_balancerCookiePtrType) ToMappingSpecLoad_balancerCookiePtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecLoad_balancerCookiePtrOutput)
}

type MappingSpecLoad_balancerCookieOutput struct{ *pulumi.OutputState }

func (MappingSpecLoad_balancerCookieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecLoad_balancerCookie)(nil)).Elem()
}

func (o MappingSpecLoad_balancerCookieOutput) ToMappingSpecLoad_balancerCookieOutput() MappingSpecLoad_balancerCookieOutput {
	return o
}

func (o MappingSpecLoad_balancerCookieOutput) ToMappingSpecLoad_balancerCookieOutputWithContext(ctx context.Context) MappingSpecLoad_balancerCookieOutput {
	return o
}

func (o MappingSpecLoad_balancerCookieOutput) ToMappingSpecLoad_balancerCookiePtrOutput() MappingSpecLoad_balancerCookiePtrOutput {
	return o.ToMappingSpecLoad_balancerCookiePtrOutputWithContext(context.Background())
}

func (o MappingSpecLoad_balancerCookieOutput) ToMappingSpecLoad_balancerCookiePtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerCookiePtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancerCookie) *MappingSpecLoad_balancerCookie {
		return &v
	}).(MappingSpecLoad_balancerCookiePtrOutput)
}
func (o MappingSpecLoad_balancerCookieOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancerCookie) string { return v.Name }).(pulumi.StringOutput)
}

func (o MappingSpecLoad_balancerCookieOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancerCookie) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o MappingSpecLoad_balancerCookieOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecLoad_balancerCookie) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

type MappingSpecLoad_balancerCookiePtrOutput struct{ *pulumi.OutputState }

func (MappingSpecLoad_balancerCookiePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecLoad_balancerCookie)(nil)).Elem()
}

func (o MappingSpecLoad_balancerCookiePtrOutput) ToMappingSpecLoad_balancerCookiePtrOutput() MappingSpecLoad_balancerCookiePtrOutput {
	return o
}

func (o MappingSpecLoad_balancerCookiePtrOutput) ToMappingSpecLoad_balancerCookiePtrOutputWithContext(ctx context.Context) MappingSpecLoad_balancerCookiePtrOutput {
	return o
}

func (o MappingSpecLoad_balancerCookiePtrOutput) Elem() MappingSpecLoad_balancerCookieOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancerCookie) MappingSpecLoad_balancerCookie { return *v }).(MappingSpecLoad_balancerCookieOutput)
}

func (o MappingSpecLoad_balancerCookiePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancerCookie) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecLoad_balancerCookiePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancerCookie) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecLoad_balancerCookiePtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecLoad_balancerCookie) *string {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.StringPtrOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type MappingSpecModules struct {
}

// MappingSpecModulesInput is an input type that accepts MappingSpecModulesArgs and MappingSpecModulesOutput values.
// You can construct a concrete instance of `MappingSpecModulesInput` via:
//
//          MappingSpecModulesArgs{...}
type MappingSpecModulesInput interface {
	pulumi.Input

	ToMappingSpecModulesOutput() MappingSpecModulesOutput
	ToMappingSpecModulesOutputWithContext(context.Context) MappingSpecModulesOutput
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type MappingSpecModulesArgs struct {
}

func (MappingSpecModulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecModules)(nil)).Elem()
}

func (i MappingSpecModulesArgs) ToMappingSpecModulesOutput() MappingSpecModulesOutput {
	return i.ToMappingSpecModulesOutputWithContext(context.Background())
}

func (i MappingSpecModulesArgs) ToMappingSpecModulesOutputWithContext(ctx context.Context) MappingSpecModulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecModulesOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type MappingSpecModulesOutput struct{ *pulumi.OutputState }

func (MappingSpecModulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecModules)(nil)).Elem()
}

func (o MappingSpecModulesOutput) ToMappingSpecModulesOutput() MappingSpecModulesOutput {
	return o
}

func (o MappingSpecModulesOutput) ToMappingSpecModulesOutputWithContext(ctx context.Context) MappingSpecModulesOutput {
	return o
}

type MappingSpecQuery_parameters struct {
}

// MappingSpecQuery_parametersInput is an input type that accepts MappingSpecQuery_parametersArgs and MappingSpecQuery_parametersOutput values.
// You can construct a concrete instance of `MappingSpecQuery_parametersInput` via:
//
//          MappingSpecQuery_parametersArgs{...}
type MappingSpecQuery_parametersInput interface {
	pulumi.Input

	ToMappingSpecQuery_parametersOutput() MappingSpecQuery_parametersOutput
	ToMappingSpecQuery_parametersOutputWithContext(context.Context) MappingSpecQuery_parametersOutput
}

type MappingSpecQuery_parametersArgs struct {
}

func (MappingSpecQuery_parametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecQuery_parameters)(nil)).Elem()
}

func (i MappingSpecQuery_parametersArgs) ToMappingSpecQuery_parametersOutput() MappingSpecQuery_parametersOutput {
	return i.ToMappingSpecQuery_parametersOutputWithContext(context.Background())
}

func (i MappingSpecQuery_parametersArgs) ToMappingSpecQuery_parametersOutputWithContext(ctx context.Context) MappingSpecQuery_parametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecQuery_parametersOutput)
}

type MappingSpecQuery_parametersOutput struct{ *pulumi.OutputState }

func (MappingSpecQuery_parametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecQuery_parameters)(nil)).Elem()
}

func (o MappingSpecQuery_parametersOutput) ToMappingSpecQuery_parametersOutput() MappingSpecQuery_parametersOutput {
	return o
}

func (o MappingSpecQuery_parametersOutput) ToMappingSpecQuery_parametersOutputWithContext(ctx context.Context) MappingSpecQuery_parametersOutput {
	return o
}

type MappingSpecRegex_headers struct {
}

// MappingSpecRegex_headersInput is an input type that accepts MappingSpecRegex_headersArgs and MappingSpecRegex_headersOutput values.
// You can construct a concrete instance of `MappingSpecRegex_headersInput` via:
//
//          MappingSpecRegex_headersArgs{...}
type MappingSpecRegex_headersInput interface {
	pulumi.Input

	ToMappingSpecRegex_headersOutput() MappingSpecRegex_headersOutput
	ToMappingSpecRegex_headersOutputWithContext(context.Context) MappingSpecRegex_headersOutput
}

type MappingSpecRegex_headersArgs struct {
}

func (MappingSpecRegex_headersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_headers)(nil)).Elem()
}

func (i MappingSpecRegex_headersArgs) ToMappingSpecRegex_headersOutput() MappingSpecRegex_headersOutput {
	return i.ToMappingSpecRegex_headersOutputWithContext(context.Background())
}

func (i MappingSpecRegex_headersArgs) ToMappingSpecRegex_headersOutputWithContext(ctx context.Context) MappingSpecRegex_headersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRegex_headersOutput)
}

type MappingSpecRegex_headersOutput struct{ *pulumi.OutputState }

func (MappingSpecRegex_headersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_headers)(nil)).Elem()
}

func (o MappingSpecRegex_headersOutput) ToMappingSpecRegex_headersOutput() MappingSpecRegex_headersOutput {
	return o
}

func (o MappingSpecRegex_headersOutput) ToMappingSpecRegex_headersOutputWithContext(ctx context.Context) MappingSpecRegex_headersOutput {
	return o
}

type MappingSpecRegex_query_parameters struct {
}

// MappingSpecRegex_query_parametersInput is an input type that accepts MappingSpecRegex_query_parametersArgs and MappingSpecRegex_query_parametersOutput values.
// You can construct a concrete instance of `MappingSpecRegex_query_parametersInput` via:
//
//          MappingSpecRegex_query_parametersArgs{...}
type MappingSpecRegex_query_parametersInput interface {
	pulumi.Input

	ToMappingSpecRegex_query_parametersOutput() MappingSpecRegex_query_parametersOutput
	ToMappingSpecRegex_query_parametersOutputWithContext(context.Context) MappingSpecRegex_query_parametersOutput
}

type MappingSpecRegex_query_parametersArgs struct {
}

func (MappingSpecRegex_query_parametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_query_parameters)(nil)).Elem()
}

func (i MappingSpecRegex_query_parametersArgs) ToMappingSpecRegex_query_parametersOutput() MappingSpecRegex_query_parametersOutput {
	return i.ToMappingSpecRegex_query_parametersOutputWithContext(context.Background())
}

func (i MappingSpecRegex_query_parametersArgs) ToMappingSpecRegex_query_parametersOutputWithContext(ctx context.Context) MappingSpecRegex_query_parametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRegex_query_parametersOutput)
}

type MappingSpecRegex_query_parametersOutput struct{ *pulumi.OutputState }

func (MappingSpecRegex_query_parametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_query_parameters)(nil)).Elem()
}

func (o MappingSpecRegex_query_parametersOutput) ToMappingSpecRegex_query_parametersOutput() MappingSpecRegex_query_parametersOutput {
	return o
}

func (o MappingSpecRegex_query_parametersOutput) ToMappingSpecRegex_query_parametersOutputWithContext(ctx context.Context) MappingSpecRegex_query_parametersOutput {
	return o
}

// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
type MappingSpecRegex_redirect struct {
}

// MappingSpecRegex_redirectInput is an input type that accepts MappingSpecRegex_redirectArgs and MappingSpecRegex_redirectOutput values.
// You can construct a concrete instance of `MappingSpecRegex_redirectInput` via:
//
//          MappingSpecRegex_redirectArgs{...}
type MappingSpecRegex_redirectInput interface {
	pulumi.Input

	ToMappingSpecRegex_redirectOutput() MappingSpecRegex_redirectOutput
	ToMappingSpecRegex_redirectOutputWithContext(context.Context) MappingSpecRegex_redirectOutput
}

// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
type MappingSpecRegex_redirectArgs struct {
}

func (MappingSpecRegex_redirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_redirect)(nil)).Elem()
}

func (i MappingSpecRegex_redirectArgs) ToMappingSpecRegex_redirectOutput() MappingSpecRegex_redirectOutput {
	return i.ToMappingSpecRegex_redirectOutputWithContext(context.Background())
}

func (i MappingSpecRegex_redirectArgs) ToMappingSpecRegex_redirectOutputWithContext(ctx context.Context) MappingSpecRegex_redirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRegex_redirectOutput)
}

// Prefix regex rewrite to use when generating an HTTP redirect. Used with `host_redirect`.
type MappingSpecRegex_redirectOutput struct{ *pulumi.OutputState }

func (MappingSpecRegex_redirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_redirect)(nil)).Elem()
}

func (o MappingSpecRegex_redirectOutput) ToMappingSpecRegex_redirectOutput() MappingSpecRegex_redirectOutput {
	return o
}

func (o MappingSpecRegex_redirectOutput) ToMappingSpecRegex_redirectOutputWithContext(ctx context.Context) MappingSpecRegex_redirectOutput {
	return o
}

type MappingSpecRegex_rewrite struct {
}

// MappingSpecRegex_rewriteInput is an input type that accepts MappingSpecRegex_rewriteArgs and MappingSpecRegex_rewriteOutput values.
// You can construct a concrete instance of `MappingSpecRegex_rewriteInput` via:
//
//          MappingSpecRegex_rewriteArgs{...}
type MappingSpecRegex_rewriteInput interface {
	pulumi.Input

	ToMappingSpecRegex_rewriteOutput() MappingSpecRegex_rewriteOutput
	ToMappingSpecRegex_rewriteOutputWithContext(context.Context) MappingSpecRegex_rewriteOutput
}

type MappingSpecRegex_rewriteArgs struct {
}

func (MappingSpecRegex_rewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_rewrite)(nil)).Elem()
}

func (i MappingSpecRegex_rewriteArgs) ToMappingSpecRegex_rewriteOutput() MappingSpecRegex_rewriteOutput {
	return i.ToMappingSpecRegex_rewriteOutputWithContext(context.Background())
}

func (i MappingSpecRegex_rewriteArgs) ToMappingSpecRegex_rewriteOutputWithContext(ctx context.Context) MappingSpecRegex_rewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRegex_rewriteOutput)
}

type MappingSpecRegex_rewriteOutput struct{ *pulumi.OutputState }

func (MappingSpecRegex_rewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRegex_rewrite)(nil)).Elem()
}

func (o MappingSpecRegex_rewriteOutput) ToMappingSpecRegex_rewriteOutput() MappingSpecRegex_rewriteOutput {
	return o
}

func (o MappingSpecRegex_rewriteOutput) ToMappingSpecRegex_rewriteOutputWithContext(ctx context.Context) MappingSpecRegex_rewriteOutput {
	return o
}

type MappingSpecRetry_policy struct {
	Num_retries     *int    `pulumi:"num_retries"`
	Per_try_timeout *string `pulumi:"per_try_timeout"`
	Retry_on        *string `pulumi:"retry_on"`
}

// MappingSpecRetry_policyInput is an input type that accepts MappingSpecRetry_policyArgs and MappingSpecRetry_policyOutput values.
// You can construct a concrete instance of `MappingSpecRetry_policyInput` via:
//
//          MappingSpecRetry_policyArgs{...}
type MappingSpecRetry_policyInput interface {
	pulumi.Input

	ToMappingSpecRetry_policyOutput() MappingSpecRetry_policyOutput
	ToMappingSpecRetry_policyOutputWithContext(context.Context) MappingSpecRetry_policyOutput
}

type MappingSpecRetry_policyArgs struct {
	Num_retries     pulumi.IntPtrInput    `pulumi:"num_retries"`
	Per_try_timeout pulumi.StringPtrInput `pulumi:"per_try_timeout"`
	Retry_on        pulumi.StringPtrInput `pulumi:"retry_on"`
}

func (MappingSpecRetry_policyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRetry_policy)(nil)).Elem()
}

func (i MappingSpecRetry_policyArgs) ToMappingSpecRetry_policyOutput() MappingSpecRetry_policyOutput {
	return i.ToMappingSpecRetry_policyOutputWithContext(context.Background())
}

func (i MappingSpecRetry_policyArgs) ToMappingSpecRetry_policyOutputWithContext(ctx context.Context) MappingSpecRetry_policyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRetry_policyOutput)
}

func (i MappingSpecRetry_policyArgs) ToMappingSpecRetry_policyPtrOutput() MappingSpecRetry_policyPtrOutput {
	return i.ToMappingSpecRetry_policyPtrOutputWithContext(context.Background())
}

func (i MappingSpecRetry_policyArgs) ToMappingSpecRetry_policyPtrOutputWithContext(ctx context.Context) MappingSpecRetry_policyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRetry_policyOutput).ToMappingSpecRetry_policyPtrOutputWithContext(ctx)
}

// MappingSpecRetry_policyPtrInput is an input type that accepts MappingSpecRetry_policyArgs, MappingSpecRetry_policyPtr and MappingSpecRetry_policyPtrOutput values.
// You can construct a concrete instance of `MappingSpecRetry_policyPtrInput` via:
//
//          MappingSpecRetry_policyArgs{...}
//
//  or:
//
//          nil
type MappingSpecRetry_policyPtrInput interface {
	pulumi.Input

	ToMappingSpecRetry_policyPtrOutput() MappingSpecRetry_policyPtrOutput
	ToMappingSpecRetry_policyPtrOutputWithContext(context.Context) MappingSpecRetry_policyPtrOutput
}

type mappingSpecRetry_policyPtrType MappingSpecRetry_policyArgs

func MappingSpecRetry_policyPtr(v *MappingSpecRetry_policyArgs) MappingSpecRetry_policyPtrInput {
	return (*mappingSpecRetry_policyPtrType)(v)
}

func (*mappingSpecRetry_policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecRetry_policy)(nil)).Elem()
}

func (i *mappingSpecRetry_policyPtrType) ToMappingSpecRetry_policyPtrOutput() MappingSpecRetry_policyPtrOutput {
	return i.ToMappingSpecRetry_policyPtrOutputWithContext(context.Background())
}

func (i *mappingSpecRetry_policyPtrType) ToMappingSpecRetry_policyPtrOutputWithContext(ctx context.Context) MappingSpecRetry_policyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingSpecRetry_policyPtrOutput)
}

type MappingSpecRetry_policyOutput struct{ *pulumi.OutputState }

func (MappingSpecRetry_policyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingSpecRetry_policy)(nil)).Elem()
}

func (o MappingSpecRetry_policyOutput) ToMappingSpecRetry_policyOutput() MappingSpecRetry_policyOutput {
	return o
}

func (o MappingSpecRetry_policyOutput) ToMappingSpecRetry_policyOutputWithContext(ctx context.Context) MappingSpecRetry_policyOutput {
	return o
}

func (o MappingSpecRetry_policyOutput) ToMappingSpecRetry_policyPtrOutput() MappingSpecRetry_policyPtrOutput {
	return o.ToMappingSpecRetry_policyPtrOutputWithContext(context.Background())
}

func (o MappingSpecRetry_policyOutput) ToMappingSpecRetry_policyPtrOutputWithContext(ctx context.Context) MappingSpecRetry_policyPtrOutput {
	return o.ApplyT(func(v MappingSpecRetry_policy) *MappingSpecRetry_policy {
		return &v
	}).(MappingSpecRetry_policyPtrOutput)
}
func (o MappingSpecRetry_policyOutput) Num_retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MappingSpecRetry_policy) *int { return v.Num_retries }).(pulumi.IntPtrOutput)
}

func (o MappingSpecRetry_policyOutput) Per_try_timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecRetry_policy) *string { return v.Per_try_timeout }).(pulumi.StringPtrOutput)
}

func (o MappingSpecRetry_policyOutput) Retry_on() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingSpecRetry_policy) *string { return v.Retry_on }).(pulumi.StringPtrOutput)
}

type MappingSpecRetry_policyPtrOutput struct{ *pulumi.OutputState }

func (MappingSpecRetry_policyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingSpecRetry_policy)(nil)).Elem()
}

func (o MappingSpecRetry_policyPtrOutput) ToMappingSpecRetry_policyPtrOutput() MappingSpecRetry_policyPtrOutput {
	return o
}

func (o MappingSpecRetry_policyPtrOutput) ToMappingSpecRetry_policyPtrOutputWithContext(ctx context.Context) MappingSpecRetry_policyPtrOutput {
	return o
}

func (o MappingSpecRetry_policyPtrOutput) Elem() MappingSpecRetry_policyOutput {
	return o.ApplyT(func(v *MappingSpecRetry_policy) MappingSpecRetry_policy { return *v }).(MappingSpecRetry_policyOutput)
}

func (o MappingSpecRetry_policyPtrOutput) Num_retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MappingSpecRetry_policy) *int {
		if v == nil {
			return nil
		}
		return v.Num_retries
	}).(pulumi.IntPtrOutput)
}

func (o MappingSpecRetry_policyPtrOutput) Per_try_timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecRetry_policy) *string {
		if v == nil {
			return nil
		}
		return v.Per_try_timeout
	}).(pulumi.StringPtrOutput)
}

func (o MappingSpecRetry_policyPtrOutput) Retry_on() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingSpecRetry_policy) *string {
		if v == nil {
			return nil
		}
		return v.Retry_on
	}).(pulumi.StringPtrOutput)
}

// MappingStatus defines the observed state of Mapping
type MappingStatus struct {
	Reason *string `pulumi:"reason"`
	State  *string `pulumi:"state"`
}

// MappingStatusInput is an input type that accepts MappingStatusArgs and MappingStatusOutput values.
// You can construct a concrete instance of `MappingStatusInput` via:
//
//          MappingStatusArgs{...}
type MappingStatusInput interface {
	pulumi.Input

	ToMappingStatusOutput() MappingStatusOutput
	ToMappingStatusOutputWithContext(context.Context) MappingStatusOutput
}

// MappingStatus defines the observed state of Mapping
type MappingStatusArgs struct {
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	State  pulumi.StringPtrInput `pulumi:"state"`
}

func (MappingStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingStatus)(nil)).Elem()
}

func (i MappingStatusArgs) ToMappingStatusOutput() MappingStatusOutput {
	return i.ToMappingStatusOutputWithContext(context.Background())
}

func (i MappingStatusArgs) ToMappingStatusOutputWithContext(ctx context.Context) MappingStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingStatusOutput)
}

func (i MappingStatusArgs) ToMappingStatusPtrOutput() MappingStatusPtrOutput {
	return i.ToMappingStatusPtrOutputWithContext(context.Background())
}

func (i MappingStatusArgs) ToMappingStatusPtrOutputWithContext(ctx context.Context) MappingStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingStatusOutput).ToMappingStatusPtrOutputWithContext(ctx)
}

// MappingStatusPtrInput is an input type that accepts MappingStatusArgs, MappingStatusPtr and MappingStatusPtrOutput values.
// You can construct a concrete instance of `MappingStatusPtrInput` via:
//
//          MappingStatusArgs{...}
//
//  or:
//
//          nil
type MappingStatusPtrInput interface {
	pulumi.Input

	ToMappingStatusPtrOutput() MappingStatusPtrOutput
	ToMappingStatusPtrOutputWithContext(context.Context) MappingStatusPtrOutput
}

type mappingStatusPtrType MappingStatusArgs

func MappingStatusPtr(v *MappingStatusArgs) MappingStatusPtrInput {
	return (*mappingStatusPtrType)(v)
}

func (*mappingStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingStatus)(nil)).Elem()
}

func (i *mappingStatusPtrType) ToMappingStatusPtrOutput() MappingStatusPtrOutput {
	return i.ToMappingStatusPtrOutputWithContext(context.Background())
}

func (i *mappingStatusPtrType) ToMappingStatusPtrOutputWithContext(ctx context.Context) MappingStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingStatusPtrOutput)
}

// MappingStatus defines the observed state of Mapping
type MappingStatusOutput struct{ *pulumi.OutputState }

func (MappingStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingStatus)(nil)).Elem()
}

func (o MappingStatusOutput) ToMappingStatusOutput() MappingStatusOutput {
	return o
}

func (o MappingStatusOutput) ToMappingStatusOutputWithContext(ctx context.Context) MappingStatusOutput {
	return o
}

func (o MappingStatusOutput) ToMappingStatusPtrOutput() MappingStatusPtrOutput {
	return o.ToMappingStatusPtrOutputWithContext(context.Background())
}

func (o MappingStatusOutput) ToMappingStatusPtrOutputWithContext(ctx context.Context) MappingStatusPtrOutput {
	return o.ApplyT(func(v MappingStatus) *MappingStatus {
		return &v
	}).(MappingStatusPtrOutput)
}
func (o MappingStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o MappingStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type MappingStatusPtrOutput struct{ *pulumi.OutputState }

func (MappingStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MappingStatus)(nil)).Elem()
}

func (o MappingStatusPtrOutput) ToMappingStatusPtrOutput() MappingStatusPtrOutput {
	return o
}

func (o MappingStatusPtrOutput) ToMappingStatusPtrOutputWithContext(ctx context.Context) MappingStatusPtrOutput {
	return o
}

func (o MappingStatusPtrOutput) Elem() MappingStatusOutput {
	return o.ApplyT(func(v *MappingStatus) MappingStatus { return *v }).(MappingStatusOutput)
}

func (o MappingStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

func (o MappingStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MappingStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// A Module defines system-wide configuration.  The type of module is controlled by the .metadata.name; valid names are "ambassador" or "tls".
//  https://www.getambassador.io/docs/edge-stack/latest/topics/running/ambassador/#the-ambassador-module https://www.getambassador.io/docs/edge-stack/latest/topics/running/tls/#tls-module-deprecated
type ModuleType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *ModuleSpec        `pulumi:"spec"`
}

// ModuleTypeInput is an input type that accepts ModuleTypeArgs and ModuleTypeOutput values.
// You can construct a concrete instance of `ModuleTypeInput` via:
//
//          ModuleTypeArgs{...}
type ModuleTypeInput interface {
	pulumi.Input

	ToModuleTypeOutput() ModuleTypeOutput
	ToModuleTypeOutputWithContext(context.Context) ModuleTypeOutput
}

// A Module defines system-wide configuration.  The type of module is controlled by the .metadata.name; valid names are "ambassador" or "tls".
//  https://www.getambassador.io/docs/edge-stack/latest/topics/running/ambassador/#the-ambassador-module https://www.getambassador.io/docs/edge-stack/latest/topics/running/tls/#tls-module-deprecated
type ModuleTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       ModuleSpecPtrInput        `pulumi:"spec"`
}

func (ModuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleType)(nil)).Elem()
}

func (i ModuleTypeArgs) ToModuleTypeOutput() ModuleTypeOutput {
	return i.ToModuleTypeOutputWithContext(context.Background())
}

func (i ModuleTypeArgs) ToModuleTypeOutputWithContext(ctx context.Context) ModuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleTypeOutput)
}

// A Module defines system-wide configuration.  The type of module is controlled by the .metadata.name; valid names are "ambassador" or "tls".
//  https://www.getambassador.io/docs/edge-stack/latest/topics/running/ambassador/#the-ambassador-module https://www.getambassador.io/docs/edge-stack/latest/topics/running/tls/#tls-module-deprecated
type ModuleTypeOutput struct{ *pulumi.OutputState }

func (ModuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleType)(nil)).Elem()
}

func (o ModuleTypeOutput) ToModuleTypeOutput() ModuleTypeOutput {
	return o
}

func (o ModuleTypeOutput) ToModuleTypeOutputWithContext(ctx context.Context) ModuleTypeOutput {
	return o
}

func (o ModuleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModuleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ModuleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModuleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ModuleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ModuleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ModuleTypeOutput) Spec() ModuleSpecPtrOutput {
	return o.ApplyT(func(v ModuleType) *ModuleSpec { return v.Spec }).(ModuleSpecPtrOutput)
}

type ModuleMetadata struct {
}

// ModuleMetadataInput is an input type that accepts ModuleMetadataArgs and ModuleMetadataOutput values.
// You can construct a concrete instance of `ModuleMetadataInput` via:
//
//          ModuleMetadataArgs{...}
type ModuleMetadataInput interface {
	pulumi.Input

	ToModuleMetadataOutput() ModuleMetadataOutput
	ToModuleMetadataOutputWithContext(context.Context) ModuleMetadataOutput
}

type ModuleMetadataArgs struct {
}

func (ModuleMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleMetadata)(nil)).Elem()
}

func (i ModuleMetadataArgs) ToModuleMetadataOutput() ModuleMetadataOutput {
	return i.ToModuleMetadataOutputWithContext(context.Background())
}

func (i ModuleMetadataArgs) ToModuleMetadataOutputWithContext(ctx context.Context) ModuleMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleMetadataOutput)
}

type ModuleMetadataOutput struct{ *pulumi.OutputState }

func (ModuleMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleMetadata)(nil)).Elem()
}

func (o ModuleMetadataOutput) ToModuleMetadataOutput() ModuleMetadataOutput {
	return o
}

func (o ModuleMetadataOutput) ToModuleMetadataOutputWithContext(ctx context.Context) ModuleMetadataOutput {
	return o
}

type ModuleSpec struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id interface{} `pulumi:"ambassador_id"`
	// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
	Config map[string]interface{} `pulumi:"config"`
}

// ModuleSpecInput is an input type that accepts ModuleSpecArgs and ModuleSpecOutput values.
// You can construct a concrete instance of `ModuleSpecInput` via:
//
//          ModuleSpecArgs{...}
type ModuleSpecInput interface {
	pulumi.Input

	ToModuleSpecOutput() ModuleSpecOutput
	ToModuleSpecOutputWithContext(context.Context) ModuleSpecOutput
}

type ModuleSpecArgs struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id pulumi.Input `pulumi:"ambassador_id"`
	// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
	Config pulumi.MapInput `pulumi:"config"`
}

func (ModuleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleSpec)(nil)).Elem()
}

func (i ModuleSpecArgs) ToModuleSpecOutput() ModuleSpecOutput {
	return i.ToModuleSpecOutputWithContext(context.Background())
}

func (i ModuleSpecArgs) ToModuleSpecOutputWithContext(ctx context.Context) ModuleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleSpecOutput)
}

func (i ModuleSpecArgs) ToModuleSpecPtrOutput() ModuleSpecPtrOutput {
	return i.ToModuleSpecPtrOutputWithContext(context.Background())
}

func (i ModuleSpecArgs) ToModuleSpecPtrOutputWithContext(ctx context.Context) ModuleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleSpecOutput).ToModuleSpecPtrOutputWithContext(ctx)
}

// ModuleSpecPtrInput is an input type that accepts ModuleSpecArgs, ModuleSpecPtr and ModuleSpecPtrOutput values.
// You can construct a concrete instance of `ModuleSpecPtrInput` via:
//
//          ModuleSpecArgs{...}
//
//  or:
//
//          nil
type ModuleSpecPtrInput interface {
	pulumi.Input

	ToModuleSpecPtrOutput() ModuleSpecPtrOutput
	ToModuleSpecPtrOutputWithContext(context.Context) ModuleSpecPtrOutput
}

type moduleSpecPtrType ModuleSpecArgs

func ModuleSpecPtr(v *ModuleSpecArgs) ModuleSpecPtrInput {
	return (*moduleSpecPtrType)(v)
}

func (*moduleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleSpec)(nil)).Elem()
}

func (i *moduleSpecPtrType) ToModuleSpecPtrOutput() ModuleSpecPtrOutput {
	return i.ToModuleSpecPtrOutputWithContext(context.Background())
}

func (i *moduleSpecPtrType) ToModuleSpecPtrOutputWithContext(ctx context.Context) ModuleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleSpecPtrOutput)
}

type ModuleSpecOutput struct{ *pulumi.OutputState }

func (ModuleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleSpec)(nil)).Elem()
}

func (o ModuleSpecOutput) ToModuleSpecOutput() ModuleSpecOutput {
	return o
}

func (o ModuleSpecOutput) ToModuleSpecOutputWithContext(ctx context.Context) ModuleSpecOutput {
	return o
}

func (o ModuleSpecOutput) ToModuleSpecPtrOutput() ModuleSpecPtrOutput {
	return o.ToModuleSpecPtrOutputWithContext(context.Background())
}

func (o ModuleSpecOutput) ToModuleSpecPtrOutputWithContext(ctx context.Context) ModuleSpecPtrOutput {
	return o.ApplyT(func(v ModuleSpec) *ModuleSpec {
		return &v
	}).(ModuleSpecPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o ModuleSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v ModuleSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
func (o ModuleSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ModuleSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

type ModuleSpecPtrOutput struct{ *pulumi.OutputState }

func (ModuleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleSpec)(nil)).Elem()
}

func (o ModuleSpecPtrOutput) ToModuleSpecPtrOutput() ModuleSpecPtrOutput {
	return o
}

func (o ModuleSpecPtrOutput) ToModuleSpecPtrOutputWithContext(ctx context.Context) ModuleSpecPtrOutput {
	return o
}

func (o ModuleSpecPtrOutput) Elem() ModuleSpecOutput {
	return o.ApplyT(func(v *ModuleSpec) ModuleSpec { return *v }).(ModuleSpecOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o ModuleSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *ModuleSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
func (o ModuleSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *ModuleSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type ModuleSpecConfig struct {
}

// ModuleSpecConfigInput is an input type that accepts ModuleSpecConfigArgs and ModuleSpecConfigOutput values.
// You can construct a concrete instance of `ModuleSpecConfigInput` via:
//
//          ModuleSpecConfigArgs{...}
type ModuleSpecConfigInput interface {
	pulumi.Input

	ToModuleSpecConfigOutput() ModuleSpecConfigOutput
	ToModuleSpecConfigOutputWithContext(context.Context) ModuleSpecConfigOutput
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type ModuleSpecConfigArgs struct {
}

func (ModuleSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleSpecConfig)(nil)).Elem()
}

func (i ModuleSpecConfigArgs) ToModuleSpecConfigOutput() ModuleSpecConfigOutput {
	return i.ToModuleSpecConfigOutputWithContext(context.Background())
}

func (i ModuleSpecConfigArgs) ToModuleSpecConfigOutputWithContext(ctx context.Context) ModuleSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleSpecConfigOutput)
}

// UntypedDict is relatively opaque as a Go type, but it preserves its contents in a roundtrippable way.
type ModuleSpecConfigOutput struct{ *pulumi.OutputState }

func (ModuleSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModuleSpecConfig)(nil)).Elem()
}

func (o ModuleSpecConfigOutput) ToModuleSpecConfigOutput() ModuleSpecConfigOutput {
	return o
}

func (o ModuleSpecConfigOutput) ToModuleSpecConfigOutputWithContext(ctx context.Context) ModuleSpecConfigOutput {
	return o
}

// RateLimitService is the Schema for the ratelimitservices API
type RateLimitServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// RateLimitServiceSpec defines the desired state of RateLimitService
	Spec *RateLimitServiceSpec `pulumi:"spec"`
}

// RateLimitServiceTypeInput is an input type that accepts RateLimitServiceTypeArgs and RateLimitServiceTypeOutput values.
// You can construct a concrete instance of `RateLimitServiceTypeInput` via:
//
//          RateLimitServiceTypeArgs{...}
type RateLimitServiceTypeInput interface {
	pulumi.Input

	ToRateLimitServiceTypeOutput() RateLimitServiceTypeOutput
	ToRateLimitServiceTypeOutputWithContext(context.Context) RateLimitServiceTypeOutput
}

// RateLimitService is the Schema for the ratelimitservices API
type RateLimitServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RateLimitServiceSpec defines the desired state of RateLimitService
	Spec RateLimitServiceSpecPtrInput `pulumi:"spec"`
}

func (RateLimitServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitServiceType)(nil)).Elem()
}

func (i RateLimitServiceTypeArgs) ToRateLimitServiceTypeOutput() RateLimitServiceTypeOutput {
	return i.ToRateLimitServiceTypeOutputWithContext(context.Background())
}

func (i RateLimitServiceTypeArgs) ToRateLimitServiceTypeOutputWithContext(ctx context.Context) RateLimitServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitServiceTypeOutput)
}

// RateLimitService is the Schema for the ratelimitservices API
type RateLimitServiceTypeOutput struct{ *pulumi.OutputState }

func (RateLimitServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitServiceType)(nil)).Elem()
}

func (o RateLimitServiceTypeOutput) ToRateLimitServiceTypeOutput() RateLimitServiceTypeOutput {
	return o
}

func (o RateLimitServiceTypeOutput) ToRateLimitServiceTypeOutputWithContext(ctx context.Context) RateLimitServiceTypeOutput {
	return o
}

func (o RateLimitServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RateLimitServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RateLimitServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v RateLimitServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RateLimitServiceSpec defines the desired state of RateLimitService
func (o RateLimitServiceTypeOutput) Spec() RateLimitServiceSpecPtrOutput {
	return o.ApplyT(func(v RateLimitServiceType) *RateLimitServiceSpec { return v.Spec }).(RateLimitServiceSpecPtrOutput)
}

type RateLimitServiceMetadata struct {
}

// RateLimitServiceMetadataInput is an input type that accepts RateLimitServiceMetadataArgs and RateLimitServiceMetadataOutput values.
// You can construct a concrete instance of `RateLimitServiceMetadataInput` via:
//
//          RateLimitServiceMetadataArgs{...}
type RateLimitServiceMetadataInput interface {
	pulumi.Input

	ToRateLimitServiceMetadataOutput() RateLimitServiceMetadataOutput
	ToRateLimitServiceMetadataOutputWithContext(context.Context) RateLimitServiceMetadataOutput
}

type RateLimitServiceMetadataArgs struct {
}

func (RateLimitServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitServiceMetadata)(nil)).Elem()
}

func (i RateLimitServiceMetadataArgs) ToRateLimitServiceMetadataOutput() RateLimitServiceMetadataOutput {
	return i.ToRateLimitServiceMetadataOutputWithContext(context.Background())
}

func (i RateLimitServiceMetadataArgs) ToRateLimitServiceMetadataOutputWithContext(ctx context.Context) RateLimitServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitServiceMetadataOutput)
}

type RateLimitServiceMetadataOutput struct{ *pulumi.OutputState }

func (RateLimitServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitServiceMetadata)(nil)).Elem()
}

func (o RateLimitServiceMetadataOutput) ToRateLimitServiceMetadataOutput() RateLimitServiceMetadataOutput {
	return o
}

func (o RateLimitServiceMetadataOutput) ToRateLimitServiceMetadataOutputWithContext(ctx context.Context) RateLimitServiceMetadataOutput {
	return o
}

// RateLimitServiceSpec defines the desired state of RateLimitService
type RateLimitServiceSpec struct {
	// Common to all Ambassador objects.
	Ambassador_id    interface{} `pulumi:"ambassador_id"`
	Domain           *string     `pulumi:"domain"`
	Protocol_version *string     `pulumi:"protocol_version"`
	Service          string      `pulumi:"service"`
	Timeout_ms       *int        `pulumi:"timeout_ms"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls interface{} `pulumi:"tls"`
}

// RateLimitServiceSpecInput is an input type that accepts RateLimitServiceSpecArgs and RateLimitServiceSpecOutput values.
// You can construct a concrete instance of `RateLimitServiceSpecInput` via:
//
//          RateLimitServiceSpecArgs{...}
type RateLimitServiceSpecInput interface {
	pulumi.Input

	ToRateLimitServiceSpecOutput() RateLimitServiceSpecOutput
	ToRateLimitServiceSpecOutputWithContext(context.Context) RateLimitServiceSpecOutput
}

// RateLimitServiceSpec defines the desired state of RateLimitService
type RateLimitServiceSpecArgs struct {
	// Common to all Ambassador objects.
	Ambassador_id    pulumi.Input          `pulumi:"ambassador_id"`
	Domain           pulumi.StringPtrInput `pulumi:"domain"`
	Protocol_version pulumi.StringPtrInput `pulumi:"protocol_version"`
	Service          pulumi.StringInput    `pulumi:"service"`
	Timeout_ms       pulumi.IntPtrInput    `pulumi:"timeout_ms"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls pulumi.Input `pulumi:"tls"`
}

func (RateLimitServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitServiceSpec)(nil)).Elem()
}

func (i RateLimitServiceSpecArgs) ToRateLimitServiceSpecOutput() RateLimitServiceSpecOutput {
	return i.ToRateLimitServiceSpecOutputWithContext(context.Background())
}

func (i RateLimitServiceSpecArgs) ToRateLimitServiceSpecOutputWithContext(ctx context.Context) RateLimitServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitServiceSpecOutput)
}

func (i RateLimitServiceSpecArgs) ToRateLimitServiceSpecPtrOutput() RateLimitServiceSpecPtrOutput {
	return i.ToRateLimitServiceSpecPtrOutputWithContext(context.Background())
}

func (i RateLimitServiceSpecArgs) ToRateLimitServiceSpecPtrOutputWithContext(ctx context.Context) RateLimitServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitServiceSpecOutput).ToRateLimitServiceSpecPtrOutputWithContext(ctx)
}

// RateLimitServiceSpecPtrInput is an input type that accepts RateLimitServiceSpecArgs, RateLimitServiceSpecPtr and RateLimitServiceSpecPtrOutput values.
// You can construct a concrete instance of `RateLimitServiceSpecPtrInput` via:
//
//          RateLimitServiceSpecArgs{...}
//
//  or:
//
//          nil
type RateLimitServiceSpecPtrInput interface {
	pulumi.Input

	ToRateLimitServiceSpecPtrOutput() RateLimitServiceSpecPtrOutput
	ToRateLimitServiceSpecPtrOutputWithContext(context.Context) RateLimitServiceSpecPtrOutput
}

type rateLimitServiceSpecPtrType RateLimitServiceSpecArgs

func RateLimitServiceSpecPtr(v *RateLimitServiceSpecArgs) RateLimitServiceSpecPtrInput {
	return (*rateLimitServiceSpecPtrType)(v)
}

func (*rateLimitServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimitServiceSpec)(nil)).Elem()
}

func (i *rateLimitServiceSpecPtrType) ToRateLimitServiceSpecPtrOutput() RateLimitServiceSpecPtrOutput {
	return i.ToRateLimitServiceSpecPtrOutputWithContext(context.Background())
}

func (i *rateLimitServiceSpecPtrType) ToRateLimitServiceSpecPtrOutputWithContext(ctx context.Context) RateLimitServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RateLimitServiceSpecPtrOutput)
}

// RateLimitServiceSpec defines the desired state of RateLimitService
type RateLimitServiceSpecOutput struct{ *pulumi.OutputState }

func (RateLimitServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RateLimitServiceSpec)(nil)).Elem()
}

func (o RateLimitServiceSpecOutput) ToRateLimitServiceSpecOutput() RateLimitServiceSpecOutput {
	return o
}

func (o RateLimitServiceSpecOutput) ToRateLimitServiceSpecOutputWithContext(ctx context.Context) RateLimitServiceSpecOutput {
	return o
}

func (o RateLimitServiceSpecOutput) ToRateLimitServiceSpecPtrOutput() RateLimitServiceSpecPtrOutput {
	return o.ToRateLimitServiceSpecPtrOutputWithContext(context.Background())
}

func (o RateLimitServiceSpecOutput) ToRateLimitServiceSpecPtrOutputWithContext(ctx context.Context) RateLimitServiceSpecPtrOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) *RateLimitServiceSpec {
		return &v
	}).(RateLimitServiceSpecPtrOutput)
}

// Common to all Ambassador objects.
func (o RateLimitServiceSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o RateLimitServiceSpecOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceSpecOutput) Protocol_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) *string { return v.Protocol_version }).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceSpecOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) string { return v.Service }).(pulumi.StringOutput)
}

func (o RateLimitServiceSpecOutput) Timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) *int { return v.Timeout_ms }).(pulumi.IntPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o RateLimitServiceSpecOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v RateLimitServiceSpec) interface{} { return v.Tls }).(pulumi.AnyOutput)
}

type RateLimitServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (RateLimitServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RateLimitServiceSpec)(nil)).Elem()
}

func (o RateLimitServiceSpecPtrOutput) ToRateLimitServiceSpecPtrOutput() RateLimitServiceSpecPtrOutput {
	return o
}

func (o RateLimitServiceSpecPtrOutput) ToRateLimitServiceSpecPtrOutputWithContext(ctx context.Context) RateLimitServiceSpecPtrOutput {
	return o
}

func (o RateLimitServiceSpecPtrOutput) Elem() RateLimitServiceSpecOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) RateLimitServiceSpec { return *v }).(RateLimitServiceSpecOutput)
}

// Common to all Ambassador objects.
func (o RateLimitServiceSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o RateLimitServiceSpecPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceSpecPtrOutput) Protocol_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Protocol_version
	}).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceSpecPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

func (o RateLimitServiceSpecPtrOutput) Timeout_ms() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.Timeout_ms
	}).(pulumi.IntPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o RateLimitServiceSpecPtrOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v *RateLimitServiceSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.AnyOutput)
}

// TCPMapping is the Schema for the tcpmappings API
type TCPMappingType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec *TCPMappingSpec `pulumi:"spec"`
}

// TCPMappingTypeInput is an input type that accepts TCPMappingTypeArgs and TCPMappingTypeOutput values.
// You can construct a concrete instance of `TCPMappingTypeInput` via:
//
//          TCPMappingTypeArgs{...}
type TCPMappingTypeInput interface {
	pulumi.Input

	ToTCPMappingTypeOutput() TCPMappingTypeOutput
	ToTCPMappingTypeOutputWithContext(context.Context) TCPMappingTypeOutput
}

// TCPMapping is the Schema for the tcpmappings API
type TCPMappingTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec TCPMappingSpecPtrInput `pulumi:"spec"`
}

func (TCPMappingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingType)(nil)).Elem()
}

func (i TCPMappingTypeArgs) ToTCPMappingTypeOutput() TCPMappingTypeOutput {
	return i.ToTCPMappingTypeOutputWithContext(context.Background())
}

func (i TCPMappingTypeArgs) ToTCPMappingTypeOutputWithContext(ctx context.Context) TCPMappingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingTypeOutput)
}

// TCPMapping is the Schema for the tcpmappings API
type TCPMappingTypeOutput struct{ *pulumi.OutputState }

func (TCPMappingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingType)(nil)).Elem()
}

func (o TCPMappingTypeOutput) ToTCPMappingTypeOutput() TCPMappingTypeOutput {
	return o
}

func (o TCPMappingTypeOutput) ToTCPMappingTypeOutputWithContext(ctx context.Context) TCPMappingTypeOutput {
	return o
}

func (o TCPMappingTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TCPMappingTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TCPMappingTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TCPMappingType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// TCPMappingSpec defines the desired state of TCPMapping
func (o TCPMappingTypeOutput) Spec() TCPMappingSpecPtrOutput {
	return o.ApplyT(func(v TCPMappingType) *TCPMappingSpec { return v.Spec }).(TCPMappingSpecPtrOutput)
}

type TCPMappingMetadata struct {
}

// TCPMappingMetadataInput is an input type that accepts TCPMappingMetadataArgs and TCPMappingMetadataOutput values.
// You can construct a concrete instance of `TCPMappingMetadataInput` via:
//
//          TCPMappingMetadataArgs{...}
type TCPMappingMetadataInput interface {
	pulumi.Input

	ToTCPMappingMetadataOutput() TCPMappingMetadataOutput
	ToTCPMappingMetadataOutputWithContext(context.Context) TCPMappingMetadataOutput
}

type TCPMappingMetadataArgs struct {
}

func (TCPMappingMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingMetadata)(nil)).Elem()
}

func (i TCPMappingMetadataArgs) ToTCPMappingMetadataOutput() TCPMappingMetadataOutput {
	return i.ToTCPMappingMetadataOutputWithContext(context.Background())
}

func (i TCPMappingMetadataArgs) ToTCPMappingMetadataOutputWithContext(ctx context.Context) TCPMappingMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingMetadataOutput)
}

type TCPMappingMetadataOutput struct{ *pulumi.OutputState }

func (TCPMappingMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingMetadata)(nil)).Elem()
}

func (o TCPMappingMetadataOutput) ToTCPMappingMetadataOutput() TCPMappingMetadataOutput {
	return o
}

func (o TCPMappingMetadataOutput) ToTCPMappingMetadataOutputWithContext(ctx context.Context) TCPMappingMetadataOutput {
	return o
}

// TCPMappingSpec defines the desired state of TCPMapping
type TCPMappingSpec struct {
	Address *string `pulumi:"address"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id    interface{}                      `pulumi:"ambassador_id"`
	Circuit_breakers []TCPMappingSpecCircuit_breakers `pulumi:"circuit_breakers"`
	Cluster_tag      *string                          `pulumi:"cluster_tag"`
	Enable_ipv4      *bool                            `pulumi:"enable_ipv4"`
	Enable_ipv6      *bool                            `pulumi:"enable_ipv6"`
	Host             *string                          `pulumi:"host"`
	// FIXME(lukeshu): Surely this should be an 'int'?
	Idle_timeout_ms *string `pulumi:"idle_timeout_ms"`
	// Port isn't a pointer because it's required.
	Port     int     `pulumi:"port"`
	Resolver *string `pulumi:"resolver"`
	Service  string  `pulumi:"service"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls    interface{} `pulumi:"tls"`
	Weight *int        `pulumi:"weight"`
}

// TCPMappingSpecInput is an input type that accepts TCPMappingSpecArgs and TCPMappingSpecOutput values.
// You can construct a concrete instance of `TCPMappingSpecInput` via:
//
//          TCPMappingSpecArgs{...}
type TCPMappingSpecInput interface {
	pulumi.Input

	ToTCPMappingSpecOutput() TCPMappingSpecOutput
	ToTCPMappingSpecOutputWithContext(context.Context) TCPMappingSpecOutput
}

// TCPMappingSpec defines the desired state of TCPMapping
type TCPMappingSpecArgs struct {
	Address pulumi.StringPtrInput `pulumi:"address"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id    pulumi.Input                             `pulumi:"ambassador_id"`
	Circuit_breakers TCPMappingSpecCircuit_breakersArrayInput `pulumi:"circuit_breakers"`
	Cluster_tag      pulumi.StringPtrInput                    `pulumi:"cluster_tag"`
	Enable_ipv4      pulumi.BoolPtrInput                      `pulumi:"enable_ipv4"`
	Enable_ipv6      pulumi.BoolPtrInput                      `pulumi:"enable_ipv6"`
	Host             pulumi.StringPtrInput                    `pulumi:"host"`
	// FIXME(lukeshu): Surely this should be an 'int'?
	Idle_timeout_ms pulumi.StringPtrInput `pulumi:"idle_timeout_ms"`
	// Port isn't a pointer because it's required.
	Port     pulumi.IntInput       `pulumi:"port"`
	Resolver pulumi.StringPtrInput `pulumi:"resolver"`
	Service  pulumi.StringInput    `pulumi:"service"`
	// BoolOrString is a type that can hold a Boolean or a string.
	Tls    pulumi.Input       `pulumi:"tls"`
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (TCPMappingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingSpec)(nil)).Elem()
}

func (i TCPMappingSpecArgs) ToTCPMappingSpecOutput() TCPMappingSpecOutput {
	return i.ToTCPMappingSpecOutputWithContext(context.Background())
}

func (i TCPMappingSpecArgs) ToTCPMappingSpecOutputWithContext(ctx context.Context) TCPMappingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingSpecOutput)
}

func (i TCPMappingSpecArgs) ToTCPMappingSpecPtrOutput() TCPMappingSpecPtrOutput {
	return i.ToTCPMappingSpecPtrOutputWithContext(context.Background())
}

func (i TCPMappingSpecArgs) ToTCPMappingSpecPtrOutputWithContext(ctx context.Context) TCPMappingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingSpecOutput).ToTCPMappingSpecPtrOutputWithContext(ctx)
}

// TCPMappingSpecPtrInput is an input type that accepts TCPMappingSpecArgs, TCPMappingSpecPtr and TCPMappingSpecPtrOutput values.
// You can construct a concrete instance of `TCPMappingSpecPtrInput` via:
//
//          TCPMappingSpecArgs{...}
//
//  or:
//
//          nil
type TCPMappingSpecPtrInput interface {
	pulumi.Input

	ToTCPMappingSpecPtrOutput() TCPMappingSpecPtrOutput
	ToTCPMappingSpecPtrOutputWithContext(context.Context) TCPMappingSpecPtrOutput
}

type tcpmappingSpecPtrType TCPMappingSpecArgs

func TCPMappingSpecPtr(v *TCPMappingSpecArgs) TCPMappingSpecPtrInput {
	return (*tcpmappingSpecPtrType)(v)
}

func (*tcpmappingSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPMappingSpec)(nil)).Elem()
}

func (i *tcpmappingSpecPtrType) ToTCPMappingSpecPtrOutput() TCPMappingSpecPtrOutput {
	return i.ToTCPMappingSpecPtrOutputWithContext(context.Background())
}

func (i *tcpmappingSpecPtrType) ToTCPMappingSpecPtrOutputWithContext(ctx context.Context) TCPMappingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingSpecPtrOutput)
}

// TCPMappingSpec defines the desired state of TCPMapping
type TCPMappingSpecOutput struct{ *pulumi.OutputState }

func (TCPMappingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingSpec)(nil)).Elem()
}

func (o TCPMappingSpecOutput) ToTCPMappingSpecOutput() TCPMappingSpecOutput {
	return o
}

func (o TCPMappingSpecOutput) ToTCPMappingSpecOutputWithContext(ctx context.Context) TCPMappingSpecOutput {
	return o
}

func (o TCPMappingSpecOutput) ToTCPMappingSpecPtrOutput() TCPMappingSpecPtrOutput {
	return o.ToTCPMappingSpecPtrOutputWithContext(context.Background())
}

func (o TCPMappingSpecOutput) ToTCPMappingSpecPtrOutputWithContext(ctx context.Context) TCPMappingSpecPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *TCPMappingSpec {
		return &v
	}).(TCPMappingSpecPtrOutput)
}
func (o TCPMappingSpecOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o TCPMappingSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v TCPMappingSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o TCPMappingSpecOutput) Circuit_breakers() TCPMappingSpecCircuit_breakersArrayOutput {
	return o.ApplyT(func(v TCPMappingSpec) []TCPMappingSpecCircuit_breakers { return v.Circuit_breakers }).(TCPMappingSpecCircuit_breakersArrayOutput)
}

func (o TCPMappingSpecOutput) Cluster_tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *string { return v.Cluster_tag }).(pulumi.StringPtrOutput)
}

func (o TCPMappingSpecOutput) Enable_ipv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *bool { return v.Enable_ipv4 }).(pulumi.BoolPtrOutput)
}

func (o TCPMappingSpecOutput) Enable_ipv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *bool { return v.Enable_ipv6 }).(pulumi.BoolPtrOutput)
}

func (o TCPMappingSpecOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// FIXME(lukeshu): Surely this should be an 'int'?
func (o TCPMappingSpecOutput) Idle_timeout_ms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *string { return v.Idle_timeout_ms }).(pulumi.StringPtrOutput)
}

// Port isn't a pointer because it's required.
func (o TCPMappingSpecOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TCPMappingSpec) int { return v.Port }).(pulumi.IntOutput)
}

func (o TCPMappingSpecOutput) Resolver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *string { return v.Resolver }).(pulumi.StringPtrOutput)
}

func (o TCPMappingSpecOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v TCPMappingSpec) string { return v.Service }).(pulumi.StringOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o TCPMappingSpecOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v TCPMappingSpec) interface{} { return v.Tls }).(pulumi.AnyOutput)
}

func (o TCPMappingSpecOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPMappingSpec) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TCPMappingSpecPtrOutput struct{ *pulumi.OutputState }

func (TCPMappingSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPMappingSpec)(nil)).Elem()
}

func (o TCPMappingSpecPtrOutput) ToTCPMappingSpecPtrOutput() TCPMappingSpecPtrOutput {
	return o
}

func (o TCPMappingSpecPtrOutput) ToTCPMappingSpecPtrOutputWithContext(ctx context.Context) TCPMappingSpecPtrOutput {
	return o
}

func (o TCPMappingSpecPtrOutput) Elem() TCPMappingSpecOutput {
	return o.ApplyT(func(v *TCPMappingSpec) TCPMappingSpec { return *v }).(TCPMappingSpecOutput)
}

func (o TCPMappingSpecPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o TCPMappingSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *TCPMappingSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o TCPMappingSpecPtrOutput) Circuit_breakers() TCPMappingSpecCircuit_breakersArrayOutput {
	return o.ApplyT(func(v *TCPMappingSpec) []TCPMappingSpecCircuit_breakers {
		if v == nil {
			return nil
		}
		return v.Circuit_breakers
	}).(TCPMappingSpecCircuit_breakersArrayOutput)
}

func (o TCPMappingSpecPtrOutput) Cluster_tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Cluster_tag
	}).(pulumi.StringPtrOutput)
}

func (o TCPMappingSpecPtrOutput) Enable_ipv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Enable_ipv4
	}).(pulumi.BoolPtrOutput)
}

func (o TCPMappingSpecPtrOutput) Enable_ipv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Enable_ipv6
	}).(pulumi.BoolPtrOutput)
}

func (o TCPMappingSpecPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// FIXME(lukeshu): Surely this should be an 'int'?
func (o TCPMappingSpecPtrOutput) Idle_timeout_ms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Idle_timeout_ms
	}).(pulumi.StringPtrOutput)
}

// Port isn't a pointer because it's required.
func (o TCPMappingSpecPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

func (o TCPMappingSpecPtrOutput) Resolver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *string {
		if v == nil {
			return nil
		}
		return v.Resolver
	}).(pulumi.StringPtrOutput)
}

func (o TCPMappingSpecPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// BoolOrString is a type that can hold a Boolean or a string.
func (o TCPMappingSpecPtrOutput) Tls() pulumi.AnyOutput {
	return o.ApplyT(func(v *TCPMappingSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.AnyOutput)
}

func (o TCPMappingSpecPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPMappingSpec) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type TCPMappingSpecCircuit_breakers struct {
	Max_connections      *int    `pulumi:"max_connections"`
	Max_pending_requests *int    `pulumi:"max_pending_requests"`
	Max_requests         *int    `pulumi:"max_requests"`
	Max_retries          *int    `pulumi:"max_retries"`
	Priority             *string `pulumi:"priority"`
}

// TCPMappingSpecCircuit_breakersInput is an input type that accepts TCPMappingSpecCircuit_breakersArgs and TCPMappingSpecCircuit_breakersOutput values.
// You can construct a concrete instance of `TCPMappingSpecCircuit_breakersInput` via:
//
//          TCPMappingSpecCircuit_breakersArgs{...}
type TCPMappingSpecCircuit_breakersInput interface {
	pulumi.Input

	ToTCPMappingSpecCircuit_breakersOutput() TCPMappingSpecCircuit_breakersOutput
	ToTCPMappingSpecCircuit_breakersOutputWithContext(context.Context) TCPMappingSpecCircuit_breakersOutput
}

type TCPMappingSpecCircuit_breakersArgs struct {
	Max_connections      pulumi.IntPtrInput    `pulumi:"max_connections"`
	Max_pending_requests pulumi.IntPtrInput    `pulumi:"max_pending_requests"`
	Max_requests         pulumi.IntPtrInput    `pulumi:"max_requests"`
	Max_retries          pulumi.IntPtrInput    `pulumi:"max_retries"`
	Priority             pulumi.StringPtrInput `pulumi:"priority"`
}

func (TCPMappingSpecCircuit_breakersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingSpecCircuit_breakers)(nil)).Elem()
}

func (i TCPMappingSpecCircuit_breakersArgs) ToTCPMappingSpecCircuit_breakersOutput() TCPMappingSpecCircuit_breakersOutput {
	return i.ToTCPMappingSpecCircuit_breakersOutputWithContext(context.Background())
}

func (i TCPMappingSpecCircuit_breakersArgs) ToTCPMappingSpecCircuit_breakersOutputWithContext(ctx context.Context) TCPMappingSpecCircuit_breakersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingSpecCircuit_breakersOutput)
}

// TCPMappingSpecCircuit_breakersArrayInput is an input type that accepts TCPMappingSpecCircuit_breakersArray and TCPMappingSpecCircuit_breakersArrayOutput values.
// You can construct a concrete instance of `TCPMappingSpecCircuit_breakersArrayInput` via:
//
//          TCPMappingSpecCircuit_breakersArray{ TCPMappingSpecCircuit_breakersArgs{...} }
type TCPMappingSpecCircuit_breakersArrayInput interface {
	pulumi.Input

	ToTCPMappingSpecCircuit_breakersArrayOutput() TCPMappingSpecCircuit_breakersArrayOutput
	ToTCPMappingSpecCircuit_breakersArrayOutputWithContext(context.Context) TCPMappingSpecCircuit_breakersArrayOutput
}

type TCPMappingSpecCircuit_breakersArray []TCPMappingSpecCircuit_breakersInput

func (TCPMappingSpecCircuit_breakersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TCPMappingSpecCircuit_breakers)(nil)).Elem()
}

func (i TCPMappingSpecCircuit_breakersArray) ToTCPMappingSpecCircuit_breakersArrayOutput() TCPMappingSpecCircuit_breakersArrayOutput {
	return i.ToTCPMappingSpecCircuit_breakersArrayOutputWithContext(context.Background())
}

func (i TCPMappingSpecCircuit_breakersArray) ToTCPMappingSpecCircuit_breakersArrayOutputWithContext(ctx context.Context) TCPMappingSpecCircuit_breakersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingSpecCircuit_breakersArrayOutput)
}

type TCPMappingSpecCircuit_breakersOutput struct{ *pulumi.OutputState }

func (TCPMappingSpecCircuit_breakersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMappingSpecCircuit_breakers)(nil)).Elem()
}

func (o TCPMappingSpecCircuit_breakersOutput) ToTCPMappingSpecCircuit_breakersOutput() TCPMappingSpecCircuit_breakersOutput {
	return o
}

func (o TCPMappingSpecCircuit_breakersOutput) ToTCPMappingSpecCircuit_breakersOutputWithContext(ctx context.Context) TCPMappingSpecCircuit_breakersOutput {
	return o
}

func (o TCPMappingSpecCircuit_breakersOutput) Max_connections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPMappingSpecCircuit_breakers) *int { return v.Max_connections }).(pulumi.IntPtrOutput)
}

func (o TCPMappingSpecCircuit_breakersOutput) Max_pending_requests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPMappingSpecCircuit_breakers) *int { return v.Max_pending_requests }).(pulumi.IntPtrOutput)
}

func (o TCPMappingSpecCircuit_breakersOutput) Max_requests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPMappingSpecCircuit_breakers) *int { return v.Max_requests }).(pulumi.IntPtrOutput)
}

func (o TCPMappingSpecCircuit_breakersOutput) Max_retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPMappingSpecCircuit_breakers) *int { return v.Max_retries }).(pulumi.IntPtrOutput)
}

func (o TCPMappingSpecCircuit_breakersOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPMappingSpecCircuit_breakers) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

type TCPMappingSpecCircuit_breakersArrayOutput struct{ *pulumi.OutputState }

func (TCPMappingSpecCircuit_breakersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TCPMappingSpecCircuit_breakers)(nil)).Elem()
}

func (o TCPMappingSpecCircuit_breakersArrayOutput) ToTCPMappingSpecCircuit_breakersArrayOutput() TCPMappingSpecCircuit_breakersArrayOutput {
	return o
}

func (o TCPMappingSpecCircuit_breakersArrayOutput) ToTCPMappingSpecCircuit_breakersArrayOutputWithContext(ctx context.Context) TCPMappingSpecCircuit_breakersArrayOutput {
	return o
}

func (o TCPMappingSpecCircuit_breakersArrayOutput) Index(i pulumi.IntInput) TCPMappingSpecCircuit_breakersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TCPMappingSpecCircuit_breakers {
		return vs[0].([]TCPMappingSpecCircuit_breakers)[vs[1].(int)]
	}).(TCPMappingSpecCircuit_breakersOutput)
}

// TLSContext is the Schema for the tlscontexts API
type TLSContextType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TLSContextSpec defines the desired state of TLSContext
	Spec *TLSContextSpec `pulumi:"spec"`
}

// TLSContextTypeInput is an input type that accepts TLSContextTypeArgs and TLSContextTypeOutput values.
// You can construct a concrete instance of `TLSContextTypeInput` via:
//
//          TLSContextTypeArgs{...}
type TLSContextTypeInput interface {
	pulumi.Input

	ToTLSContextTypeOutput() TLSContextTypeOutput
	ToTLSContextTypeOutputWithContext(context.Context) TLSContextTypeOutput
}

// TLSContext is the Schema for the tlscontexts API
type TLSContextTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// TLSContextSpec defines the desired state of TLSContext
	Spec TLSContextSpecPtrInput `pulumi:"spec"`
}

func (TLSContextTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContextType)(nil)).Elem()
}

func (i TLSContextTypeArgs) ToTLSContextTypeOutput() TLSContextTypeOutput {
	return i.ToTLSContextTypeOutputWithContext(context.Background())
}

func (i TLSContextTypeArgs) ToTLSContextTypeOutputWithContext(ctx context.Context) TLSContextTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSContextTypeOutput)
}

// TLSContext is the Schema for the tlscontexts API
type TLSContextTypeOutput struct{ *pulumi.OutputState }

func (TLSContextTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContextType)(nil)).Elem()
}

func (o TLSContextTypeOutput) ToTLSContextTypeOutput() TLSContextTypeOutput {
	return o
}

func (o TLSContextTypeOutput) ToTLSContextTypeOutputWithContext(ctx context.Context) TLSContextTypeOutput {
	return o
}

func (o TLSContextTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TLSContextTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TLSContextTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TLSContextType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// TLSContextSpec defines the desired state of TLSContext
func (o TLSContextTypeOutput) Spec() TLSContextSpecPtrOutput {
	return o.ApplyT(func(v TLSContextType) *TLSContextSpec { return v.Spec }).(TLSContextSpecPtrOutput)
}

type TLSContextMetadata struct {
}

// TLSContextMetadataInput is an input type that accepts TLSContextMetadataArgs and TLSContextMetadataOutput values.
// You can construct a concrete instance of `TLSContextMetadataInput` via:
//
//          TLSContextMetadataArgs{...}
type TLSContextMetadataInput interface {
	pulumi.Input

	ToTLSContextMetadataOutput() TLSContextMetadataOutput
	ToTLSContextMetadataOutputWithContext(context.Context) TLSContextMetadataOutput
}

type TLSContextMetadataArgs struct {
}

func (TLSContextMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContextMetadata)(nil)).Elem()
}

func (i TLSContextMetadataArgs) ToTLSContextMetadataOutput() TLSContextMetadataOutput {
	return i.ToTLSContextMetadataOutputWithContext(context.Background())
}

func (i TLSContextMetadataArgs) ToTLSContextMetadataOutputWithContext(ctx context.Context) TLSContextMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSContextMetadataOutput)
}

type TLSContextMetadataOutput struct{ *pulumi.OutputState }

func (TLSContextMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContextMetadata)(nil)).Elem()
}

func (o TLSContextMetadataOutput) ToTLSContextMetadataOutput() TLSContextMetadataOutput {
	return o
}

func (o TLSContextMetadataOutput) ToTLSContextMetadataOutputWithContext(ctx context.Context) TLSContextMetadataOutput {
	return o
}

// TLSContextSpec defines the desired state of TLSContext
type TLSContextSpec struct {
	Alpn_protocols *string `pulumi:"alpn_protocols"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id           interface{} `pulumi:"ambassador_id"`
	Ca_secret               *string     `pulumi:"ca_secret"`
	Cacert_chain_file       *string     `pulumi:"cacert_chain_file"`
	Cert_chain_file         *string     `pulumi:"cert_chain_file"`
	Cert_required           *bool       `pulumi:"cert_required"`
	Cipher_suites           []string    `pulumi:"cipher_suites"`
	Ecdh_curves             []string    `pulumi:"ecdh_curves"`
	Hosts                   []string    `pulumi:"hosts"`
	Max_tls_version         *string     `pulumi:"max_tls_version"`
	Min_tls_version         *string     `pulumi:"min_tls_version"`
	Private_key_file        *string     `pulumi:"private_key_file"`
	Redirect_cleartext_from *int        `pulumi:"redirect_cleartext_from"`
	Secret                  *string     `pulumi:"secret"`
	Secret_namespacing      *bool       `pulumi:"secret_namespacing"`
	Sni                     *string     `pulumi:"sni"`
}

// TLSContextSpecInput is an input type that accepts TLSContextSpecArgs and TLSContextSpecOutput values.
// You can construct a concrete instance of `TLSContextSpecInput` via:
//
//          TLSContextSpecArgs{...}
type TLSContextSpecInput interface {
	pulumi.Input

	ToTLSContextSpecOutput() TLSContextSpecOutput
	ToTLSContextSpecOutputWithContext(context.Context) TLSContextSpecOutput
}

// TLSContextSpec defines the desired state of TLSContext
type TLSContextSpecArgs struct {
	Alpn_protocols pulumi.StringPtrInput `pulumi:"alpn_protocols"`
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id           pulumi.Input            `pulumi:"ambassador_id"`
	Ca_secret               pulumi.StringPtrInput   `pulumi:"ca_secret"`
	Cacert_chain_file       pulumi.StringPtrInput   `pulumi:"cacert_chain_file"`
	Cert_chain_file         pulumi.StringPtrInput   `pulumi:"cert_chain_file"`
	Cert_required           pulumi.BoolPtrInput     `pulumi:"cert_required"`
	Cipher_suites           pulumi.StringArrayInput `pulumi:"cipher_suites"`
	Ecdh_curves             pulumi.StringArrayInput `pulumi:"ecdh_curves"`
	Hosts                   pulumi.StringArrayInput `pulumi:"hosts"`
	Max_tls_version         pulumi.StringPtrInput   `pulumi:"max_tls_version"`
	Min_tls_version         pulumi.StringPtrInput   `pulumi:"min_tls_version"`
	Private_key_file        pulumi.StringPtrInput   `pulumi:"private_key_file"`
	Redirect_cleartext_from pulumi.IntPtrInput      `pulumi:"redirect_cleartext_from"`
	Secret                  pulumi.StringPtrInput   `pulumi:"secret"`
	Secret_namespacing      pulumi.BoolPtrInput     `pulumi:"secret_namespacing"`
	Sni                     pulumi.StringPtrInput   `pulumi:"sni"`
}

func (TLSContextSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContextSpec)(nil)).Elem()
}

func (i TLSContextSpecArgs) ToTLSContextSpecOutput() TLSContextSpecOutput {
	return i.ToTLSContextSpecOutputWithContext(context.Background())
}

func (i TLSContextSpecArgs) ToTLSContextSpecOutputWithContext(ctx context.Context) TLSContextSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSContextSpecOutput)
}

func (i TLSContextSpecArgs) ToTLSContextSpecPtrOutput() TLSContextSpecPtrOutput {
	return i.ToTLSContextSpecPtrOutputWithContext(context.Background())
}

func (i TLSContextSpecArgs) ToTLSContextSpecPtrOutputWithContext(ctx context.Context) TLSContextSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSContextSpecOutput).ToTLSContextSpecPtrOutputWithContext(ctx)
}

// TLSContextSpecPtrInput is an input type that accepts TLSContextSpecArgs, TLSContextSpecPtr and TLSContextSpecPtrOutput values.
// You can construct a concrete instance of `TLSContextSpecPtrInput` via:
//
//          TLSContextSpecArgs{...}
//
//  or:
//
//          nil
type TLSContextSpecPtrInput interface {
	pulumi.Input

	ToTLSContextSpecPtrOutput() TLSContextSpecPtrOutput
	ToTLSContextSpecPtrOutputWithContext(context.Context) TLSContextSpecPtrOutput
}

type tlscontextSpecPtrType TLSContextSpecArgs

func TLSContextSpecPtr(v *TLSContextSpecArgs) TLSContextSpecPtrInput {
	return (*tlscontextSpecPtrType)(v)
}

func (*tlscontextSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSContextSpec)(nil)).Elem()
}

func (i *tlscontextSpecPtrType) ToTLSContextSpecPtrOutput() TLSContextSpecPtrOutput {
	return i.ToTLSContextSpecPtrOutputWithContext(context.Background())
}

func (i *tlscontextSpecPtrType) ToTLSContextSpecPtrOutputWithContext(ctx context.Context) TLSContextSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSContextSpecPtrOutput)
}

// TLSContextSpec defines the desired state of TLSContext
type TLSContextSpecOutput struct{ *pulumi.OutputState }

func (TLSContextSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TLSContextSpec)(nil)).Elem()
}

func (o TLSContextSpecOutput) ToTLSContextSpecOutput() TLSContextSpecOutput {
	return o
}

func (o TLSContextSpecOutput) ToTLSContextSpecOutputWithContext(ctx context.Context) TLSContextSpecOutput {
	return o
}

func (o TLSContextSpecOutput) ToTLSContextSpecPtrOutput() TLSContextSpecPtrOutput {
	return o.ToTLSContextSpecPtrOutputWithContext(context.Background())
}

func (o TLSContextSpecOutput) ToTLSContextSpecPtrOutputWithContext(ctx context.Context) TLSContextSpecPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *TLSContextSpec {
		return &v
	}).(TLSContextSpecPtrOutput)
}
func (o TLSContextSpecOutput) Alpn_protocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Alpn_protocols }).(pulumi.StringPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o TLSContextSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v TLSContextSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o TLSContextSpecOutput) Ca_secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Ca_secret }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Cacert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Cacert_chain_file }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Cert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Cert_chain_file }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Cert_required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *bool { return v.Cert_required }).(pulumi.BoolPtrOutput)
}

func (o TLSContextSpecOutput) Cipher_suites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TLSContextSpec) []string { return v.Cipher_suites }).(pulumi.StringArrayOutput)
}

func (o TLSContextSpecOutput) Ecdh_curves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TLSContextSpec) []string { return v.Ecdh_curves }).(pulumi.StringArrayOutput)
}

func (o TLSContextSpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TLSContextSpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o TLSContextSpecOutput) Max_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Max_tls_version }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Min_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Min_tls_version }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Private_key_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Private_key_file }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Redirect_cleartext_from() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *int { return v.Redirect_cleartext_from }).(pulumi.IntPtrOutput)
}

func (o TLSContextSpecOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecOutput) Secret_namespacing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *bool { return v.Secret_namespacing }).(pulumi.BoolPtrOutput)
}

func (o TLSContextSpecOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TLSContextSpec) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

type TLSContextSpecPtrOutput struct{ *pulumi.OutputState }

func (TLSContextSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSContextSpec)(nil)).Elem()
}

func (o TLSContextSpecPtrOutput) ToTLSContextSpecPtrOutput() TLSContextSpecPtrOutput {
	return o
}

func (o TLSContextSpecPtrOutput) ToTLSContextSpecPtrOutputWithContext(ctx context.Context) TLSContextSpecPtrOutput {
	return o
}

func (o TLSContextSpecPtrOutput) Elem() TLSContextSpecOutput {
	return o.ApplyT(func(v *TLSContextSpec) TLSContextSpec { return *v }).(TLSContextSpecOutput)
}

func (o TLSContextSpecPtrOutput) Alpn_protocols() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Alpn_protocols
	}).(pulumi.StringPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o TLSContextSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *TLSContextSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o TLSContextSpecPtrOutput) Ca_secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ca_secret
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Cacert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Cacert_chain_file
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Cert_chain_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Cert_chain_file
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Cert_required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Cert_required
	}).(pulumi.BoolPtrOutput)
}

func (o TLSContextSpecPtrOutput) Cipher_suites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TLSContextSpec) []string {
		if v == nil {
			return nil
		}
		return v.Cipher_suites
	}).(pulumi.StringArrayOutput)
}

func (o TLSContextSpecPtrOutput) Ecdh_curves() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TLSContextSpec) []string {
		if v == nil {
			return nil
		}
		return v.Ecdh_curves
	}).(pulumi.StringArrayOutput)
}

func (o TLSContextSpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TLSContextSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

func (o TLSContextSpecPtrOutput) Max_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Max_tls_version
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Min_tls_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Min_tls_version
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Private_key_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Private_key_file
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Redirect_cleartext_from() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *int {
		if v == nil {
			return nil
		}
		return v.Redirect_cleartext_from
	}).(pulumi.IntPtrOutput)
}

func (o TLSContextSpecPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

func (o TLSContextSpecPtrOutput) Secret_namespacing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Secret_namespacing
	}).(pulumi.BoolPtrOutput)
}

func (o TLSContextSpecPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSContextSpec) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// TracingService is the Schema for the tracingservices API
type TracingServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TracingServiceSpec defines the desired state of TracingService
	Spec *TracingServiceSpec `pulumi:"spec"`
}

// TracingServiceTypeInput is an input type that accepts TracingServiceTypeArgs and TracingServiceTypeOutput values.
// You can construct a concrete instance of `TracingServiceTypeInput` via:
//
//          TracingServiceTypeArgs{...}
type TracingServiceTypeInput interface {
	pulumi.Input

	ToTracingServiceTypeOutput() TracingServiceTypeOutput
	ToTracingServiceTypeOutputWithContext(context.Context) TracingServiceTypeOutput
}

// TracingService is the Schema for the tracingservices API
type TracingServiceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// TracingServiceSpec defines the desired state of TracingService
	Spec TracingServiceSpecPtrInput `pulumi:"spec"`
}

func (TracingServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceType)(nil)).Elem()
}

func (i TracingServiceTypeArgs) ToTracingServiceTypeOutput() TracingServiceTypeOutput {
	return i.ToTracingServiceTypeOutputWithContext(context.Background())
}

func (i TracingServiceTypeArgs) ToTracingServiceTypeOutputWithContext(ctx context.Context) TracingServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceTypeOutput)
}

// TracingService is the Schema for the tracingservices API
type TracingServiceTypeOutput struct{ *pulumi.OutputState }

func (TracingServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceType)(nil)).Elem()
}

func (o TracingServiceTypeOutput) ToTracingServiceTypeOutput() TracingServiceTypeOutput {
	return o
}

func (o TracingServiceTypeOutput) ToTracingServiceTypeOutputWithContext(ctx context.Context) TracingServiceTypeOutput {
	return o
}

func (o TracingServiceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TracingServiceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TracingServiceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TracingServiceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// TracingServiceSpec defines the desired state of TracingService
func (o TracingServiceTypeOutput) Spec() TracingServiceSpecPtrOutput {
	return o.ApplyT(func(v TracingServiceType) *TracingServiceSpec { return v.Spec }).(TracingServiceSpecPtrOutput)
}

type TracingServiceMetadata struct {
}

// TracingServiceMetadataInput is an input type that accepts TracingServiceMetadataArgs and TracingServiceMetadataOutput values.
// You can construct a concrete instance of `TracingServiceMetadataInput` via:
//
//          TracingServiceMetadataArgs{...}
type TracingServiceMetadataInput interface {
	pulumi.Input

	ToTracingServiceMetadataOutput() TracingServiceMetadataOutput
	ToTracingServiceMetadataOutputWithContext(context.Context) TracingServiceMetadataOutput
}

type TracingServiceMetadataArgs struct {
}

func (TracingServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceMetadata)(nil)).Elem()
}

func (i TracingServiceMetadataArgs) ToTracingServiceMetadataOutput() TracingServiceMetadataOutput {
	return i.ToTracingServiceMetadataOutputWithContext(context.Background())
}

func (i TracingServiceMetadataArgs) ToTracingServiceMetadataOutputWithContext(ctx context.Context) TracingServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceMetadataOutput)
}

type TracingServiceMetadataOutput struct{ *pulumi.OutputState }

func (TracingServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceMetadata)(nil)).Elem()
}

func (o TracingServiceMetadataOutput) ToTracingServiceMetadataOutput() TracingServiceMetadataOutput {
	return o
}

func (o TracingServiceMetadataOutput) ToTracingServiceMetadataOutputWithContext(ctx context.Context) TracingServiceMetadataOutput {
	return o
}

// TracingServiceSpec defines the desired state of TracingService
type TracingServiceSpec struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id interface{}                 `pulumi:"ambassador_id"`
	Config        *TracingServiceSpecConfig   `pulumi:"config"`
	Driver        string                      `pulumi:"driver"`
	Sampling      *TracingServiceSpecSampling `pulumi:"sampling"`
	Service       string                      `pulumi:"service"`
	Tag_headers   []string                    `pulumi:"tag_headers"`
}

// TracingServiceSpecInput is an input type that accepts TracingServiceSpecArgs and TracingServiceSpecOutput values.
// You can construct a concrete instance of `TracingServiceSpecInput` via:
//
//          TracingServiceSpecArgs{...}
type TracingServiceSpecInput interface {
	pulumi.Input

	ToTracingServiceSpecOutput() TracingServiceSpecOutput
	ToTracingServiceSpecOutputWithContext(context.Context) TracingServiceSpecOutput
}

// TracingServiceSpec defines the desired state of TracingService
type TracingServiceSpecArgs struct {
	// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
	//     ambassador_id:    - "default"
	Ambassador_id pulumi.Input                       `pulumi:"ambassador_id"`
	Config        TracingServiceSpecConfigPtrInput   `pulumi:"config"`
	Driver        pulumi.StringInput                 `pulumi:"driver"`
	Sampling      TracingServiceSpecSamplingPtrInput `pulumi:"sampling"`
	Service       pulumi.StringInput                 `pulumi:"service"`
	Tag_headers   pulumi.StringArrayInput            `pulumi:"tag_headers"`
}

func (TracingServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceSpec)(nil)).Elem()
}

func (i TracingServiceSpecArgs) ToTracingServiceSpecOutput() TracingServiceSpecOutput {
	return i.ToTracingServiceSpecOutputWithContext(context.Background())
}

func (i TracingServiceSpecArgs) ToTracingServiceSpecOutputWithContext(ctx context.Context) TracingServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecOutput)
}

func (i TracingServiceSpecArgs) ToTracingServiceSpecPtrOutput() TracingServiceSpecPtrOutput {
	return i.ToTracingServiceSpecPtrOutputWithContext(context.Background())
}

func (i TracingServiceSpecArgs) ToTracingServiceSpecPtrOutputWithContext(ctx context.Context) TracingServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecOutput).ToTracingServiceSpecPtrOutputWithContext(ctx)
}

// TracingServiceSpecPtrInput is an input type that accepts TracingServiceSpecArgs, TracingServiceSpecPtr and TracingServiceSpecPtrOutput values.
// You can construct a concrete instance of `TracingServiceSpecPtrInput` via:
//
//          TracingServiceSpecArgs{...}
//
//  or:
//
//          nil
type TracingServiceSpecPtrInput interface {
	pulumi.Input

	ToTracingServiceSpecPtrOutput() TracingServiceSpecPtrOutput
	ToTracingServiceSpecPtrOutputWithContext(context.Context) TracingServiceSpecPtrOutput
}

type tracingServiceSpecPtrType TracingServiceSpecArgs

func TracingServiceSpecPtr(v *TracingServiceSpecArgs) TracingServiceSpecPtrInput {
	return (*tracingServiceSpecPtrType)(v)
}

func (*tracingServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingServiceSpec)(nil)).Elem()
}

func (i *tracingServiceSpecPtrType) ToTracingServiceSpecPtrOutput() TracingServiceSpecPtrOutput {
	return i.ToTracingServiceSpecPtrOutputWithContext(context.Background())
}

func (i *tracingServiceSpecPtrType) ToTracingServiceSpecPtrOutputWithContext(ctx context.Context) TracingServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecPtrOutput)
}

// TracingServiceSpec defines the desired state of TracingService
type TracingServiceSpecOutput struct{ *pulumi.OutputState }

func (TracingServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceSpec)(nil)).Elem()
}

func (o TracingServiceSpecOutput) ToTracingServiceSpecOutput() TracingServiceSpecOutput {
	return o
}

func (o TracingServiceSpecOutput) ToTracingServiceSpecOutputWithContext(ctx context.Context) TracingServiceSpecOutput {
	return o
}

func (o TracingServiceSpecOutput) ToTracingServiceSpecPtrOutput() TracingServiceSpecPtrOutput {
	return o.ToTracingServiceSpecPtrOutputWithContext(context.Background())
}

func (o TracingServiceSpecOutput) ToTracingServiceSpecPtrOutputWithContext(ctx context.Context) TracingServiceSpecPtrOutput {
	return o.ApplyT(func(v TracingServiceSpec) *TracingServiceSpec {
		return &v
	}).(TracingServiceSpecPtrOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o TracingServiceSpecOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v TracingServiceSpec) interface{} { return v.Ambassador_id }).(pulumi.AnyOutput)
}

func (o TracingServiceSpecOutput) Config() TracingServiceSpecConfigPtrOutput {
	return o.ApplyT(func(v TracingServiceSpec) *TracingServiceSpecConfig { return v.Config }).(TracingServiceSpecConfigPtrOutput)
}

func (o TracingServiceSpecOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v TracingServiceSpec) string { return v.Driver }).(pulumi.StringOutput)
}

func (o TracingServiceSpecOutput) Sampling() TracingServiceSpecSamplingPtrOutput {
	return o.ApplyT(func(v TracingServiceSpec) *TracingServiceSpecSampling { return v.Sampling }).(TracingServiceSpecSamplingPtrOutput)
}

func (o TracingServiceSpecOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v TracingServiceSpec) string { return v.Service }).(pulumi.StringOutput)
}

func (o TracingServiceSpecOutput) Tag_headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TracingServiceSpec) []string { return v.Tag_headers }).(pulumi.StringArrayOutput)
}

type TracingServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (TracingServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingServiceSpec)(nil)).Elem()
}

func (o TracingServiceSpecPtrOutput) ToTracingServiceSpecPtrOutput() TracingServiceSpecPtrOutput {
	return o
}

func (o TracingServiceSpecPtrOutput) ToTracingServiceSpecPtrOutputWithContext(ctx context.Context) TracingServiceSpecPtrOutput {
	return o
}

func (o TracingServiceSpecPtrOutput) Elem() TracingServiceSpecOutput {
	return o.ApplyT(func(v *TracingServiceSpec) TracingServiceSpec { return *v }).(TracingServiceSpecOutput)
}

// AmbassadorID declares which Ambassador instances should pay attention to this resource.  May either be a string or a list of strings.  If no value is provided, the default is:
//     ambassador_id:    - "default"
func (o TracingServiceSpecPtrOutput) Ambassador_id() pulumi.AnyOutput {
	return o.ApplyT(func(v *TracingServiceSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Ambassador_id
	}).(pulumi.AnyOutput)
}

func (o TracingServiceSpecPtrOutput) Config() TracingServiceSpecConfigPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpec) *TracingServiceSpecConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(TracingServiceSpecConfigPtrOutput)
}

func (o TracingServiceSpecPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecPtrOutput) Sampling() TracingServiceSpecSamplingPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpec) *TracingServiceSpecSampling {
		if v == nil {
			return nil
		}
		return v.Sampling
	}).(TracingServiceSpecSamplingPtrOutput)
}

func (o TracingServiceSpecPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecPtrOutput) Tag_headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TracingServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Tag_headers
	}).(pulumi.StringArrayOutput)
}

type TracingServiceSpecConfig struct {
	Access_token_file          *string `pulumi:"access_token_file"`
	Collector_cluster          *string `pulumi:"collector_cluster"`
	Collector_endpoint         *string `pulumi:"collector_endpoint"`
	Collector_endpoint_version *string `pulumi:"collector_endpoint_version"`
	Collector_hostname         *string `pulumi:"collector_hostname"`
	Service_name               *string `pulumi:"service_name"`
	Shared_span_context        *bool   `pulumi:"shared_span_context"`
	Trace_id_128bit            *bool   `pulumi:"trace_id_128bit"`
}

// TracingServiceSpecConfigInput is an input type that accepts TracingServiceSpecConfigArgs and TracingServiceSpecConfigOutput values.
// You can construct a concrete instance of `TracingServiceSpecConfigInput` via:
//
//          TracingServiceSpecConfigArgs{...}
type TracingServiceSpecConfigInput interface {
	pulumi.Input

	ToTracingServiceSpecConfigOutput() TracingServiceSpecConfigOutput
	ToTracingServiceSpecConfigOutputWithContext(context.Context) TracingServiceSpecConfigOutput
}

type TracingServiceSpecConfigArgs struct {
	Access_token_file          pulumi.StringPtrInput `pulumi:"access_token_file"`
	Collector_cluster          pulumi.StringPtrInput `pulumi:"collector_cluster"`
	Collector_endpoint         pulumi.StringPtrInput `pulumi:"collector_endpoint"`
	Collector_endpoint_version pulumi.StringPtrInput `pulumi:"collector_endpoint_version"`
	Collector_hostname         pulumi.StringPtrInput `pulumi:"collector_hostname"`
	Service_name               pulumi.StringPtrInput `pulumi:"service_name"`
	Shared_span_context        pulumi.BoolPtrInput   `pulumi:"shared_span_context"`
	Trace_id_128bit            pulumi.BoolPtrInput   `pulumi:"trace_id_128bit"`
}

func (TracingServiceSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceSpecConfig)(nil)).Elem()
}

func (i TracingServiceSpecConfigArgs) ToTracingServiceSpecConfigOutput() TracingServiceSpecConfigOutput {
	return i.ToTracingServiceSpecConfigOutputWithContext(context.Background())
}

func (i TracingServiceSpecConfigArgs) ToTracingServiceSpecConfigOutputWithContext(ctx context.Context) TracingServiceSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecConfigOutput)
}

func (i TracingServiceSpecConfigArgs) ToTracingServiceSpecConfigPtrOutput() TracingServiceSpecConfigPtrOutput {
	return i.ToTracingServiceSpecConfigPtrOutputWithContext(context.Background())
}

func (i TracingServiceSpecConfigArgs) ToTracingServiceSpecConfigPtrOutputWithContext(ctx context.Context) TracingServiceSpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecConfigOutput).ToTracingServiceSpecConfigPtrOutputWithContext(ctx)
}

// TracingServiceSpecConfigPtrInput is an input type that accepts TracingServiceSpecConfigArgs, TracingServiceSpecConfigPtr and TracingServiceSpecConfigPtrOutput values.
// You can construct a concrete instance of `TracingServiceSpecConfigPtrInput` via:
//
//          TracingServiceSpecConfigArgs{...}
//
//  or:
//
//          nil
type TracingServiceSpecConfigPtrInput interface {
	pulumi.Input

	ToTracingServiceSpecConfigPtrOutput() TracingServiceSpecConfigPtrOutput
	ToTracingServiceSpecConfigPtrOutputWithContext(context.Context) TracingServiceSpecConfigPtrOutput
}

type tracingServiceSpecConfigPtrType TracingServiceSpecConfigArgs

func TracingServiceSpecConfigPtr(v *TracingServiceSpecConfigArgs) TracingServiceSpecConfigPtrInput {
	return (*tracingServiceSpecConfigPtrType)(v)
}

func (*tracingServiceSpecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingServiceSpecConfig)(nil)).Elem()
}

func (i *tracingServiceSpecConfigPtrType) ToTracingServiceSpecConfigPtrOutput() TracingServiceSpecConfigPtrOutput {
	return i.ToTracingServiceSpecConfigPtrOutputWithContext(context.Background())
}

func (i *tracingServiceSpecConfigPtrType) ToTracingServiceSpecConfigPtrOutputWithContext(ctx context.Context) TracingServiceSpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecConfigPtrOutput)
}

type TracingServiceSpecConfigOutput struct{ *pulumi.OutputState }

func (TracingServiceSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceSpecConfig)(nil)).Elem()
}

func (o TracingServiceSpecConfigOutput) ToTracingServiceSpecConfigOutput() TracingServiceSpecConfigOutput {
	return o
}

func (o TracingServiceSpecConfigOutput) ToTracingServiceSpecConfigOutputWithContext(ctx context.Context) TracingServiceSpecConfigOutput {
	return o
}

func (o TracingServiceSpecConfigOutput) ToTracingServiceSpecConfigPtrOutput() TracingServiceSpecConfigPtrOutput {
	return o.ToTracingServiceSpecConfigPtrOutputWithContext(context.Background())
}

func (o TracingServiceSpecConfigOutput) ToTracingServiceSpecConfigPtrOutputWithContext(ctx context.Context) TracingServiceSpecConfigPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *TracingServiceSpecConfig {
		return &v
	}).(TracingServiceSpecConfigPtrOutput)
}
func (o TracingServiceSpecConfigOutput) Access_token_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *string { return v.Access_token_file }).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Collector_cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *string { return v.Collector_cluster }).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Collector_endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *string { return v.Collector_endpoint }).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Collector_endpoint_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *string { return v.Collector_endpoint_version }).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Collector_hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *string { return v.Collector_hostname }).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Service_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *string { return v.Service_name }).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Shared_span_context() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *bool { return v.Shared_span_context }).(pulumi.BoolPtrOutput)
}

func (o TracingServiceSpecConfigOutput) Trace_id_128bit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecConfig) *bool { return v.Trace_id_128bit }).(pulumi.BoolPtrOutput)
}

type TracingServiceSpecConfigPtrOutput struct{ *pulumi.OutputState }

func (TracingServiceSpecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingServiceSpecConfig)(nil)).Elem()
}

func (o TracingServiceSpecConfigPtrOutput) ToTracingServiceSpecConfigPtrOutput() TracingServiceSpecConfigPtrOutput {
	return o
}

func (o TracingServiceSpecConfigPtrOutput) ToTracingServiceSpecConfigPtrOutputWithContext(ctx context.Context) TracingServiceSpecConfigPtrOutput {
	return o
}

func (o TracingServiceSpecConfigPtrOutput) Elem() TracingServiceSpecConfigOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) TracingServiceSpecConfig { return *v }).(TracingServiceSpecConfigOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Access_token_file() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Access_token_file
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Collector_cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Collector_cluster
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Collector_endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Collector_endpoint
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Collector_endpoint_version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Collector_endpoint_version
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Collector_hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Collector_hostname
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Service_name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Service_name
	}).(pulumi.StringPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Shared_span_context() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Shared_span_context
	}).(pulumi.BoolPtrOutput)
}

func (o TracingServiceSpecConfigPtrOutput) Trace_id_128bit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Trace_id_128bit
	}).(pulumi.BoolPtrOutput)
}

type TracingServiceSpecSampling struct {
	Client  *int `pulumi:"client"`
	Overall *int `pulumi:"overall"`
	Random  *int `pulumi:"random"`
}

// TracingServiceSpecSamplingInput is an input type that accepts TracingServiceSpecSamplingArgs and TracingServiceSpecSamplingOutput values.
// You can construct a concrete instance of `TracingServiceSpecSamplingInput` via:
//
//          TracingServiceSpecSamplingArgs{...}
type TracingServiceSpecSamplingInput interface {
	pulumi.Input

	ToTracingServiceSpecSamplingOutput() TracingServiceSpecSamplingOutput
	ToTracingServiceSpecSamplingOutputWithContext(context.Context) TracingServiceSpecSamplingOutput
}

type TracingServiceSpecSamplingArgs struct {
	Client  pulumi.IntPtrInput `pulumi:"client"`
	Overall pulumi.IntPtrInput `pulumi:"overall"`
	Random  pulumi.IntPtrInput `pulumi:"random"`
}

func (TracingServiceSpecSamplingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceSpecSampling)(nil)).Elem()
}

func (i TracingServiceSpecSamplingArgs) ToTracingServiceSpecSamplingOutput() TracingServiceSpecSamplingOutput {
	return i.ToTracingServiceSpecSamplingOutputWithContext(context.Background())
}

func (i TracingServiceSpecSamplingArgs) ToTracingServiceSpecSamplingOutputWithContext(ctx context.Context) TracingServiceSpecSamplingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecSamplingOutput)
}

func (i TracingServiceSpecSamplingArgs) ToTracingServiceSpecSamplingPtrOutput() TracingServiceSpecSamplingPtrOutput {
	return i.ToTracingServiceSpecSamplingPtrOutputWithContext(context.Background())
}

func (i TracingServiceSpecSamplingArgs) ToTracingServiceSpecSamplingPtrOutputWithContext(ctx context.Context) TracingServiceSpecSamplingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecSamplingOutput).ToTracingServiceSpecSamplingPtrOutputWithContext(ctx)
}

// TracingServiceSpecSamplingPtrInput is an input type that accepts TracingServiceSpecSamplingArgs, TracingServiceSpecSamplingPtr and TracingServiceSpecSamplingPtrOutput values.
// You can construct a concrete instance of `TracingServiceSpecSamplingPtrInput` via:
//
//          TracingServiceSpecSamplingArgs{...}
//
//  or:
//
//          nil
type TracingServiceSpecSamplingPtrInput interface {
	pulumi.Input

	ToTracingServiceSpecSamplingPtrOutput() TracingServiceSpecSamplingPtrOutput
	ToTracingServiceSpecSamplingPtrOutputWithContext(context.Context) TracingServiceSpecSamplingPtrOutput
}

type tracingServiceSpecSamplingPtrType TracingServiceSpecSamplingArgs

func TracingServiceSpecSamplingPtr(v *TracingServiceSpecSamplingArgs) TracingServiceSpecSamplingPtrInput {
	return (*tracingServiceSpecSamplingPtrType)(v)
}

func (*tracingServiceSpecSamplingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingServiceSpecSampling)(nil)).Elem()
}

func (i *tracingServiceSpecSamplingPtrType) ToTracingServiceSpecSamplingPtrOutput() TracingServiceSpecSamplingPtrOutput {
	return i.ToTracingServiceSpecSamplingPtrOutputWithContext(context.Background())
}

func (i *tracingServiceSpecSamplingPtrType) ToTracingServiceSpecSamplingPtrOutputWithContext(ctx context.Context) TracingServiceSpecSamplingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingServiceSpecSamplingPtrOutput)
}

type TracingServiceSpecSamplingOutput struct{ *pulumi.OutputState }

func (TracingServiceSpecSamplingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TracingServiceSpecSampling)(nil)).Elem()
}

func (o TracingServiceSpecSamplingOutput) ToTracingServiceSpecSamplingOutput() TracingServiceSpecSamplingOutput {
	return o
}

func (o TracingServiceSpecSamplingOutput) ToTracingServiceSpecSamplingOutputWithContext(ctx context.Context) TracingServiceSpecSamplingOutput {
	return o
}

func (o TracingServiceSpecSamplingOutput) ToTracingServiceSpecSamplingPtrOutput() TracingServiceSpecSamplingPtrOutput {
	return o.ToTracingServiceSpecSamplingPtrOutputWithContext(context.Background())
}

func (o TracingServiceSpecSamplingOutput) ToTracingServiceSpecSamplingPtrOutputWithContext(ctx context.Context) TracingServiceSpecSamplingPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecSampling) *TracingServiceSpecSampling {
		return &v
	}).(TracingServiceSpecSamplingPtrOutput)
}
func (o TracingServiceSpecSamplingOutput) Client() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecSampling) *int { return v.Client }).(pulumi.IntPtrOutput)
}

func (o TracingServiceSpecSamplingOutput) Overall() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecSampling) *int { return v.Overall }).(pulumi.IntPtrOutput)
}

func (o TracingServiceSpecSamplingOutput) Random() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TracingServiceSpecSampling) *int { return v.Random }).(pulumi.IntPtrOutput)
}

type TracingServiceSpecSamplingPtrOutput struct{ *pulumi.OutputState }

func (TracingServiceSpecSamplingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingServiceSpecSampling)(nil)).Elem()
}

func (o TracingServiceSpecSamplingPtrOutput) ToTracingServiceSpecSamplingPtrOutput() TracingServiceSpecSamplingPtrOutput {
	return o
}

func (o TracingServiceSpecSamplingPtrOutput) ToTracingServiceSpecSamplingPtrOutputWithContext(ctx context.Context) TracingServiceSpecSamplingPtrOutput {
	return o
}

func (o TracingServiceSpecSamplingPtrOutput) Elem() TracingServiceSpecSamplingOutput {
	return o.ApplyT(func(v *TracingServiceSpecSampling) TracingServiceSpecSampling { return *v }).(TracingServiceSpecSamplingOutput)
}

func (o TracingServiceSpecSamplingPtrOutput) Client() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecSampling) *int {
		if v == nil {
			return nil
		}
		return v.Client
	}).(pulumi.IntPtrOutput)
}

func (o TracingServiceSpecSamplingPtrOutput) Overall() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecSampling) *int {
		if v == nil {
			return nil
		}
		return v.Overall
	}).(pulumi.IntPtrOutput)
}

func (o TracingServiceSpecSamplingPtrOutput) Random() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TracingServiceSpecSampling) *int {
		if v == nil {
			return nil
		}
		return v.Random
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuthServiceTypeOutput{})
	pulumi.RegisterOutputType(AuthServiceMetadataOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecAdd_auth_headersOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecInclude_bodyOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecInclude_bodyPtrOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecStatus_on_errorOutput{})
	pulumi.RegisterOutputType(AuthServiceSpecStatus_on_errorPtrOutput{})
	pulumi.RegisterOutputType(ConsulResolverTypeOutput{})
	pulumi.RegisterOutputType(ConsulResolverMetadataOutput{})
	pulumi.RegisterOutputType(ConsulResolverSpecOutput{})
	pulumi.RegisterOutputType(ConsulResolverSpecPtrOutput{})
	pulumi.RegisterOutputType(DevPortalTypeOutput{})
	pulumi.RegisterOutputType(DevPortalMetadataOutput{})
	pulumi.RegisterOutputType(DevPortalSpecOutput{})
	pulumi.RegisterOutputType(DevPortalSpecPtrOutput{})
	pulumi.RegisterOutputType(DevPortalSpecContentOutput{})
	pulumi.RegisterOutputType(DevPortalSpecContentPtrOutput{})
	pulumi.RegisterOutputType(DevPortalSpecDocsOutput{})
	pulumi.RegisterOutputType(DevPortalSpecDocsArrayOutput{})
	pulumi.RegisterOutputType(DevPortalSpecSearchOutput{})
	pulumi.RegisterOutputType(DevPortalSpecSearchPtrOutput{})
	pulumi.RegisterOutputType(DevPortalSpecSelectorOutput{})
	pulumi.RegisterOutputType(DevPortalSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(DevPortalSpecSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(HostTypeOutput{})
	pulumi.RegisterOutputType(HostMetadataOutput{})
	pulumi.RegisterOutputType(HostSpecOutput{})
	pulumi.RegisterOutputType(HostSpecPtrOutput{})
	pulumi.RegisterOutputType(HostSpecAcmeProviderOutput{})
	pulumi.RegisterOutputType(HostSpecAcmeProviderPtrOutput{})
	pulumi.RegisterOutputType(HostSpecAcmeProviderPrivateKeySecretOutput{})
	pulumi.RegisterOutputType(HostSpecAcmeProviderPrivateKeySecretPtrOutput{})
	pulumi.RegisterOutputType(HostSpecPreviewUrlOutput{})
	pulumi.RegisterOutputType(HostSpecPreviewUrlPtrOutput{})
	pulumi.RegisterOutputType(HostSpecRequestPolicyOutput{})
	pulumi.RegisterOutputType(HostSpecRequestPolicyPtrOutput{})
	pulumi.RegisterOutputType(HostSpecRequestPolicyInsecureOutput{})
	pulumi.RegisterOutputType(HostSpecRequestPolicyInsecurePtrOutput{})
	pulumi.RegisterOutputType(HostSpecSelectorOutput{})
	pulumi.RegisterOutputType(HostSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(HostSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(HostSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(HostSpecSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(HostSpecTlsOutput{})
	pulumi.RegisterOutputType(HostSpecTlsPtrOutput{})
	pulumi.RegisterOutputType(HostSpecTlsContextOutput{})
	pulumi.RegisterOutputType(HostSpecTlsContextPtrOutput{})
	pulumi.RegisterOutputType(HostSpecTlsSecretOutput{})
	pulumi.RegisterOutputType(HostSpecTlsSecretPtrOutput{})
	pulumi.RegisterOutputType(HostStatusOutput{})
	pulumi.RegisterOutputType(HostStatusPtrOutput{})
	pulumi.RegisterOutputType(KubernetesEndpointResolverTypeOutput{})
	pulumi.RegisterOutputType(KubernetesEndpointResolverMetadataOutput{})
	pulumi.RegisterOutputType(KubernetesEndpointResolverSpecOutput{})
	pulumi.RegisterOutputType(KubernetesEndpointResolverSpecPtrOutput{})
	pulumi.RegisterOutputType(KubernetesServiceResolverTypeOutput{})
	pulumi.RegisterOutputType(KubernetesServiceResolverMetadataOutput{})
	pulumi.RegisterOutputType(KubernetesServiceResolverSpecOutput{})
	pulumi.RegisterOutputType(KubernetesServiceResolverSpecPtrOutput{})
	pulumi.RegisterOutputType(LogServiceTypeOutput{})
	pulumi.RegisterOutputType(LogServiceMetadataOutput{})
	pulumi.RegisterOutputType(LogServiceSpecOutput{})
	pulumi.RegisterOutputType(LogServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(LogServiceSpecDriver_configOutput{})
	pulumi.RegisterOutputType(LogServiceSpecDriver_configPtrOutput{})
	pulumi.RegisterOutputType(LogServiceSpecDriver_configAdditional_log_headersOutput{})
	pulumi.RegisterOutputType(LogServiceSpecDriver_configAdditional_log_headersArrayOutput{})
	pulumi.RegisterOutputType(MappingTypeOutput{})
	pulumi.RegisterOutputType(MappingMetadataOutput{})
	pulumi.RegisterOutputType(MappingSpecOutput{})
	pulumi.RegisterOutputType(MappingSpecPtrOutput{})
	pulumi.RegisterOutputType(MappingSpecAdd_request_headersOutput{})
	pulumi.RegisterOutputType(MappingSpecAdd_request_headersOneOf2Output{})
	pulumi.RegisterOutputType(MappingSpecAdd_response_headersOutput{})
	pulumi.RegisterOutputType(MappingSpecAdd_response_headersOneOf2Output{})
	pulumi.RegisterOutputType(MappingSpecAuth_context_extensionsOutput{})
	pulumi.RegisterOutputType(MappingSpecCircuit_breakersOutput{})
	pulumi.RegisterOutputType(MappingSpecCircuit_breakersArrayOutput{})
	pulumi.RegisterOutputType(MappingSpecCorsOutput{})
	pulumi.RegisterOutputType(MappingSpecCorsPtrOutput{})
	pulumi.RegisterOutputType(MappingSpecDocsOutput{})
	pulumi.RegisterOutputType(MappingSpecDocsPtrOutput{})
	pulumi.RegisterOutputType(MappingSpecEnvoy_overrideOutput{})
	pulumi.RegisterOutputType(MappingSpecError_response_overridesOutput{})
	pulumi.RegisterOutputType(MappingSpecError_response_overridesArrayOutput{})
	pulumi.RegisterOutputType(MappingSpecError_response_overridesBodyOutput{})
	pulumi.RegisterOutputType(MappingSpecError_response_overridesBodyJson_formatOutput{})
	pulumi.RegisterOutputType(MappingSpecError_response_overridesBodyText_format_sourceOutput{})
	pulumi.RegisterOutputType(MappingSpecError_response_overridesBodyText_format_sourcePtrOutput{})
	pulumi.RegisterOutputType(MappingSpecHeadersOutput{})
	pulumi.RegisterOutputType(MappingSpecKeepaliveOutput{})
	pulumi.RegisterOutputType(MappingSpecKeepalivePtrOutput{})
	pulumi.RegisterOutputType(MappingSpecLabelsOutput{})
	pulumi.RegisterOutputType(MappingSpecLoad_balancerOutput{})
	pulumi.RegisterOutputType(MappingSpecLoad_balancerPtrOutput{})
	pulumi.RegisterOutputType(MappingSpecLoad_balancerCookieOutput{})
	pulumi.RegisterOutputType(MappingSpecLoad_balancerCookiePtrOutput{})
	pulumi.RegisterOutputType(MappingSpecModulesOutput{})
	pulumi.RegisterOutputType(MappingSpecQuery_parametersOutput{})
	pulumi.RegisterOutputType(MappingSpecRegex_headersOutput{})
	pulumi.RegisterOutputType(MappingSpecRegex_query_parametersOutput{})
	pulumi.RegisterOutputType(MappingSpecRegex_redirectOutput{})
	pulumi.RegisterOutputType(MappingSpecRegex_rewriteOutput{})
	pulumi.RegisterOutputType(MappingSpecRetry_policyOutput{})
	pulumi.RegisterOutputType(MappingSpecRetry_policyPtrOutput{})
	pulumi.RegisterOutputType(MappingStatusOutput{})
	pulumi.RegisterOutputType(MappingStatusPtrOutput{})
	pulumi.RegisterOutputType(ModuleTypeOutput{})
	pulumi.RegisterOutputType(ModuleMetadataOutput{})
	pulumi.RegisterOutputType(ModuleSpecOutput{})
	pulumi.RegisterOutputType(ModuleSpecPtrOutput{})
	pulumi.RegisterOutputType(ModuleSpecConfigOutput{})
	pulumi.RegisterOutputType(RateLimitServiceTypeOutput{})
	pulumi.RegisterOutputType(RateLimitServiceMetadataOutput{})
	pulumi.RegisterOutputType(RateLimitServiceSpecOutput{})
	pulumi.RegisterOutputType(RateLimitServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(TCPMappingTypeOutput{})
	pulumi.RegisterOutputType(TCPMappingMetadataOutput{})
	pulumi.RegisterOutputType(TCPMappingSpecOutput{})
	pulumi.RegisterOutputType(TCPMappingSpecPtrOutput{})
	pulumi.RegisterOutputType(TCPMappingSpecCircuit_breakersOutput{})
	pulumi.RegisterOutputType(TCPMappingSpecCircuit_breakersArrayOutput{})
	pulumi.RegisterOutputType(TLSContextTypeOutput{})
	pulumi.RegisterOutputType(TLSContextMetadataOutput{})
	pulumi.RegisterOutputType(TLSContextSpecOutput{})
	pulumi.RegisterOutputType(TLSContextSpecPtrOutput{})
	pulumi.RegisterOutputType(TracingServiceTypeOutput{})
	pulumi.RegisterOutputType(TracingServiceMetadataOutput{})
	pulumi.RegisterOutputType(TracingServiceSpecOutput{})
	pulumi.RegisterOutputType(TracingServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(TracingServiceSpecConfigOutput{})
	pulumi.RegisterOutputType(TracingServiceSpecConfigPtrOutput{})
	pulumi.RegisterOutputType(TracingServiceSpecSamplingOutput{})
	pulumi.RegisterOutputType(TracingServiceSpecSamplingPtrOutput{})
}
