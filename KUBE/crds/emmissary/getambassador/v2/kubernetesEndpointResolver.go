// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KubernetesEndpointResolver is the Schema for the kubernetesendpointresolver API
type KubernetesEndpointResolver struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesEndpointResolverSpecPtrOutput `pulumi:"spec"`
}

// NewKubernetesEndpointResolver registers a new resource with the given unique name, arguments, and options.
func NewKubernetesEndpointResolver(ctx *pulumi.Context,
	name string, args *KubernetesEndpointResolverArgs, opts ...pulumi.ResourceOption) (*KubernetesEndpointResolver, error) {
	if args == nil {
		args = &KubernetesEndpointResolverArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v2")
	args.Kind = pulumi.StringPtr("KubernetesEndpointResolver")
	var resource KubernetesEndpointResolver
	err := ctx.RegisterResource("kubernetes:getambassador.io/v2:KubernetesEndpointResolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesEndpointResolver gets an existing KubernetesEndpointResolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesEndpointResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesEndpointResolverState, opts ...pulumi.ResourceOption) (*KubernetesEndpointResolver, error) {
	var resource KubernetesEndpointResolver
	err := ctx.ReadResource("kubernetes:getambassador.io/v2:KubernetesEndpointResolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesEndpointResolver resources.
type kubernetesEndpointResolverState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec *KubernetesEndpointResolverSpec `pulumi:"spec"`
}

type KubernetesEndpointResolverState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesEndpointResolverSpecPtrInput
}

func (KubernetesEndpointResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesEndpointResolverState)(nil)).Elem()
}

type kubernetesEndpointResolverArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec *KubernetesEndpointResolverSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KubernetesEndpointResolver resource.
type KubernetesEndpointResolverArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KubernetesEndpointResolver tells Ambassador to use Kubernetes Endpoints resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesEndpointResolverSpecPtrInput
}

func (KubernetesEndpointResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesEndpointResolverArgs)(nil)).Elem()
}

type KubernetesEndpointResolverInput interface {
	pulumi.Input

	ToKubernetesEndpointResolverOutput() KubernetesEndpointResolverOutput
	ToKubernetesEndpointResolverOutputWithContext(ctx context.Context) KubernetesEndpointResolverOutput
}

func (*KubernetesEndpointResolver) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolver)(nil))
}

func (i *KubernetesEndpointResolver) ToKubernetesEndpointResolverOutput() KubernetesEndpointResolverOutput {
	return i.ToKubernetesEndpointResolverOutputWithContext(context.Background())
}

func (i *KubernetesEndpointResolver) ToKubernetesEndpointResolverOutputWithContext(ctx context.Context) KubernetesEndpointResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesEndpointResolverOutput)
}

type KubernetesEndpointResolverOutput struct {
	*pulumi.OutputState
}

func (KubernetesEndpointResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesEndpointResolver)(nil))
}

func (o KubernetesEndpointResolverOutput) ToKubernetesEndpointResolverOutput() KubernetesEndpointResolverOutput {
	return o
}

func (o KubernetesEndpointResolverOutput) ToKubernetesEndpointResolverOutputWithContext(ctx context.Context) KubernetesEndpointResolverOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KubernetesEndpointResolverOutput{})
}
