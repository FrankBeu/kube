// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ConsulResolver is the Schema for the ConsulResolver API
type ConsulResolver struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec ConsulResolverSpecPtrOutput `pulumi:"spec"`
}

// NewConsulResolver registers a new resource with the given unique name, arguments, and options.
func NewConsulResolver(ctx *pulumi.Context,
	name string, args *ConsulResolverArgs, opts ...pulumi.ResourceOption) (*ConsulResolver, error) {
	if args == nil {
		args = &ConsulResolverArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v2")
	args.Kind = pulumi.StringPtr("ConsulResolver")
	var resource ConsulResolver
	err := ctx.RegisterResource("kubernetes:getambassador.io/v2:ConsulResolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsulResolver gets an existing ConsulResolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsulResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsulResolverState, opts ...pulumi.ResourceOption) (*ConsulResolver, error) {
	var resource ConsulResolver
	err := ctx.ReadResource("kubernetes:getambassador.io/v2:ConsulResolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsulResolver resources.
type consulResolverState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec *ConsulResolverSpec `pulumi:"spec"`
}

type ConsulResolverState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec ConsulResolverSpecPtrInput
}

func (ConsulResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*consulResolverState)(nil)).Elem()
}

type consulResolverArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec *ConsulResolverSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ConsulResolver resource.
type ConsulResolverArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ConsulResolver tells Ambassador to use Consul to resolve services. In addition to the AmbassadorID, it needs information about which Consul server and DC to use.
	Spec ConsulResolverSpecPtrInput
}

func (ConsulResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consulResolverArgs)(nil)).Elem()
}

type ConsulResolverInput interface {
	pulumi.Input

	ToConsulResolverOutput() ConsulResolverOutput
	ToConsulResolverOutputWithContext(ctx context.Context) ConsulResolverOutput
}

func (*ConsulResolver) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolver)(nil))
}

func (i *ConsulResolver) ToConsulResolverOutput() ConsulResolverOutput {
	return i.ToConsulResolverOutputWithContext(context.Background())
}

func (i *ConsulResolver) ToConsulResolverOutputWithContext(ctx context.Context) ConsulResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulResolverOutput)
}

type ConsulResolverOutput struct {
	*pulumi.OutputState
}

func (ConsulResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsulResolver)(nil))
}

func (o ConsulResolverOutput) ToConsulResolverOutput() ConsulResolverOutput {
	return o
}

func (o ConsulResolverOutput) ToConsulResolverOutputWithContext(ctx context.Context) ConsulResolverOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConsulResolverOutput{})
}
