// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// LogService is the Schema for the logservices API
type LogService struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// LogServiceSpec defines the desired state of LogService
	Spec LogServiceSpecPtrOutput `pulumi:"spec"`
}

// NewLogService registers a new resource with the given unique name, arguments, and options.
func NewLogService(ctx *pulumi.Context,
	name string, args *LogServiceArgs, opts ...pulumi.ResourceOption) (*LogService, error) {
	if args == nil {
		args = &LogServiceArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v2")
	args.Kind = pulumi.StringPtr("LogService")
	var resource LogService
	err := ctx.RegisterResource("kubernetes:getambassador.io/v2:LogService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogService gets an existing LogService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogServiceState, opts ...pulumi.ResourceOption) (*LogService, error) {
	var resource LogService
	err := ctx.ReadResource("kubernetes:getambassador.io/v2:LogService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogService resources.
type logServiceState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// LogServiceSpec defines the desired state of LogService
	Spec *LogServiceSpec `pulumi:"spec"`
}

type LogServiceState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// LogServiceSpec defines the desired state of LogService
	Spec LogServiceSpecPtrInput
}

func (LogServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*logServiceState)(nil)).Elem()
}

type logServiceArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// LogServiceSpec defines the desired state of LogService
	Spec *LogServiceSpec `pulumi:"spec"`
}

// The set of arguments for constructing a LogService resource.
type LogServiceArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// LogServiceSpec defines the desired state of LogService
	Spec LogServiceSpecPtrInput
}

func (LogServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logServiceArgs)(nil)).Elem()
}

type LogServiceInput interface {
	pulumi.Input

	ToLogServiceOutput() LogServiceOutput
	ToLogServiceOutputWithContext(ctx context.Context) LogServiceOutput
}

func (*LogService) ElementType() reflect.Type {
	return reflect.TypeOf((*LogService)(nil))
}

func (i *LogService) ToLogServiceOutput() LogServiceOutput {
	return i.ToLogServiceOutputWithContext(context.Background())
}

func (i *LogService) ToLogServiceOutputWithContext(ctx context.Context) LogServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogServiceOutput)
}

type LogServiceOutput struct {
	*pulumi.OutputState
}

func (LogServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogService)(nil))
}

func (o LogServiceOutput) ToLogServiceOutput() LogServiceOutput {
	return o
}

func (o LogServiceOutput) ToLogServiceOutputWithContext(ctx context.Context) LogServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LogServiceOutput{})
}
