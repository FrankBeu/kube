// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DevPortal is the Schema for the DevPortals API
//  DevPortal resources specify the `what` and `how` is shown in a DevPortal:
//  * `what` is in a DevPortal can be controlled with   - a `selector`, that can be used for filtering `Mappings`.   - a `docs` listing of (services, url) * `how` is a pointer to some `contents` (a checkout of a Git repository   with go-templates/markdown/css).
//     Multiple `DevPortal`s can exist in the cluster, and the Dev Portal server will show them at different endpoints. A `DevPortal` resource with a special name, `ambassador`, will be used for configuring the default Dev Portal (served at `/docs/` by default).
type DevPortal struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// DevPortalSpec defines the desired state of DevPortal
	Spec DevPortalSpecPtrOutput `pulumi:"spec"`
}

// NewDevPortal registers a new resource with the given unique name, arguments, and options.
func NewDevPortal(ctx *pulumi.Context,
	name string, args *DevPortalArgs, opts ...pulumi.ResourceOption) (*DevPortal, error) {
	if args == nil {
		args = &DevPortalArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v2")
	args.Kind = pulumi.StringPtr("DevPortal")
	var resource DevPortal
	err := ctx.RegisterResource("kubernetes:getambassador.io/v2:DevPortal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevPortal gets an existing DevPortal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevPortal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevPortalState, opts ...pulumi.ResourceOption) (*DevPortal, error) {
	var resource DevPortal
	err := ctx.ReadResource("kubernetes:getambassador.io/v2:DevPortal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevPortal resources.
type devPortalState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DevPortalSpec defines the desired state of DevPortal
	Spec *DevPortalSpec `pulumi:"spec"`
}

type DevPortalState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// DevPortalSpec defines the desired state of DevPortal
	Spec DevPortalSpecPtrInput
}

func (DevPortalState) ElementType() reflect.Type {
	return reflect.TypeOf((*devPortalState)(nil)).Elem()
}

type devPortalArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DevPortalSpec defines the desired state of DevPortal
	Spec *DevPortalSpec `pulumi:"spec"`
}

// The set of arguments for constructing a DevPortal resource.
type DevPortalArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// DevPortalSpec defines the desired state of DevPortal
	Spec DevPortalSpecPtrInput
}

func (DevPortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devPortalArgs)(nil)).Elem()
}

type DevPortalInput interface {
	pulumi.Input

	ToDevPortalOutput() DevPortalOutput
	ToDevPortalOutputWithContext(ctx context.Context) DevPortalOutput
}

func (*DevPortal) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortal)(nil))
}

func (i *DevPortal) ToDevPortalOutput() DevPortalOutput {
	return i.ToDevPortalOutputWithContext(context.Background())
}

func (i *DevPortal) ToDevPortalOutputWithContext(ctx context.Context) DevPortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevPortalOutput)
}

type DevPortalOutput struct {
	*pulumi.OutputState
}

func (DevPortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevPortal)(nil))
}

func (o DevPortalOutput) ToDevPortalOutput() DevPortalOutput {
	return o
}

func (o DevPortalOutput) ToDevPortalOutputWithContext(ctx context.Context) DevPortalOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DevPortalOutput{})
}
