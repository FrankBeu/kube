// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KubernetesServiceResolver is the Schema for the kubernetesserviceresolver API
type KubernetesServiceResolver struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesServiceResolverSpecPtrOutput `pulumi:"spec"`
}

// NewKubernetesServiceResolver registers a new resource with the given unique name, arguments, and options.
func NewKubernetesServiceResolver(ctx *pulumi.Context,
	name string, args *KubernetesServiceResolverArgs, opts ...pulumi.ResourceOption) (*KubernetesServiceResolver, error) {
	if args == nil {
		args = &KubernetesServiceResolverArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v2")
	args.Kind = pulumi.StringPtr("KubernetesServiceResolver")
	var resource KubernetesServiceResolver
	err := ctx.RegisterResource("kubernetes:getambassador.io/v2:KubernetesServiceResolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesServiceResolver gets an existing KubernetesServiceResolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesServiceResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesServiceResolverState, opts ...pulumi.ResourceOption) (*KubernetesServiceResolver, error) {
	var resource KubernetesServiceResolver
	err := ctx.ReadResource("kubernetes:getambassador.io/v2:KubernetesServiceResolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesServiceResolver resources.
type kubernetesServiceResolverState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec *KubernetesServiceResolverSpec `pulumi:"spec"`
}

type KubernetesServiceResolverState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesServiceResolverSpecPtrInput
}

func (KubernetesServiceResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesServiceResolverState)(nil)).Elem()
}

type kubernetesServiceResolverArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec *KubernetesServiceResolverSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KubernetesServiceResolver resource.
type KubernetesServiceResolverArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// KubernetesServiceResolver tells Ambassador to use Kubernetes Service resources to resolve services. It actually has no spec other than the AmbassadorID.
	Spec KubernetesServiceResolverSpecPtrInput
}

func (KubernetesServiceResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesServiceResolverArgs)(nil)).Elem()
}

type KubernetesServiceResolverInput interface {
	pulumi.Input

	ToKubernetesServiceResolverOutput() KubernetesServiceResolverOutput
	ToKubernetesServiceResolverOutputWithContext(ctx context.Context) KubernetesServiceResolverOutput
}

func (*KubernetesServiceResolver) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolver)(nil))
}

func (i *KubernetesServiceResolver) ToKubernetesServiceResolverOutput() KubernetesServiceResolverOutput {
	return i.ToKubernetesServiceResolverOutputWithContext(context.Background())
}

func (i *KubernetesServiceResolver) ToKubernetesServiceResolverOutputWithContext(ctx context.Context) KubernetesServiceResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesServiceResolverOutput)
}

type KubernetesServiceResolverOutput struct {
	*pulumi.OutputState
}

func (KubernetesServiceResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesServiceResolver)(nil))
}

func (o KubernetesServiceResolverOutput) ToKubernetesServiceResolverOutput() KubernetesServiceResolverOutput {
	return o
}

func (o KubernetesServiceResolverOutput) ToKubernetesServiceResolverOutputWithContext(ctx context.Context) KubernetesServiceResolverOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KubernetesServiceResolverOutput{})
}
