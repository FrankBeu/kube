// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TCPMapping is the Schema for the tcpmappings API
type TCPMapping struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec TCPMappingSpecPtrOutput `pulumi:"spec"`
}

// NewTCPMapping registers a new resource with the given unique name, arguments, and options.
func NewTCPMapping(ctx *pulumi.Context,
	name string, args *TCPMappingArgs, opts ...pulumi.ResourceOption) (*TCPMapping, error) {
	if args == nil {
		args = &TCPMappingArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("getambassador.io/v1")
	args.Kind = pulumi.StringPtr("TCPMapping")
	var resource TCPMapping
	err := ctx.RegisterResource("kubernetes:getambassador.io/v1:TCPMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTCPMapping gets an existing TCPMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTCPMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TCPMappingState, opts ...pulumi.ResourceOption) (*TCPMapping, error) {
	var resource TCPMapping
	err := ctx.ReadResource("kubernetes:getambassador.io/v1:TCPMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TCPMapping resources.
type tcpmappingState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec *TCPMappingSpec `pulumi:"spec"`
}

type TCPMappingState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec TCPMappingSpecPtrInput
}

func (TCPMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpmappingState)(nil)).Elem()
}

type tcpmappingArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec *TCPMappingSpec `pulumi:"spec"`
}

// The set of arguments for constructing a TCPMapping resource.
type TCPMappingArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// TCPMappingSpec defines the desired state of TCPMapping
	Spec TCPMappingSpecPtrInput
}

func (TCPMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpmappingArgs)(nil)).Elem()
}

type TCPMappingInput interface {
	pulumi.Input

	ToTCPMappingOutput() TCPMappingOutput
	ToTCPMappingOutputWithContext(ctx context.Context) TCPMappingOutput
}

func (*TCPMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMapping)(nil))
}

func (i *TCPMapping) ToTCPMappingOutput() TCPMappingOutput {
	return i.ToTCPMappingOutputWithContext(context.Background())
}

func (i *TCPMapping) ToTCPMappingOutputWithContext(ctx context.Context) TCPMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPMappingOutput)
}

type TCPMappingOutput struct {
	*pulumi.OutputState
}

func (TCPMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPMapping)(nil))
}

func (o TCPMappingOutput) ToTCPMappingOutput() TCPMappingOutput {
	return o
}

func (o TCPMappingOutput) ToTCPMappingOutputWithContext(ctx context.Context) TCPMappingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TCPMappingOutput{})
}
