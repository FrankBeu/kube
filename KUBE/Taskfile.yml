###
##
# * TASKFILE
#   https://taskfile.dev
#
version: 3


vars:

  red:           "\e[31m"
  redLight:      "\e[91m"
  green:         "\e[32m"
  greenLight:    "\e[92m"
  yellow:        "\e[33m"
  yellowLight:   "\e[93m"
  blue:          "\e[34m"
  blueLight:     "\e[94m"
  magenta:       "\e[35m"
  magentaLight:  "\e[95m"
  cyan:          "\e[36m"
  cyanLight:     "\e[96m"

  black:         "\e[30m"
  grayDark:      "\e[90m"
  grayLight:     "\e[37m"
  white:         "\e[97m"

  reset:         "\e[0m"

  name:                     kube

  domain:                   "thesym.site"

  message:                  tasks for {{.name}}


tasks:

  taskDebug:
    desc: show all variables in Taskfile
    cmds:
      - |
        echo -e \
        "\n{{range $key, $value := .}} {{$key }}:  \e[92m{{$value}}\e[0m\n {{end}}\n"
    silent: true


  default:
    desc: display info
    cmds:
      - |
        echo -e \
        "\n{{.message}}\n"
      - |
        go-task -l
    silent: true


###
##
# ** SEQUENCE
#
#
  0:
    desc: ( clusterCreateDev )
    cmds:
      - task: clusterCreateDev
    silent: true


  1:
    desc: ( pulumiLogin )
    cmds:
      - task: pulumiLogin
    silent: true


  2:
    desc: ( pulumiUp )
    cmds:
      - task: pulumiUp
    silent: true
  4:
    desc: ( clusterDelete )
    cmds:
      - task: clusterDelete
    silent: true

  c:
    desc: ( colorDisplay )
    cmds:
      - task:  colorDisplay
    silent: true



###
##
# ** ALPHABETICAL
#
  clusterCreateDev:
    desc: create a dev-cluster for {{.domain}}
    cmds:
      - |
        k3d cluster create \
        {{.name}}-dev \
        --k3s-arg "--disable=traefik@server:0" \
        --volume $XDG_STATE_HOME/kube/persistence/dev:/srv/kube/persistence/dev \
        --port "32000-32767:32000-32767@server:0"
    silent: true


  clusterCreateStage:
    desc: create a staging-cluster for {{.domain}}
    cmds:
      - |
        k3d cluster create \
        {{.name}}-stage \
        --k3s-arg "--disable=traefik@server:0" \
        --volume $XDG_STATE_HOME/kube/persistence/stage:/srv/kube/persistence/stage \
        --port "31000-31767:31000-31767@server:0"
    silent: true


  clusterDeleteDev:
    desc: delete the dev-cluster
    cmds:
      - |
        k3d cluster delete {{.name}}-dev
    silent: true


  clusterDeleteStage:
    desc: delete the staging-cluster
    cmds:
      - |
        k3d cluster delete {{.name}}-stage
    silent: true


  pulumiDebugOn:
    desc: switch on debug mode
    cmds:
      - go build -gcflags '-N -l' -o pulumi-main main.go
      - |
        if [[ -f "PulumiDEBUG.yaml" ]]; then
        mv Pulumi{,ORIG}.yaml
        mv Pulumi{DEBUG,}.yaml
        fi
      - echo -e ""
      - echo -e "  run"
      - echo -e "  {{.blue}}p{,S,PROD} up -c debugMode=true{{.reset}}"
      - echo -e "  run"
      - echo -e "  {{.blue}}ps pulumi-main | awk '/pulumi-main$/{print \$1}' | xsel -b{{.reset}}"
      - echo -e ""
      - echo -e "  {{.yellow}}set breakpoint on RunInDebugMode-Loop{{.reset}}"
      - echo -e "  {{.yellow}}attach with 'Go Attach Executable Configuration': yank the pID{{.reset}}"
      - echo -e "  {{.yellow}}set debugReady=true{{.reset}}"
      - echo -e ""
      - echo -e "  {{.green}}debug{{.reset}}"
      - echo -e ""
    silent: true


  pulumiDebugOff:
    desc: switch off debug mode
    cmds:
      - |
        if [[ -f "PulumiORIG.yaml" ]]; then
        mv Pulumi{,DEBUG}.yaml
        mv Pulumi{ORIG,}.yaml
        fi
      - echo -e ""
      - echo -e "  run"
      - echo -e "  {{.blue}}p{,S,PROD} up -c debugMode=false{{.reset}}"
      - echo -e ""
    silent: true


  pulumiLogin:
    desc: make pulumi independent of pulumi.com
    cmds:
      - |
        # pulumi login --local
        pulumi login file://$XDG_STATE_HOME/pulumi
    silent: true


  pulumiNew:
    desc: create a new pulumiProject
    cmds:
      - |
        mkdir {{.nameSpace}}
        cd {{.nameSpace}}
        pulumi new kubernetes-go
    silent: true


  pulumiUp:
    desc: apply main.go
    cmds:
      - |
        summon --up bash -c 'PULUMI_CONFIG_PASSPHRASE=${PULUMI_CONFIG_PASSPHRASE} pulumi up'

    silent: true


  pulumiConfigExample:
    desc: change pulumiConfig
    cmds:
      - |
        cd test
        pulumi config set isContaineredCluster true
    silent: true


###
##
# ** colorDisplay
#
#
  colorDisplay:
    desc: show all defined colors and their emacs-register
    cmds:
      - |
        echo -e ""
        echo -e "  {{.red}}r red{{.reset}}"
        echo -e "  {{.redLight}}e redLight{{.reset}}"
        echo -e "  {{.green}}g green{{.reset}}"
        echo -e "  {{.greenLight}}f greenLight{{.reset}}"
        echo -e "  {{.yellow}}y yellow{{.reset}}"
        echo -e "  {{.yellowLight}}t yellowLight{{.reset}}"
        echo -e "  {{.blue}}u blue{{.reset}}"
        echo -e "  {{.blueLight}}i blueLight{{.reset}}"
        echo -e "  {{.magenta}}m magenta{{.reset}}"
        echo -e "  {{.magentaLight}}j magentaLight{{.reset}}"
        echo -e "  {{.cyan}}c cyan{{.reset}}"
        echo -e "  {{.cyanLight}}d cyanLight{{.reset}}"
        echo -e "  {{.black}}b black{{.reset}}"
        echo -e "  {{.grayDark}}a grayDark{{.reset}}"
        echo -e "  {{.grayLight}}q grayLight{{.reset}}"
        echo -e "  {{.white}}w white{{.reset}}"
        echo -e ""
        echo -e "  x reset"
        echo -e ""
    silent: true


# Local Variables:
# eval: (evil-set-register  97 "{{.grayDark}}"    )  ;; a
# eval: (evil-set-register  98 "{{.black}}"       )  ;; b
# eval: (evil-set-register  99 "{{.cyan}}"        )  ;; c
# eval: (evil-set-register 100 "{{.cyanLight}}"   )  ;; d
# eval: (evil-set-register 101 "{{.redLight}}"    )  ;; e
# eval: (evil-set-register 102 "{{.greenLight}}"  )  ;; f
# eval: (evil-set-register 103 "{{.green}}"       )  ;; g
# eval: (evil-set-register 105 "{{.blueLight}}"   )  ;; i
# eval: (evil-set-register 106 "{{.magentaLight}}")  ;; j
# eval: (evil-set-register 109 "{{.magenta}}"     )  ;; m
# eval: (evil-set-register 113 "{{.grayLight}}"   )  ;; q
# eval: (evil-set-register 114 "{{.red}}"         )  ;; r
# eval: (evil-set-register 116 "{{.yellowLight}}" )  ;; t
# eval: (evil-set-register 117 "{{.blue}}"        )  ;; u
# eval: (evil-set-register 119 "{{.white}}"       )  ;; w
# eval: (evil-set-register 121 "{{.yellow}}"      )  ;; y
# eval: (evil-set-register 120 "{{.reset}}"       )  ;; x
# End:
