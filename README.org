* kube
k8s-cluster built with pulumi  on nixos
** INFO
**** operators
***** prebuild
https://github.com/pulumi/pulumi-kubernetes-crds
** dependencies
*** required
**** pulumi
https://www.pulumi.com/
**** kubectl
*** convenience
**** *summon + gopass*
providing the ~PULUMI_CONFIG_PASSPHRASE~ in a easy and secure way
*** DEVEL
**** *k3d*
***** used to create k8s-cluster for
****** dev
****** stage
**** *yaml-Splitting*
~kube2pulumi~ works better with single files.
#+begin_example shell
k8split -o SPLIT cert-manager.yaml
#+end_example
**** *kube2pulumi*
generate a =main.go= which must be processed further
#+begin_example shell
  kube2pulumi go -d ./SPLIT
#+end_example
**** *crd2pulumi*
***** output to KUBE
#+begin_example shell
  crd2pulumi --goPath "$(git root)/KUBE/crds"         ./SPLIT/customresourcedefinition*.yaml
  crd2pulumi --goPath "$(git root)/KUBE/crds" --force ./SPLIT/customresourcedefinition*.yaml
#+end_example
***** output to ./crds
#+begin_src shell :results drawer
  crd2pulumi -g ./SPLIT/customresourcedefinition*.yaml
#+end_src
** safety / security
in order to prevent an unauthorized or accidental deploy to the wrong cluster
*gopass* and *summon* are used to wrapp calls to *pulumi*.
*** command ~pulumi~
**** usage
***** deploy
if the *deployCommand* and the *stack* do not match
the following message is printed:
#+begin_quote
error: decrypting secret value: failed to decrypt:
incorrect passphrase, please set PULUMI_CONFIG_PASSPHRASE to the correct passphrase or set PULUMI_CONFIG_PASSPHRASE_FILE to a file containing the passphrase
#+end_quote
***** choose your target stack
#+begin_src shell :results drawer
  p{,S,PROD} stack select kube-{dev,stage,prod}
#+end_src
***** deploy
**** shell-setup
The ~pulumi~ command is only used via calls to stack-dependent aliases
#+begin_example shell
alias     p="summonPulumi dev"
alias    pS="summonPulumi stage"
alias pPROD="summonPulumi prod"
#+end_example
#+begin_example shell
function summonPulumi() {
    ENV=${1}
    PULUMI_ARGS=${@:2}
    summon --up -e ${ENV} zsh -c "pulumi ${PULUMI_ARGS}"
}
#+end_example
**** summon
chooses the env defined in [[./KUBE/secrets.yml]]
calls gopass to retrieve the value
and sets the PULUMI_CONFIG_PASSPHRASE accordingly
**** gopass
protects a password for each env
=k8s/misc/pulumiDev=
=k8s/misc/pulumiStage=
=k8s/misc/pulumiProd=
*** secrets in environment
-> [[*secrets][kube/environments/secrets]]
** cluster
*** dev
**** view =./KUBE/Taskfile.yml=
~clusterCreateDev~
*** staging
**** view =./KUBE/Taskfile.yml=
~clusterCreateStage~
**** TODO should match production
use k3s
*** production
**** TODO k3s
*** TODO persistence
** environments
each env needs an stack initialized using the right aliases
*** env
**** dev
[[dev.thesym.site]]
***** init
#+begin_src shell :results drawer
  p stack init kube-dev
#+end_src
**** stage
[[stage.thesym.site]]
***** init
#+begin_src shell :results drawer
  pS stack init kube-stage
#+end_src
**** prod
[[thesym.site]]
***** init
#+begin_src shell :results drawer
  pProd stack init kube-prod
#+end_src
*** secrets
**** password
***** set
#+begin_src shell :results drawer
p config set --secret --path secTest.password qwer
#+end_src
***** get
#+begin_src shell :results drawer
p config get --path secTest.password
#+end_src
**** passphrases
can not be entered via aliases
#+begin_src shell :results drawer
summon -e dev zsh -c 'pulumi config set --secret --path secTest.passphras "a secret passphrase"'
#+end_src
***** n. move to subkey indented
**** arrays
can not be entered via aliases
#+begin_src shell :results drawer
summon -e dev bash -c 'pulumi config set --secret --path secTest.array[0] qwer'
#+end_src
**** remove
#+begin_src shell :results drawer
p config rm secTest
#+end_src
** proxy
The Ingresscontroller is  used in  ~NodePort~ Mode.
Only ports 30000 - 32767 can be use.
So a reverse proxy on the host is needed.
The k3d-server-layer must be traversed by  portMapping, too,
*** TODO link to https://gitea.thesym.site...nginxConfig
*** TODO link to https://gitea.thesym.site...dns/domain
** configuration
*** changes to config must be applied with ~pulumi up~ in order to be affective
*** think of ENV - not of config - *.go is your config* now
*** RESIST
**** the urge to write a config.yaml
***** never import viper
***** again: golang is the config
pulumi the app
*** settings
**** kubernetes provider
https://www.pulumi.com/docs/intro/cloud-providers/kubernetes/#configuration
***** do not show deprecation warnings
#+begin_example shell
pulumi config set kubernetes:suppressDeprecationWarnings true
#+end_example
***** constraint stack to cluster
#+begin_example shell
pulumi config set kubernetes:context "k3d-kube-dev"
#+end_example
#+begin_example shell
pulumi config set kubernetes:context "k3d-kube-stage"
#+end_example
#+begin_example shell
pulumi config set kubernetes:context "kube"
#+begin_example shell
pulumi config set kubernetes:context "k3d-kube-dev"
#+end_example
#+end_example
**** environment
#+begin_example shell
pulumi config set domain "stage.thesym.site"
#+end_example
#+begin_example shell
pulumi config set env "stage"
#+end_example
** architecture
*** CRDS
**** all ~crd2pulumi~ created crds
**** yaml-definitions
***** path
****** !!! must be specified starting from moduleRoot.
    ├─ kubernetes:yaml:ConfigFile                                                     certmanager-certificate-definition
    │  └─ kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition                 certificates.cert-manager.io
****** if yamls are specified relative, only the config files will be created
#+begin_example shell
pulumi stack
#+end_example
    ├─ kubernetes:yaml:ConfigFile                                                     certmanager-certificate-definition
*** STRUCTURAL
**** ingress
***** emmissary
https://www.getambassador.io/docs/edge-stack/latest/topics/install/install-ambassador-oss/#kubernetes-yaml
****** RESOURCES
******* crds, rbac
#+begin_src shell :results drawer
curl https://www.getambassador.io/yaml/ambassador/ambassador-crds.yaml -Lo ./RESOURCES/definition/structural/ingress/emmissary/ambassador-crds.yaml
curl https://www.getambassador.io/yaml/ambassador/ambassador-rbac.yaml -Lo ./RESOURCES/definition/structural/ingress/emmissary/ambassador-rbac.yaml
#+end_src
******* service
#+begin_src yaml
cat <<EOF > ./RESOURCES/definition/structural/ingress/emmissary/ambassador-service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
   - port: 80
     targetPort: 8080
  selector:
    service: ambassador
EOF
#+end_src
******* create CRDs
#+begin_src shell :results drawer
crd2pulumi --goPath ./KUBE/crds/emmissary ./RESOURCES/definition/structural/ingress/emmissary/ambassador-crds.yaml
mkdir ./KUBE/crds/emmissary/cdrDefinitions
cp ./RESOURCES/definition/structural/ingress/emmissary/ambassador-crds.yaml ./KUBE/crds/emmissary/cdrDefinitions/ambassador-crds.yaml

kube2pulumi go -f ./RESOURCES/definition/structural/ingress/emmissary/ambassador-{rbac,service}.yaml
#+end_src
******* create source
#+begin_src shell :results drawer
  kube2pulumi go -f ./RESOURCES/definition/structural/ingress/emmissary/ambassador-{rbac,service}.yaml
  mkdir -p ./KUBE/definition/structural/ingress/emmissary && cp ./RESOURCES/definition/structural/ingress/emmissary/main.go $_
### adjust main.go
#+end_src
****** DiagnosticService
#+begin_src shell :results drawer
kubectl port-forward service/ambassador-admin 8877
#+end_src
http://localhost:8877/ambassador/v0/diag/
******* disabling
if diagnostics overview would not be used
#+begin_src yaml
# cat <<EOF |kubectl apply -f
cat <<EOF > ./RESOURCES/definition/structural/ingress/emmissary/ambassador-diagnostic-module.yaml
---
apiVersion: getambassador.io/v2
kind: Module
metadata:
  name: ambassador
  namespace: emmissary
spec:
  config:
    diagnostics:
      enabled: false
EOF
#+end_src
******** create pulumi
#+begin_src shell :results drawer
  kube2pulumi go -f ./RESOURCES/definition/structural/ingress/emmissary/ambassador-diagnostic-module.yaml
#+end_src
******** add to =./KUBE/definition/structural/ingress/emmissary/emmissary.go=
****** STATUS
deployment possible, crd:host cannot be instanciated
***** DEPRECATED edgeStack
https://www.getambassador.io/docs/edge-stack/latest/tutorials/getting-started/
#+begin_src shell :results drawer
kubectl apply -f https://www.getambassador.io/yaml/aes-crds.yaml && \
kubectl wait --for condition=established --timeout=90s crd -lproduct=aes && \
kubectl apply -f https://www.getambassador.io/yaml/aes.yaml && \
kubectl -n ambassador wait --for condition=available --timeout=90s deploy -lproduct=aes
#+end_src
***** gloo
****** RESOURCES
#+begin_src shell :results drawer
  helm repo add gloo https://storage.googleapis.com/solo-public-helm
  helm repo update
  cd RESOURCES/structural/apiGateway/gloo/RESOURCES

  helm pull gloo/gloo -d CHART
#+end_src
******* could be installed with helm
#+begin_src shell :results drawer
cd ./RESOURCES/structural/apiGateway/gloo/RESOURCES
glooctl install gateway -f ./CHART/gloo-1.7.11.tgz
ka ./SPLIT/service-gateway-proxy.yaml
#+end_src
******* create yaml-file
#+begin_src shell :results drawer
glooctl install gateway -f CHART/gloo-1.7.11.tgz --dry-run > gloo.yaml
#+end_src
******* split
#+begin_src shell :results drawer
k8split -o SPLIT gloo.yaml
#+end_src
******* use nodeport
change  =gloo/templates/8-gateway-proxy-service.yaml=
~spec.type: LoadBalancer~
~spec.type: NodePort~
******* convert
#+begin_src shell :results drawer
kube2pulumi go -d .
#+end_src
****** STATUS
not used
token authentication only possible with enterprise-version
***** nginx
****** template
https://kubernetes.github.io/ingress-nginx/deploy/
#+begin_src shell :results drawer
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml
curl -O https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml
#+end_src
***** tyk
****** RESOURCES
#+begin_src shell :results drawer
  git clone https://github.com/TykTechnologies/tyk-oss-k8s-deployment.git ./RESOURCES/definition/structural/ingress/tyk/tyk-oss-k8s-deployment2
  kube2pulumi go -d ./RESOURCES/definition/structural/ingress/tyk/tyk-oss-k8s-deployment
#+end_src
****** STATUS
******* useable
******* unused
no http2https
needs proxy -> nginx -> use nginx as ingressController
**** certs
***** certmanager
#+begin_src shell :results drawer
  curl -LO https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml
  crd2pulumi --goPath ./KUBE/crds/cert-manager ./RESOURCES/definition/structural/certs/certmanager/cdrDefinitions/customresourcedefinition-*.yaml
#+end_src
*** TESTING
**** gloo
#+begin_src shell :results drawer
curl -O https://raw.githubusercontent.com/solo-io/gloo/v1.2.9/example/petstore/petstore.yaml
#+end_src
***** petstore
#+begin_src shell :results drawer
kubectl -n testing-petstore port-forward petstore-9d499b76f-2xjqz 8080:8080
#+end_src
http://localhost:8080/swagger.json
http://localhost:8080/api/pets
**** [[file:KUBE/definition/testing/pulumiexamples/README.org::*pulumiExamples][pulumiExamples]]
*** APP
**** vcs
***** gitea                                                            :helm:
****** helm
https://gitea.com/gitea/helm-chart/
#+begin_src shell :results drawer
helm repo add gitea-charts https://dl.gitea.io/charts/
helm repo update
#+end_src
****** ~Transformations~
Transformation act on the yaml-layer
The ingress chooses the wrong api
******* CURRENT:
#+begin_src shell :results drawer
helm template -s templates/gitea/ingress.yaml gitea-charts/gitea --set ingress.enabled=true --set "ingress.hosts\.0.host"=git.thesym.site
#+end_src
#+begin_src yaml
---
# Source: gitea/templates/gitea/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: RELEASE-NAME-gitea
  labels:
    helm.sh/chart: gitea-3.1.4
    app: gitea
    app.kubernetes.io/name: gitea
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.14.2"
    version: "1.14.2"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "git.example.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: RELEASE-NAME-gitea-http
              servicePort: 3000
#+end_src
******** drill down with ~map[string]interface{}~ and ~[]interface{}~
#+begin_src go
serviceName := state["spec"].(map[string]interface{})["rules"].([]interface{})[0].(map[string]interface{})["http"].(map[string]interface{})["paths"].([]interface{})[0].(map[string]interface{})["backend"].(map[string]interface{})["serviceName"]
#+end_src
******** print json
#+begin_src go
paths := state["spec"].(map[string]interface{})["rules"].([]interface{})[0].(map[string]interface{})["http"].(map[string]interface{})["paths"]
// DEBUG:
result, _ := json.Marshal(backend)
fmt.Println(string(result))
#+end_src
******* TARGET:
#+begin_src shell :results drawer
helm template -s templates/gitea/ingress.yaml gitea-charts/gitea --set ingress.enabled=true --set "ingress.hosts\.0.host"=git.thesym.site -a networking.k8s.io/v1/Ingress
#+end_src
#+begin_src yaml

---
# Source: gitea/templates/gitea/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: RELEASE-NAME-gitea
  labels:
    helm.sh/chart: gitea-3.1.4
    app: gitea
    app.kubernetes.io/name: gitea
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "1.14.2"
    version: "1.14.2"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "git.example.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: RELEASE-NAME-gitea-http
                port:
                  number: 3000
#+end_src
****** ~Values~
act on the helmValuesLayer
******* show all available valuse
#+begin_src shell :results drawer
  helm show values gitea-charts/gitea
  ### needs local version
  cat CHART/gitea/templates/gitea/ingress.yaml
#+end_src
**** observer
****** jaeger                                                      :operator:
https://github.com/jaegertracing/jaeger-operator
https://www.jaegertracing.io/docs/1.23/operator/
******* RESOURCES
#+begin_src shell :results drawer
mkdir -p ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/crds
#+end_src
#+begin_src shell :results drawer
    curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/service_account.yaml      -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/service_account.yaml
  # only needed when not installed clusterwide # curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/role.yaml                 -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/role.yaml
  # only needed when not installed clusterwide # curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/role_binding.yaml         -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/role_binding.yaml
    curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/operator.yaml             -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/operator.yaml

    curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/cluster_role.yaml         -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/cluster_role.yaml
    curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/cluster_role_binding.yaml -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/cluster_role_binding.yaml
#+end_src
******** customize operator.yaml, setting the env var WATCH_NAMESPACE to have an empty value, so that it can watch for instances across all namespaces.
#+begin_src yaml
env:
- name: WATCH_NAMESPACE
  value: ""
#+end_src
******** remove #comments from cluster_role.yaml (from role.yaml)
******** create golang
#+begin_src shell :results drawer
kube2pulumi go -d ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS
#+end_src
******** crds
#+begin_src shell :results drawer
curl https://raw.githubusercontent.com/jaegertracing/jaeger-operator/master/deploy/crds/jaegertracing.io_jaegers_crd.yaml -o ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/crds/jaegertracing.io_jaegers_crd.yaml

crd2pulumi --goPath ./KUBE/crds/jaeger ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/crds/jaegertracing.io_jaegers_crd.yaml

mkdir ./KUBE/crds/jaeger/crdDefinitions
cp ./RESOURCES/definition/apps/observer/jaeger/DOWNLOADS/crds/jaegertracing.io_jaegers_crd.yaml  ./KUBE/crds/jaeger/crdDefinitions/jaegertracing.io_jaegers_crd.yaml
#+end_src
******** instance
#+begin_src shell :results drawer
  kubectl apply -n observability -f - <<EOF
  apiVersion: jaegertracing.io/v1
  kind: Jaeger
  metadata:
    name: jaeger
  EOF
#+end_src
******** create jaegerinstance
use crds and the instance
**** communication
***** jitsi                                                            :helm:
https://github.com/krakazyabra/jitsi-helm
** DEVELOPMENT
*** transformations
**** examples
https://github.com/pulumi/pulumi-kubernetes/blob/760bd8d0ea2ffce11a936c3f4c323748d5fa5c9b/tests/sdk/go/yaml/main.go
https://github.com/jaxxstorm/pulumi-clusterautoscalerx/blob/9059fba37a03b2cd866b676a47c47825e3392788/main.go
https://github.com/jaxxstorm/iac-in-go/blob/fb5eb2c35ed9b4498b35701f3a3e4a43d6c896f7/sock-shop/main.go
https://github.com/idcrosby/pulumi-gitops/blob/f6fd7fa373409beb0f349be6af97bbb877e4473f/main.go
*** helmChart
**** apiVersion
***** NOT WORKING
https://github.com/pulumi/pulumi-kubernetes/issues/1034
***** use transformations
*** crds
**** operator-crds-repo
https://github.com/pulumi/pulumi-kubernetes-crds
*** debugging with delve
**** workflow
***** check =Task.yaml=
***** manual
****** build without stripping dwarfSymbols
******* debug
#+begin_src shell :results drawer
go build -gcflags '-N -l' -o pulumi-main main.go
#+end_src
******** if delving deeper is required
do not build only toplevel packages - build all packages without stripping
#+begin_src shell :results drawer
go build -gcflags "all=-N -l" -o pulumi-main main.go
#+end_src
****** prepare =Pulumi.yaml= for debugging
#+begin_src yaml
  ### ...
  runtime:
      name: go
      options:
          binary: pulumi-main
  ### ...
#+end_src
****** start
#+begin_src shell :results drawer
pS up -c debugMode=true
#+end_src
****** get pid
#+begin_src shell :results drawer
  ps pulumi-main
#+end_src
****** connect
******* XOR
******** insert pid into =launch.json=
******** via template
=SPC d d d=
~Go Attach Executable Configuration~
enter pid
****** change ~debugReady~
******* workflow
1. after starting session continue till ~debugReady~ is available in locals-window
2. quit hydra =q=
3. change to locals-window =C-w C-w=
4. navigate cursor to ~debugReady~
5. =M-x= ~dap-ui-set-variable-value~ *true* =ENTER=
6. back to man-window =C-w C-W=
7. open hydra =SPC d .=
8. start debugging
******* TODO find/create *easier* workflow
**** INFO
https://github.com/pulumi/pulumi/issues/1372
https://code.visualstudio.com/docs/
https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#attach-to-a-process-on-a-remote-machine
***** dap
https://microsoft.github.io/debug-adapter-protocol/overview
***** debugging a provider (other useCase)
https://gist.github.com/lblackstone/e91e841cf022e67586aa98fb2c5025fe
**** DONE implementation
***** use channels??
****** cleaner implementation but change~/callable  from emacs??
NO
***** debug debugging
eval:
#+begin_src elisp
(setq dap-print-io t)
#+end_src
and check messages buffer
***** proto for testing integration
=~/SRC/GITEA/PROTO/GOLANG/delveTestAttach/main.go=
***** schedule
****** proto working
******* attaching
****** tdd with bool
** TODO TODOS
*** TODO create/automate update cycle
**** pull changes
**** transformations
***** update namespace
***** other valid changes??
****** nodePort??
**** import into ~execK2pGenerated()~
function which is called by MODULE.CreateNAME()~C
#+begin_src go
  package PACKAGE

  config = CONFIG

  func CreatePACKAGE() {
          lib.CreateNamespaces()
          otherPackageSpecificFunc()
          execK2pGenerated()
  }

  func otherPackageSpecificFunc () {
  }

  func execK2pGenerated() {
          // exec generated code
  }
#+end_src

***** should be solved upstream
api-deprecations

****** contribute
*** TODO repoStructure
**** projectile needs git + gomod in same dir
**** pulumi  needs git + gomod in same dir
**** gopls should not read RESOURCES/*.go
**** TODO try buildtags
gopls respects them
#+begin_src go
 // +build never
#+end_src
**** Environments
***** prod
****** k3s
******* on nuc
***** stage
should mimic prod as closly as possible
****** TODO k3s
******* on mac
****** currently k3d
***** dev
****** k3d
******* on mac
******* on nuc
for multi node experiments
*** TODO create keynote
*** TODO testing, testing, testing
**** after coms + vcs
**** !!!
**** unit tests
***** only for lib
**** "integrationTests"
***** goldenFiles
****** needs optional providerArguments
******* renderProviderExample
******** definition
[[./KUBE/definition/testing/pulumiexamples/renderYaml/renderYaml.go::13]]
******** usage
[[./KUBE/definition/testing/pulumiexamples/renderYaml/renderYaml.go::38]]
***** pulumi
**** end2end
***** check if definedServices are available
*** architecture
**** all function should be pure
***** except Create.....()
***** TODO package config???
****** package-local
******* readable++
****** Create...()-local
******* forces pure lib~,package-functions
***** implement with testing
*** TODO persistence
