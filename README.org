* k8s
k8s-cluster built with pulumi  on nixos
** credentials
*** pulumi-password
can be found in gopass: =k8s/misc/pulumi=
can be used with summon
#+begin_src shell :results drawer
summon --up bash -c 'PULUMI_CONFIG_PASSPHRASE=${PULUMI_CONFIG_PASSPHRASE} pulumi up'
#+end_src
** architecture
*** CRDS
**** all ~crd2pulumi~ created crds
**** yaml-definitions
***** path
****** !!! must be specified starting from moduleRoot.
    ├─ kubernetes:yaml:ConfigFile                                                     certmanager-certificate-definition
    │  └─ kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition                 certificates.cert-manager.io
****** if yamls are specified relative, only the config files will be created
#+begin_example shell
pulumi stack
#+end_example
    ├─ kubernetes:yaml:ConfigFile                                                     certmanager-certificate-definition
*** STRUCTURAL
**** ingress
***** emmissary
https://www.getambassador.io/docs/edge-stack/latest/topics/install/install-ambassador-oss/#kubernetes-yaml
****** crds, rbac
#+begin_src shell :results drawer
curl https://www.getambassador.io/yaml/ambassador/ambassador-crds.yaml -Lo ./RESOURCES/definition/structural/ingress/emmissary/ambassador-crds.yaml
curl https://www.getambassador.io/yaml/ambassador/ambassador-rbac.yaml -Lo ./RESOURCES/definition/structural/ingress/emmissary/ambassador-rbac.yaml
#+end_src
****** service
#+begin_src yaml
cat <<EOF > ./RESOURCES/definition/structural/ingress/emmissary/ambassador-service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
   - port: 80
     targetPort: 8080
  selector:
    service: ambassador
EOF
#+end_src
****** DiagnosticService
http://{{AMBASSADOR_HOST}}/ambassador/v0/diag/
#+begin_src yaml
# cat <<EOF |kubectl apply -f
cat <<EOF > ./RESOURCES/definition/structural/ingress/emmissary/ambassador-diagnostic-module.yaml
---
apiVersion: getambassador.io/v2
kind: Module
metadata:
  name: ambassador
  namespace: emmissary
spec:
  config:
    diagnostics:
      enabled: true
EOF
#+end_src
****** create CRDs
#+begin_src shell :results drawer
crd2pulumi --goPath ./KUBE/crds/emmissary ./RESOURCES/definition/structural/ingress/emmissary/ambassador-crds.yaml
mkdir ./KUBE/crds/emmissary/cdrDefinitions
cp ./RESOURCES/definition/structural/ingress/emmissary/ambassador-crds.yaml ./KUBE/crds/emmissary/cdrDefinitions/ambassador-crds.yaml

kube2pulumi go -f ./RESOURCES/definition/structural/ingress/emmissary/ambassador-{rbac,service}.yaml
#+end_src
****** create source
#+begin_src shell :results drawer
  kube2pulumi go -f ./RESOURCES/definition/structural/ingress/emmissary/ambassador-{rbac,service}.yaml
  mkdir -p ./KUBE/definition/structural/ingress/emmissary && cp ./RESOURCES/definition/structural/ingress/emmissary/main.go $_
### adjust main.go
#+end_src
***** DEPRECATED edgeStack
https://www.getambassador.io/docs/edge-stack/latest/tutorials/getting-started/
#+begin_src shell :results drawer
kubectl apply -f https://www.getambassador.io/yaml/aes-crds.yaml && \
kubectl wait --for condition=established --timeout=90s crd -lproduct=aes && \
kubectl apply -f https://www.getambassador.io/yaml/aes.yaml && \
kubectl -n ambassador wait --for condition=available --timeout=90s deploy -lproduct=aes
#+end_src
***** gloo
****** RESOURCES
#+begin_src shell :results drawer
  helm repo add gloo https://storage.googleapis.com/solo-public-helm
  helm repo update
  cd RESOURCES/structural/apiGateway/gloo/RESOURCES

  helm pull gloo/gloo -d CHART
#+end_src
******* could be installed with helm
#+begin_src shell :results drawer
cd ./RESOURCES/structural/apiGateway/gloo/RESOURCES
glooctl install gateway -f ./CHART/gloo-1.7.11.tgz
ka ./SPLIT/service-gateway-proxy.yaml
#+end_src
******* create yaml-file
#+begin_src shell :results drawer
glooctl install gateway -f CHART/gloo-1.7.11.tgz --dry-run > gloo.yaml
#+end_src
******* split
#+begin_src shell :results drawer
k8split -o SPLIT gloo.yaml
#+end_src
******* use nodeport
change  =gloo/templates/8-gateway-proxy-service.yaml=
~spec.type: LoadBalancer~
~spec.type: NodePort~
******* convert
#+begin_src shell :results drawer
kube2pulumi go -d .
#+end_src
****** STATUS
not used
token authentication only possible with enterprise-version
***** nginx
****** template
https://kubernetes.github.io/ingress-nginx/deploy/
#+begin_src shell :results drawer
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml
curl -O https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml
#+end_src
***** tyk
no http2https
****** RESOURCES
#+begin_src shell :results drawer
  git clone https://github.com/TykTechnologies/tyk-oss-k8s-deployment.git ./RESOURCES/definition/structural/ingress/tyk/tyk-oss-k8s-deployment2
  kube2pulumi go -d ./RESOURCES/definition/structural/ingress/tyk/tyk-oss-k8s-deployment
#+end_src
**** certs
***** certmanager
#+begin_src shell :results drawer
  curl -LO https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml
  crd2pulumi --goPath ./KUBE/crds/cert-manager ./RESOURCES/definition/structural/certs/certmanager/cdrDefinitions/customresourcedefinition-*.yaml

#+end_src
**** testing
***** gloo
#+begin_src shell :results drawer
curl -O https://raw.githubusercontent.com/solo-io/gloo/v1.2.9/example/petstore/petstore.yaml
#+end_src
****** petstore
#+begin_src shell :results drawer
kubectl -n testing-petstore port-forward petstore-9d499b76f-2xjqz 8080:8080
#+end_src
http://localhost:8080/swagger.json
http://localhost:8080/api/pets
** DEPENDENCIES
*** required
**** pulumi
https://www.pulumi.com/
*** convenience
**** *summon + gopass*
for providing the ~PULUMI_CONFIG_PASSPHRASE~ in a easy and secure way
*** DEVEL
**** *k3d*
***** used to create k8s-cluster
****** dev
****** stage
******* a *proxy*
if the Ingresscontroller is  used in  ~NodePort~ Mode
a reverse Proxy on the host is needed.
Gloo cannot open ports 80 and 443
Ambassador can
k3d-server-layer can map ports too
**** *Yaml-Splitting*
~kube2pulumi~ works better with single files.
#+begin_example shell
k8split -o SPLIT cert-manager.yaml
#+end_example
**** *kube2pulumi*
generate a =main.go= which must be processed further
#+begin_example shell
  kube2pulumi go -d ./SPLIT
#+end_example
**** *crd2pulumi*
***** output to KUBE
#+begin_example shell
  crd2pulumi --goPath "$(git root)/KUBE/crds"         ./SPLIT/customresourcedefinition*.yaml
  crd2pulumi --goPath "$(git root)/KUBE/crds" --force ./SPLIT/customresourcedefinition*.yaml
#+end_example
***** output to ./crds
#+begin_src shell :results drawer
  crd2pulumi -g ./SPLIT/customresourcedefinition*.yaml
#+end_src
