#+STARTUP: show2levels
* recipes
** misc
*** string
a ~pulumi.String~ can be converted to ~string: ~string(pulumi.String)~
** outputs
*** show available fields
#+BEGIN_SRC go
	ctx.Export("testIngress.URL:", testIng.Spec) //// retrievable with `p stack output tesIngress.URL`
#+END_SRC
*** StringOutput
**** equivalents
#+BEGIN_SRC go
  url := ingressRoute.Spec.Routes().Index(pulumi.Int(0)).Match().ApplyT(func(match string) string {
          url := strings.ReplaceAll(match, "Host(`", "")
          return url
  }).(pulumi.StringOutput)
#+END_SRC
#+BEGIN_SRC go
  url := ingressRoute.Spec.Routes().Index(pulumi.Int(0)).Match().ApplyT(func(match string) pulumi.StringOutput {
          url := strings.ReplaceAll(match, "Host(`", "")
          return pulumi.String(url).ToStringOutput()
  })
#+END_SRC
*** apply
**** refactor
***** equivalent
prefer 1a
****** 1
#+BEGIN_SRC go
func extractURLFromMatch(match string) pulumi.String {
	re := regexp.MustCompile(`^Host\(.(.*?).\)`)
	url := re.FindStringSubmatch(match)[1]
	return pulumi.String(url)
}
#+END_SRC
******* a
#+BEGIN_SRC go
	url := ingressRoute.Spec.Routes().Index(pulumi.Int(0)).Match().ApplyT(extractURLFromMatch)
#+END_SRC
******* b
#+BEGIN_SRC go
  url := ingressRoute.Spec.Routes().Index(pulumi.Int(0)).Match().ApplyT(func(match string) pulumi.String {
          return extractURLFromMatch(match)
  })
#+END_SRC
****** 2
#+BEGIN_SRC go
	url := ingressRoute.Spec.Routes().Index(pulumi.Int(0)).Match().ApplyT(func(match string) pulumi.String {
		re := regexp.MustCompile(`^Host\(.(.*?).\)`)
		url := re.FindStringSubmatch(match)[1]
		return pulumi.String(url)
	})
#+END_SRC


** timeout
[[https://www.pulumi.com/docs/intro/concepts/resources/options/customtimeouts/][CustomTimeouts | Pulumi]]
#+BEGIN_SRC go
  ingress, err := networkingv1.NewIngress(ctx, ing.Name, &networkingv1.IngressArgs{//...
  //////////////////////////////////////////////////////////////////////////////// XOR
  ////////////////////////////////////////////////////////////////////// w/o timeout
  // })
  ////////////////////////////////////////////////////////////////////// w/timeout
  },
  // pulumi.Timeouts(&pulumi.CustomTimeouts{Create: "1m"}))
  pulumi.Timeouts(&pulumi.CustomTimeouts{Create: "30s"}))
  //////////////////////////////////////////////////////////////////////
#+END_SRC
** dependencies
[[https://www.pulumi.com/docs/intro/concepts/resources/options/dependson/][DependsOn | Pulumi]]
** yaml-definitions
pulumi can use definitions from yaml-files
[[https://www.pulumi.com/registry/packages/kubernetes/api-docs/yaml/configfile/#local-file][kubernetes.yaml.ConfigFile | Pulumi Registry]]
#+BEGIN_SRC go
  _, err = yaml.NewConfigFile(ctx, "NAME", &yaml.ConfigFileArgs{
          File: "definition/.....yaml",
  // NOT: File: "./.....yaml",
  //             ^^^^^^^^^^^
  })
#+END_SRC
*** path
**** !!! must be specified starting from moduleRoot.
#+BEGIN_EXAMPLE
    ├─ kubernetes:yaml:ConfigFile                                                     certmanager-certificate-definition
    │  └─ kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition                 certificates.cert-manager.io
#+END_EXAMPLE
**** if yamls are specified relative, only the config files will be created
#+begin_example shell
pulumi stack
#+end_example
#+BEGIN_EXAMPLE
    ├─ kubernetes:yaml:ConfigFile                                                     certmanager-certificate-definition
#+END_EXAMPLE

** stackConfiguration
*** inspecting
#+BEGIN_SRC go
spew.Dump(ctx)
#+END_SRC
*** testing
**** configurationMock
the default configuration is defined in =KUBE/lib/testutil/mocks.go=
***** change
#+BEGIN_SRC go
  // ...
  t.Run(tt.name, func(t *testing.T) {
          // var testConfig = testutil.TestConfig
          var testConfig = map[string]string{
                  "project:domain": ` { "clusterIssuer": "letsencrypt-staging" }`,
                  "project:domainSecret": ` {"domain": "` + tt.args.domainNameSuffix + `"}`,
                  // "project:domainSecret": ` { "domain": "` + "domain.test" + `" }`,

          err := pulumi.RunErr(func(ctx *pulumi.Context) error {

          // ...

          }, testutil.WithMocksAndConfig("project", "stack", testConfig, testutil.Mocks(0)))             //// use localConfig
          // }, testutil.WithMocksAndConfig("project", "stack", testutil.TestConfig, testutil.Mocks(0))) //// use defaultConfig
          }
  })
  // ...
#+END_SRC

*** log config
#+BEGIN_SRC go
  var d domain
  conf := config.New(ctx, "")
  conf.RequireObject("domain", &d)
  ctx.Log.Info(spew.Sdump(&d), nil)
#+END_SRC
** testing
*** debugging
only displayed if test fails or called with ~-v~
#+BEGIN_SRC shell :results drawer
fmt.Println(spew.Sdump(ctx))
spew.Dump(ctx)
#+END_SRC
** logging
[[https://www.pulumi.com/docs/intro/concepts/logging/][Intro to Pulumi: Logging | Pulumi Docs]]
[[https://www.pulumi.com/docs/support/troubleshooting/#diagnosing-issues][Troubleshooting Guide | Pulumi Docs]]
*** levels
#+BEGIN_SRC go
ctx.Log.Debug("Debug",  nil)  //// only shown if cli is run with --debug
ctx.Log.Info("Info",    nil)
ctx.Log.Warn("Warning", nil)
ctx.Log.Error("Error",  nil)
#+END_SRC
